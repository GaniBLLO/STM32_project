
New_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009468  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080097c8  080097c8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097c8  080097c8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000180  08009950  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  08009950  000213d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001323c  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c5  00000000  00000000  000333e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  000365b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8a0  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ccd  00000000  00000000  000530d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f095  00000000  00000000  00069da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049bc  00000000  00000000  000f8e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800955c 	.word	0x0800955c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800955c 	.word	0x0800955c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb43 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f889 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f98f 	bl	800047c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f8df 	bl	8000320 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f008 fd59 	bl	8008c18 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f95f 	bl	8000428 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800016a:	2100      	movs	r1, #0
 800016c:	483a      	ldr	r0, [pc, #232]	; (8000258 <main+0x10c>)
 800016e:	f003 fc39 	bl	80039e4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if(regym == 1){
 8000172:	4b3a      	ldr	r3, [pc, #232]	; (800025c <main+0x110>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d105      	bne.n	8000186 <main+0x3a>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 800017a:	2201      	movs	r2, #1
 800017c:	2178      	movs	r1, #120	; 0x78
 800017e:	4838      	ldr	r0, [pc, #224]	; (8000260 <main+0x114>)
 8000180:	f000 ff5c 	bl	800103c <HAL_GPIO_WritePin>
 8000184:	e063      	b.n	800024e <main+0x102>
      }
      else if(regym == 2){
 8000186:	4b35      	ldr	r3, [pc, #212]	; (800025c <main+0x110>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d131      	bne.n	80001f2 <main+0xa6>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	2178      	movs	r1, #120	; 0x78
 8000192:	4833      	ldr	r0, [pc, #204]	; (8000260 <main+0x114>)
 8000194:	f000 ff52 	bl	800103c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000198:	2108      	movs	r1, #8
 800019a:	4831      	ldr	r0, [pc, #196]	; (8000260 <main+0x114>)
 800019c:	f000 ff80 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a4:	f000 fb7c 	bl	80008a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80001a8:	2108      	movs	r1, #8
 80001aa:	482d      	ldr	r0, [pc, #180]	; (8000260 <main+0x114>)
 80001ac:	f000 ff78 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80001b0:	2110      	movs	r1, #16
 80001b2:	482b      	ldr	r0, [pc, #172]	; (8000260 <main+0x114>)
 80001b4:	f000 ff74 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001bc:	f000 fb70 	bl	80008a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80001c0:	2110      	movs	r1, #16
 80001c2:	4827      	ldr	r0, [pc, #156]	; (8000260 <main+0x114>)
 80001c4:	f000 ff6c 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80001c8:	2120      	movs	r1, #32
 80001ca:	4825      	ldr	r0, [pc, #148]	; (8000260 <main+0x114>)
 80001cc:	f000 ff68 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d4:	f000 fb64 	bl	80008a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80001d8:	2120      	movs	r1, #32
 80001da:	4821      	ldr	r0, [pc, #132]	; (8000260 <main+0x114>)
 80001dc:	f000 ff60 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80001e0:	2140      	movs	r1, #64	; 0x40
 80001e2:	481f      	ldr	r0, [pc, #124]	; (8000260 <main+0x114>)
 80001e4:	f000 ff5c 	bl	80010a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 fb58 	bl	80008a0 <HAL_Delay>
 80001f0:	e02d      	b.n	800024e <main+0x102>
      }
      else if(regym == 3){
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <main+0x110>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b03      	cmp	r3, #3
 80001f8:	d129      	bne.n	800024e <main+0x102>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2178      	movs	r1, #120	; 0x78
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <main+0x114>)
 8000200:	f000 ff1c 	bl	800103c <HAL_GPIO_WritePin>
	  for(int i = 0; i < 65535; i++){
 8000204:	2300      	movs	r3, #0
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	e008      	b.n	800021c <main+0xd0>
	      TIM1->CCR1 = i;
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <main+0x118>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	6353      	str	r3, [r2, #52]	; 0x34
	      HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fb45 	bl	80008a0 <HAL_Delay>
	  for(int i = 0; i < 65535; i++){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3301      	adds	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000222:	4293      	cmp	r3, r2
 8000224:	ddf1      	ble.n	800020a <main+0xbe>
	  }
	  for(int i = 0; i < 65535; i++){
 8000226:	2300      	movs	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
 800022a:	e00b      	b.n	8000244 <main+0xf8>
	      TIM1->CCR1 = 65535 - i;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000232:	33ff      	adds	r3, #255	; 0xff
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <main+0x118>)
 8000236:	6353      	str	r3, [r2, #52]	; 0x34
	      HAL_Delay(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fb31 	bl	80008a0 <HAL_Delay>
	  for(int i = 0; i < 65535; i++){
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	603b      	str	r3, [r7, #0]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800024a:	4293      	cmp	r3, r2
 800024c:	ddee      	ble.n	800022c <main+0xe0>
	  }

      }
      enter = 0;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <main+0x11c>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
      if(regym == 1){
 8000254:	e78d      	b.n	8000172 <main+0x26>
 8000256:	bf00      	nop
 8000258:	2000019c 	.word	0x2000019c
 800025c:	20000000 	.word	0x20000000
 8000260:	40010c00 	.word	0x40010c00
 8000264:	40012c00 	.word	0x40012c00
 8000268:	20000228 	.word	0x20000228

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	; 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f009 f966 	bl	800954c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fc2e 	bl	8002b24 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 f939 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 ff86 	bl	8003200 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 f923 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002fe:	2310      	movs	r3, #16
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f003 f9b7 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000314:	f000 f916 	bl	8000544 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3750      	adds	r7, #80	; 0x50
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b092      	sub	sp, #72	; 0x48
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
 8000340:	615a      	str	r2, [r3, #20]
 8000342:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2220      	movs	r2, #32
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f009 f8fe 	bl	800954c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000350:	4b33      	ldr	r3, [pc, #204]	; (8000420 <MX_TIM1_Init+0x100>)
 8000352:	4a34      	ldr	r2, [pc, #208]	; (8000424 <MX_TIM1_Init+0x104>)
 8000354:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000356:	4b32      	ldr	r3, [pc, #200]	; (8000420 <MX_TIM1_Init+0x100>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <MX_TIM1_Init+0x100>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <MX_TIM1_Init+0x100>)
 8000364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036a:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <MX_TIM1_Init+0x100>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_TIM1_Init+0x100>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_TIM1_Init+0x100>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800037c:	4828      	ldr	r0, [pc, #160]	; (8000420 <MX_TIM1_Init+0x100>)
 800037e:	f003 fa87 	bl	8003890 <HAL_TIM_PWM_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000388:	f000 f8dc 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038c:	2300      	movs	r3, #0
 800038e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000398:	4619      	mov	r1, r3
 800039a:	4821      	ldr	r0, [pc, #132]	; (8000420 <MX_TIM1_Init+0x100>)
 800039c:	f004 f84a 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80003a6:	f000 f8cd 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003aa:	2360      	movs	r3, #96	; 0x60
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b2:	2300      	movs	r3, #0
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b6:	2300      	movs	r3, #0
 80003b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003be:	2300      	movs	r3, #0
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ca:	2200      	movs	r2, #0
 80003cc:	4619      	mov	r1, r3
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <MX_TIM1_Init+0x100>)
 80003d0:	f003 fbf6 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80003da:	f000 f8b3 	bl	8000544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <MX_TIM1_Init+0x100>)
 8000402:	f004 f8c1 	bl	8004588 <HAL_TIMEx_ConfigBreakDeadTime>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800040c:	f000 f89a 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <MX_TIM1_Init+0x100>)
 8000412:	f000 f8f7 	bl	8000604 <HAL_TIM_MspPostInit>

}
 8000416:	bf00      	nop
 8000418:	3748      	adds	r7, #72	; 0x48
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	2000019c 	.word	0x2000019c
 8000424:	40012c00 	.word	0x40012c00

08000428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART1_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000460:	f004 f958 	bl	8004714 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f86b 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200001e4 	.word	0x200001e4
 8000478:	40013800 	.word	0x40013800

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b28      	ldr	r3, [pc, #160]	; (8000534 <MX_GPIO_Init+0xb8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a27      	ldr	r2, [pc, #156]	; (8000534 <MX_GPIO_Init+0xb8>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <MX_GPIO_Init+0xb8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b22      	ldr	r3, [pc, #136]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a21      	ldr	r2, [pc, #132]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_GPIO_Init+0xb8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */


  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004d8:	2330      	movs	r3, #48	; 0x30
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_GPIO_Init+0xbc>)
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <MX_GPIO_Init+0xc0>)
 80004ec:	f000 fb38 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004f0:	2378      	movs	r3, #120	; 0x78
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_GPIO_Init+0xc4>)
 8000508:	f000 fb2a 	bl	8000b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	200a      	movs	r0, #10
 8000512:	f000 fad5 	bl	8000ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fafe 	bl	8000b18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2017      	movs	r0, #23
 8000522:	f000 facd 	bl	8000ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000526:	2017      	movs	r0, #23
 8000528:	f000 faf6 	bl	8000b18 <HAL_NVIC_EnableIRQ>

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	10110000 	.word	0x10110000
 800053c:	40010800 	.word	0x40010800
 8000540:	40010c00 	.word	0x40010c00

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>

0800054e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
	...

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <HAL_TIM_PWM_MspInit+0x34>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d10b      	bne.n	80005f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_TIM_PWM_MspInit+0x38>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_TIM_PWM_MspInit+0x38>)
 80005e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_TIM_PWM_MspInit+0x38>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40012c00 	.word	0x40012c00
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_TIM_MspPostInit+0x5c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d118      	bne.n	8000656 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_TIM_MspPostInit+0x60>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_TIM_MspPostInit+0x60>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_TIM_MspPostInit+0x60>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800063c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2302      	movs	r3, #2
 8000648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <HAL_TIM_MspPostInit+0x64>)
 8000652:	f000 fa85 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40012c00 	.word	0x40012c00
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <HAL_UART_MspInit+0x8c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d131      	bne.n	80006f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_UART_MspInit+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <HAL_UART_MspInit+0x90>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006d2:	f000 fa45 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006ec:	f000 fa38 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074a:	f000 f88d 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}

08000752 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000756:	2010      	movs	r0, #16
 8000758:	f000 fcca 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000766:	f000 fe4b 	bl	8001400 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000ec8 	.word	0x20000ec8

08000774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000778:	2020      	movs	r0, #32
 800077a:	f000 fcb9 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
	...

08000790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff ffe4 	bl	8000782 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f008 fea3 	bl	8009504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff fcc5 	bl	800014c <main>
  bx lr
 80007c2:	4770      	bx	lr
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80007cc:	080097d0 	.word	0x080097d0
  ldr r2, =_sbss
 80007d0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007d4:	200013d4 	.word	0x200013d4

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x28>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f947 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff feb4 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f98e 	bl	8000b48 <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f93c 	bl	8000ac0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000004 	.word	0x20000004
 8000860:	2000000c 	.word	0x2000000c
 8000864:	20000008 	.word	0x20000008

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	2000000c 	.word	0x2000000c
 8000888:	2000022c 	.word	0x2000022c

0800088c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	2000022c 	.word	0x2000022c

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff fff0 	bl	800088c <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffe0 	bl	800088c <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000000c 	.word	0x2000000c

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <__NVIC_EnableIRQ+0x34>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff90 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b07      	cmp	r3, #7
 8000a8c:	d00f      	beq.n	8000aae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d00c      	beq.n	8000aae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d009      	beq.n	8000aae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d006      	beq.n	8000aae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d003      	beq.n	8000aae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aa6:	2192      	movs	r1, #146	; 0x92
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000aaa:	f7ff fd50 	bl	800054e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ff1a 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08009574 	.word	0x08009574

08000ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d903      	bls.n	8000ae0 <HAL_NVIC_SetPriority+0x20>
 8000ad8:	21aa      	movs	r1, #170	; 0xaa
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <HAL_NVIC_SetPriority+0x54>)
 8000adc:	f7ff fd37 	bl	800054e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d903      	bls.n	8000aee <HAL_NVIC_SetPriority+0x2e>
 8000ae6:	21ab      	movs	r1, #171	; 0xab
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <HAL_NVIC_SetPriority+0x54>)
 8000aea:	f7ff fd30 	bl	800054e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aee:	f7ff ff1f 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000af2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	6978      	ldr	r0, [r7, #20]
 8000afa:	f7ff ff6d 	bl	80009d8 <NVIC_EncodePriority>
 8000afe:	4602      	mov	r2, r0
 8000b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff3c 	bl	8000984 <__NVIC_SetPriority>
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	08009574 	.word	0x08009574

08000b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	da03      	bge.n	8000b32 <HAL_NVIC_EnableIRQ+0x1a>
 8000b2a:	21be      	movs	r1, #190	; 0xbe
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_NVIC_EnableIRQ+0x2c>)
 8000b2e:	f7ff fd0e 	bl	800054e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff08 	bl	800094c <__NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08009574 	.word	0x08009574

08000b48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff73 	bl	8000a3c <SysTick_Config>
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <HAL_GPIO_Init+0x270>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_GPIO_Init+0x42>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a95      	ldr	r2, [pc, #596]	; (8000dd4 <HAL_GPIO_Init+0x274>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d00f      	beq.n	8000ba2 <HAL_GPIO_Init+0x42>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a94      	ldr	r2, [pc, #592]	; (8000dd8 <HAL_GPIO_Init+0x278>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d00b      	beq.n	8000ba2 <HAL_GPIO_Init+0x42>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a93      	ldr	r2, [pc, #588]	; (8000ddc <HAL_GPIO_Init+0x27c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d007      	beq.n	8000ba2 <HAL_GPIO_Init+0x42>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a92      	ldr	r2, [pc, #584]	; (8000de0 <HAL_GPIO_Init+0x280>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x42>
 8000b9a:	21bd      	movs	r1, #189	; 0xbd
 8000b9c:	4891      	ldr	r0, [pc, #580]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000b9e:	f7ff fcd6 	bl	800054e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <HAL_GPIO_Init+0x58>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x60>
 8000bb8:	21be      	movs	r1, #190	; 0xbe
 8000bba:	488a      	ldr	r0, [pc, #552]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000bbc:	f7ff fcc7 	bl	800054e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 821c 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f000 8217 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b11      	cmp	r3, #17
 8000bda:	f000 8212 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	f000 820d 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	f000 8208 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a7c      	ldr	r2, [pc, #496]	; (8000de8 <HAL_GPIO_Init+0x288>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	f000 8202 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a7a      	ldr	r2, [pc, #488]	; (8000dec <HAL_GPIO_Init+0x28c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	f000 81fc 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	4a78      	ldr	r2, [pc, #480]	; (8000df0 <HAL_GPIO_Init+0x290>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f000 81f6 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a76      	ldr	r2, [pc, #472]	; (8000df4 <HAL_GPIO_Init+0x294>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f000 81f0 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <HAL_GPIO_Init+0x298>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	f000 81ea 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4a72      	ldr	r2, [pc, #456]	; (8000dfc <HAL_GPIO_Init+0x29c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	f000 81e4 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	f000 81df 	beq.w	8001002 <HAL_GPIO_Init+0x4a2>
 8000c44:	21bf      	movs	r1, #191	; 0xbf
 8000c46:	4867      	ldr	r0, [pc, #412]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000c48:	f7ff fc81 	bl	800054e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	e1d9      	b.n	8001002 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	f040 81c8 	bne.w	8000ffc <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <HAL_GPIO_Init+0x270>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d013      	beq.n	8000c9c <HAL_GPIO_Init+0x13c>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <HAL_GPIO_Init+0x274>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d00f      	beq.n	8000c9c <HAL_GPIO_Init+0x13c>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a56      	ldr	r2, [pc, #344]	; (8000dd8 <HAL_GPIO_Init+0x278>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00b      	beq.n	8000c9c <HAL_GPIO_Init+0x13c>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <HAL_GPIO_Init+0x27c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x13c>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a54      	ldr	r2, [pc, #336]	; (8000de0 <HAL_GPIO_Init+0x280>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x13c>
 8000c94:	21cd      	movs	r1, #205	; 0xcd
 8000c96:	4853      	ldr	r0, [pc, #332]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000c98:	f7ff fc59 	bl	800054e <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4a56      	ldr	r2, [pc, #344]	; (8000dfc <HAL_GPIO_Init+0x29c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f000 80c1 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
 8000ca8:	4a54      	ldr	r2, [pc, #336]	; (8000dfc <HAL_GPIO_Init+0x29c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f200 80e7 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000cb0:	4a4f      	ldr	r2, [pc, #316]	; (8000df0 <HAL_GPIO_Init+0x290>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f000 80b9 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x290>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f200 80df 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x298>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f000 80b1 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
 8000cc8:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_GPIO_Init+0x298>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f200 80d7 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000cd0:	4a46      	ldr	r2, [pc, #280]	; (8000dec <HAL_GPIO_Init+0x28c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	f000 80a9 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
 8000cd8:	4a44      	ldr	r2, [pc, #272]	; (8000dec <HAL_GPIO_Init+0x28c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f200 80cf 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_GPIO_Init+0x294>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f000 80a1 	beq.w	8000e2a <HAL_GPIO_Init+0x2ca>
 8000ce8:	4a42      	ldr	r2, [pc, #264]	; (8000df4 <HAL_GPIO_Init+0x294>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	f200 80c7 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000cf0:	2b12      	cmp	r3, #18
 8000cf2:	d82b      	bhi.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000cf4:	2b12      	cmp	r3, #18
 8000cf6:	f200 80c2 	bhi.w	8000e7e <HAL_GPIO_Init+0x31e>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <HAL_GPIO_Init+0x1a0>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000e2b 	.word	0x08000e2b
 8000d04:	08000d55 	.word	0x08000d55
 8000d08:	08000da7 	.word	0x08000da7
 8000d0c:	08000e79 	.word	0x08000e79
 8000d10:	08000e7f 	.word	0x08000e7f
 8000d14:	08000e7f 	.word	0x08000e7f
 8000d18:	08000e7f 	.word	0x08000e7f
 8000d1c:	08000e7f 	.word	0x08000e7f
 8000d20:	08000e7f 	.word	0x08000e7f
 8000d24:	08000e7f 	.word	0x08000e7f
 8000d28:	08000e7f 	.word	0x08000e7f
 8000d2c:	08000e7f 	.word	0x08000e7f
 8000d30:	08000e7f 	.word	0x08000e7f
 8000d34:	08000e7f 	.word	0x08000e7f
 8000d38:	08000e7f 	.word	0x08000e7f
 8000d3c:	08000e7f 	.word	0x08000e7f
 8000d40:	08000e7f 	.word	0x08000e7f
 8000d44:	08000d7d 	.word	0x08000d7d
 8000d48:	08000e01 	.word	0x08000e01
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_GPIO_Init+0x288>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d06b      	beq.n	8000e2a <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e094      	b.n	8000e7e <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0x214>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x214>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x214>
 8000d6c:	21d5      	movs	r1, #213	; 0xd5
 8000d6e:	481d      	ldr	r0, [pc, #116]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000d70:	f7ff fbed 	bl	800054e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e081      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d00b      	beq.n	8000d9c <HAL_GPIO_Init+0x23c>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x23c>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x23c>
 8000d94:	21dc      	movs	r1, #220	; 0xdc
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000d98:	f7ff fbd9 	bl	800054e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e06c      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d00b      	beq.n	8000dc6 <HAL_GPIO_Init+0x266>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x266>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x266>
 8000dbe:	21e3      	movs	r1, #227	; 0xe3
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <HAL_GPIO_Init+0x284>)
 8000dc2:	f7ff fbc4 	bl	800054e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e057      	b.n	8000e80 <HAL_GPIO_Init+0x320>
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	40011800 	.word	0x40011800
 8000de4:	080095b0 	.word	0x080095b0
 8000de8:	10110000 	.word	0x10110000
 8000dec:	10210000 	.word	0x10210000
 8000df0:	10310000 	.word	0x10310000
 8000df4:	10120000 	.word	0x10120000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d00b      	beq.n	8000e20 <HAL_GPIO_Init+0x2c0>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x2c0>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2c0>
 8000e18:	21ea      	movs	r1, #234	; 0xea
 8000e1a:	4880      	ldr	r0, [pc, #512]	; (800101c <HAL_GPIO_Init+0x4bc>)
 8000e1c:	f7ff fb97 	bl	800054e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	330c      	adds	r3, #12
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e02a      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <HAL_GPIO_Init+0x2ea>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x2ea>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2ea>
 8000e42:	21f7      	movs	r1, #247	; 0xf7
 8000e44:	4875      	ldr	r0, [pc, #468]	; (800101c <HAL_GPIO_Init+0x4bc>)
 8000e46:	f7ff fb82 	bl	800054e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e013      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e009      	b.n	8000e80 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x320>
          break;
 8000e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d801      	bhi.n	8000e8a <HAL_GPIO_Init+0x32a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_Init+0x32e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d802      	bhi.n	8000e9c <HAL_GPIO_Init+0x33c>
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x342>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8096 	beq.w	8000ffc <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	4b53      	ldr	r3, [pc, #332]	; (8001020 <HAL_GPIO_Init+0x4c0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a52      	ldr	r2, [pc, #328]	; (8001020 <HAL_GPIO_Init+0x4c0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b50      	ldr	r3, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x4c0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x4c4>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <HAL_GPIO_Init+0x4c8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x3dc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a45      	ldr	r2, [pc, #276]	; (800102c <HAL_GPIO_Init+0x4cc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x3d8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a44      	ldr	r2, [pc, #272]	; (8001030 <HAL_GPIO_Init+0x4d0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x3d4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a43      	ldr	r2, [pc, #268]	; (8001034 <HAL_GPIO_Init+0x4d4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x3d0>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x3de>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x3de>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x3de>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x3de>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4e:	4935      	ldr	r1, [pc, #212]	; (8001024 <HAL_GPIO_Init+0x4c4>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4932      	ldr	r1, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	492e      	ldr	r1, [pc, #184]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4928      	ldr	r1, [pc, #160]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4924      	ldr	r1, [pc, #144]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	491e      	ldr	r1, [pc, #120]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	491a      	ldr	r1, [pc, #104]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	4914      	ldr	r1, [pc, #80]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60cb      	str	r3, [r1, #12]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4910      	ldr	r1, [pc, #64]	; (8001038 <HAL_GPIO_Init+0x4d8>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	3301      	adds	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	f47f ae1e 	bne.w	8000c4e <HAL_GPIO_Init+0xee>
  }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	080095b0 	.word	0x080095b0
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	40010800 	.word	0x40010800
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40011000 	.word	0x40011000
 8001034:	40011400 	.word	0x40011400
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_GPIO_WritePin+0x20>
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_GPIO_WritePin+0x2a>
 800105c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <HAL_GPIO_WritePin+0x60>)
 8001062:	f7ff fa74 	bl	800054e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <HAL_GPIO_WritePin+0x40>
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d004      	beq.n	800107c <HAL_GPIO_WritePin+0x40>
 8001072:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <HAL_GPIO_WritePin+0x60>)
 8001078:	f7ff fa69 	bl	800054e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	611a      	str	r2, [r3, #16]
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	080095b0 	.word	0x080095b0

080010a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <HAL_GPIO_TogglePin+0x1c>
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_GPIO_TogglePin+0x26>
 80010bc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <HAL_GPIO_TogglePin+0x4c>)
 80010c2:	f7ff fa44 	bl	800054e <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	041a      	lsls	r2, r3, #16
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	400b      	ands	r3, r1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	611a      	str	r2, [r3, #16]
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080095b0 	.word	0x080095b0

080010f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f806 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin == GPIO_PIN_4){
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d116      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x3e>
      if(regym == 1)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d103      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x20>
	  regym = 2;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e00e      	b.n	800115e <HAL_GPIO_EXTI_Callback+0x3e>
      else if(regym == 2)
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d103      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x30>
	  regym = 3;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e006      	b.n	800115e <HAL_GPIO_EXTI_Callback+0x3e>
      else if(regym == 3)
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d102      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x3e>
	  regym = 1;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_GPIO_EXTI_Callback+0x5c>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
  }
  if(GPIO_Pin == GPIO_PIN_5){
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	2b20      	cmp	r3, #32
 8001162:	d106      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x52>
      if(enter == 0)
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_GPIO_EXTI_Callback+0x60>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x52>
	  enter = 1;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_GPIO_EXTI_Callback+0x60>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000000 	.word	0x20000000
 8001180:	20000228 	.word	0x20000228

08001184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af06      	add	r7, sp, #24
 800118a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e106      	b.n	80013a4 <HAL_PCD_Init+0x220>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a84      	ldr	r2, [pc, #528]	; (80013ac <HAL_PCD_Init+0x228>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d003      	beq.n	80011a8 <HAL_PCD_Init+0x24>
 80011a0:	218e      	movs	r1, #142	; 0x8e
 80011a2:	4883      	ldr	r0, [pc, #524]	; (80013b0 <HAL_PCD_Init+0x22c>)
 80011a4:	f7ff f9d3 	bl	800054e <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d106      	bne.n	80011c2 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f007 fef7 	bl	8008fb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fc3c 	bl	8004a4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	687e      	ldr	r6, [r7, #4]
 80011dc:	466d      	mov	r5, sp
 80011de:	f106 0410 	add.w	r4, r6, #16
 80011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	602b      	str	r3, [r5, #0]
 80011ea:	1d33      	adds	r3, r6, #4
 80011ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f003 fc06 	bl	8004a00 <USB_CoreInit>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0ce      	b.n	80013a4 <HAL_PCD_Init+0x220>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fc37 	bl	8004a80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e04c      	b.n	80012b2 <HAL_PCD_Init+0x12e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3301      	adds	r3, #1
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	b298      	uxth	r0, r3
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3336      	adds	r3, #54	; 0x36
 8001256:	4602      	mov	r2, r0
 8001258:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3303      	adds	r3, #3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3338      	adds	r3, #56	; 0x38
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	333c      	adds	r3, #60	; 0x3c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3340      	adds	r3, #64	; 0x40
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3ad      	bcc.n	8001218 <HAL_PCD_Init+0x94>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e044      	b.n	800134c <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3b5      	bcc.n	80012c2 <HAL_PCD_Init+0x13e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	687e      	ldr	r6, [r7, #4]
 800135e:	466d      	mov	r5, sp
 8001360:	f106 0410 	add.w	r4, r6, #16
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	1d33      	adds	r3, r6, #4
 800136e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f003 fb91 	bl	8004a98 <USB_DevInit>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00d      	b.n	80013a4 <HAL_PCD_Init+0x220>
  }

  hpcd->USB_Address = 0U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f006 f843 	bl	8007428 <USB_DevDisconnect>

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	40005c00 	.word	0x40005c00
 80013b0:	080095ec 	.word	0x080095ec

080013b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <HAL_PCD_Start+0x16>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e016      	b.n	80013f8 <HAL_PCD_Start+0x44>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fb22 	bl	8004a20 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013dc:	2101      	movs	r1, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f008 f859 	bl	8009496 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 f813 	bl	8007414 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f006 f815 	bl	800743c <USB_ReadInterrupts>
 8001412:	4603      	mov	r3, r0
 8001414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800141c:	d102      	bne.n	8001424 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fb5f 	bl	8001ae2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f006 f807 	bl	800743c <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001438:	d112      	bne.n	8001460 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800144c:	b292      	uxth	r2, r2
 800144e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f007 fe27 	bl	80090a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f923 	bl	80016a6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f005 ffe9 	bl	800743c <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001474:	d10b      	bne.n	800148e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001488:	b292      	uxth	r2, r2
 800148a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f005 ffd2 	bl	800743c <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800149e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014a2:	d10b      	bne.n	80014bc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 ffbb 	bl	800743c <USB_ReadInterrupts>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d0:	d126      	bne.n	8001520 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	b292      	uxth	r2, r2
 80014e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0208 	bic.w	r2, r2, #8
 80014fc:	b292      	uxth	r2, r2
 80014fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f007 fe08 	bl	8009118 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800151a:	b292      	uxth	r2, r2
 800151c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f005 ff89 	bl	800743c <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001534:	f040 8082 	bne.w	800163c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
 800153c:	e010      	b.n	8001560 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	7ffb      	ldrb	r3, [r7, #31]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	441a      	add	r2, r3
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	b292      	uxth	r2, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3320      	adds	r3, #32
 8001554:	443b      	add	r3, r7
 8001556:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	3301      	adds	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d9eb      	bls.n	800153e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	b292      	uxth	r2, r2
 8001592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001596:	bf00      	nop
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f6      	beq.n	8001598 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	77fb      	strb	r3, [r7, #31]
 80015c6:	e00f      	b.n	80015e8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80015c8:	7ffb      	ldrb	r3, [r7, #31]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4611      	mov	r1, r2
 80015d0:	7ffa      	ldrb	r2, [r7, #31]
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	440a      	add	r2, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3320      	adds	r3, #32
 80015da:	443b      	add	r3, r7
 80015dc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80015e0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	3301      	adds	r3, #1
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	d9ec      	bls.n	80015c8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	b292      	uxth	r2, r2
 8001602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0204 	orr.w	r2, r2, #4
 8001630:	b292      	uxth	r2, r2
 8001632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f007 fd54 	bl	80090e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fefb 	bl	800743c <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001650:	d10e      	bne.n	8001670 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f007 fd0d 	bl	800908a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fee1 	bl	800743c <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001684:	d10b      	bne.n	800169e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_SetAddress+0x1a>
 80016bc:	2302      	movs	r3, #2
 80016be:	e013      	b.n	80016e8 <HAL_PCD_SetAddress+0x42>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 fe88 	bl	80073ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	803b      	strh	r3, [r7, #0]
 8001706:	4613      	mov	r3, r2
 8001708:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800170e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da0e      	bge.n	8001734 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	e00e      	b.n	8001752 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800175e:	883a      	ldrh	r2, [r7, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	78ba      	ldrb	r2, [r7, #2]
 8001768:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d102      	bne.n	8001788 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_PCD_EP_Open+0xa6>
 8001792:	2302      	movs	r3, #2
 8001794:	e00e      	b.n	80017b4 <HAL_PCD_EP_Open+0xc4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 f997 	bl	8004ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017b2:	7afb      	ldrb	r3, [r7, #11]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da0e      	bge.n	80017ee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	705a      	strb	r2, [r3, #1]
 80017ec:	e00e      	b.n	800180c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 0207 	and.w	r2, r3, #7
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	b2da      	uxtb	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_PCD_EP_Close+0x6a>
 8001822:	2302      	movs	r3, #2
 8001824:	e00e      	b.n	8001844 <HAL_PCD_EP_Close+0x88>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68f9      	ldr	r1, [r7, #12]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fcb9 	bl	80051ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	460b      	mov	r3, r1
 800185a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2200      	movs	r2, #0
 800188a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800188c:	7afb      	ldrb	r3, [r7, #11]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	b2da      	uxtb	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001898:	7afb      	ldrb	r3, [r7, #11]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fe6b 	bl	8005584 <USB_EPStartXfer>
 80018ae:	e005      	b.n	80018bc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6979      	ldr	r1, [r7, #20]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fe64 	bl	8005584 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 0207 	and.w	r2, r3, #7
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018e8:	681b      	ldr	r3, [r3, #0]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2201      	movs	r2, #1
 800193e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	b2da      	uxtb	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fe11 	bl	8005584 <USB_EPStartXfer>
 8001962:	e005      	b.n	8001970 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6979      	ldr	r1, [r7, #20]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fe0a 	bl	8005584 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 0207 	and.w	r2, r3, #7
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	d901      	bls.n	8001998 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e04c      	b.n	8001a32 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da0e      	bge.n	80019be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	705a      	strb	r2, [r3, #1]
 80019bc:	e00c      	b.n	80019d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_EP_SetStall+0x7e>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e01c      	b.n	8001a32 <HAL_PCD_EP_SetStall+0xb8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 fbf4 	bl	80071f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f005 fd19 	bl	800745a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 020f 	and.w	r2, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d901      	bls.n	8001a58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e040      	b.n	8001ada <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da0e      	bge.n	8001a7e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	705a      	strb	r2, [r3, #1]
 8001a7c:	e00e      	b.n	8001a9c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 0207 	and.w	r2, r3, #7
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_EP_ClrStall+0x82>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e00e      	b.n	8001ada <HAL_PCD_EP_ClrStall+0xa0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fbe2 	bl	8007294 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b08e      	sub	sp, #56	; 0x38
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aea:	e2ec      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001af6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8161 	bne.w	8001dce <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d152      	bne.n	8001bbc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b26:	81fb      	strh	r3, [r7, #14]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3328      	adds	r3, #40	; 0x28
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	3302      	adds	r3, #2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	441a      	add	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f007 fa6a 	bl	8009056 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 829b 	beq.w	80020c6 <PCD_EP_ISR_Handler+0x5e4>
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 8296 	bne.w	80020c6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bba:	e284      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d034      	beq.n	8001c40 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	3306      	adds	r3, #6
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f005 fc70 	bl	80074fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c26:	4013      	ands	r3, r2
 8001c28:	823b      	strh	r3, [r7, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	8a3a      	ldrh	r2, [r7, #16]
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	b292      	uxth	r2, r2
 8001c36:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f007 f9df 	bl	8008ffc <HAL_PCD_SetupStageCallback>
 8001c3e:	e242      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f280 823e 	bge.w	80020c6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c56:	4013      	ands	r3, r2
 8001c58:	83bb      	strh	r3, [r7, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	8bba      	ldrh	r2, [r7, #28]
 8001c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c64:	b292      	uxth	r2, r2
 8001c66:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d019      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0x1ee>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	6959      	ldr	r1, [r3, #20]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f005 fc20 	bl	80074fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f007 f9a8 	bl	8009020 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 81f2 	bne.w	80020c6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d112      	bne.n	8001d30 <PCD_EP_ISR_Handler+0x24e>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e02f      	b.n	8001d90 <PCD_EP_ISR_Handler+0x2ae>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b3e      	cmp	r3, #62	; 0x3e
 8001d36:	d813      	bhi.n	8001d60 <PCD_EP_ISR_Handler+0x27e>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <PCD_EP_ISR_Handler+0x270>
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	3301      	adds	r3, #1
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	e017      	b.n	8001d90 <PCD_EP_ISR_Handler+0x2ae>
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <PCD_EP_ISR_Handler+0x298>
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	3b01      	subs	r3, #1
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da0:	827b      	strh	r3, [r7, #18]
 8001da2:	8a7b      	ldrh	r3, [r7, #18]
 8001da4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001da8:	827b      	strh	r3, [r7, #18]
 8001daa:	8a7b      	ldrh	r3, [r7, #18]
 8001dac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001db0:	827b      	strh	r3, [r7, #18]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	8a7b      	ldrh	r3, [r7, #18]
 8001db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	8013      	strh	r3, [r2, #0]
 8001dcc:	e17b      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001de0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f280 80ea 	bge.w	8001fbe <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e00:	4013      	ands	r3, r2
 8001e02:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e1c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	7b1b      	ldrb	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d122      	bne.n	8001e80 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3306      	adds	r3, #6
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e62:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	88da      	ldrh	r2, [r3, #6]
 8001e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e7a:	f005 fb3e 	bl	80074fa <USB_ReadPMA>
 8001e7e:	e07c      	b.n	8001f7a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	78db      	ldrb	r3, [r3, #3]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d108      	bne.n	8001e9a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f927 	bl	80020e2 <HAL_PCD_EP_DB_Receive>
 8001e94:	4603      	mov	r3, r0
 8001e96:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e98:	e06f      	b.n	8001f7a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	441a      	add	r2, r3
 8001ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d021      	beq.n	8001f38 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d02a      	beq.n	8001f7a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	6959      	ldr	r1, [r3, #20]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	891a      	ldrh	r2, [r3, #8]
 8001f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f32:	f005 fae2 	bl	80074fa <USB_ReadPMA>
 8001f36:	e020      	b.n	8001f7a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3306      	adds	r3, #6
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f60:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	6959      	ldr	r1, [r3, #20]
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	895a      	ldrh	r2, [r3, #10]
 8001f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f76:	f005 fac0 	bl	80074fa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f80:	441a      	add	r2, r3
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x4c2>
 8001f9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d206      	bcs.n	8001fb2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f007 f838 	bl	8009020 <HAL_PCD_DataOutStageCallback>
 8001fb0:	e005      	b.n	8001fbe <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fae3 	bl	8005584 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d07e      	beq.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	843b      	strh	r3, [r7, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	8c3b      	ldrh	r3, [r7, #32]
 8002008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800200c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002010:	b29b      	uxth	r3, r3
 8002012:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	78db      	ldrb	r3, [r3, #3]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d00c      	beq.n	8002036 <PCD_EP_ISR_Handler+0x554>
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	78db      	ldrb	r3, [r3, #3]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002028:	2b02      	cmp	r3, #2
 800202a:	d146      	bne.n	80020ba <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800202c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d141      	bne.n	80020ba <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	3302      	adds	r3, #2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	8bfb      	ldrh	r3, [r7, #30]
 8002066:	429a      	cmp	r2, r3
 8002068:	d906      	bls.n	8002078 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	8bfb      	ldrh	r3, [r7, #30]
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	619a      	str	r2, [r3, #24]
 8002076:	e002      	b.n	800207e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f006 ffe2 	bl	8009056 <HAL_PCD_DataInStageCallback>
 8002092:	e018      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	8bfb      	ldrh	r3, [r7, #30]
 800209a:	441a      	add	r2, r3
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	8bfb      	ldrh	r3, [r7, #30]
 80020a6:	441a      	add	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fa66 	bl	8005584 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020b8:	e005      	b.n	80020c6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020bc:	461a      	mov	r2, r3
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f91b 	bl	80022fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f6ff ad0a 	blt.w	8001aec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b088      	sub	sp, #32
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d07e      	beq.n	80021f8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	3302      	adds	r3, #2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002122:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	429a      	cmp	r2, r3
 800212c:	d306      	bcc.n	800213c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e002      	b.n	8002142 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d123      	bne.n	8002192 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002164:	833b      	strh	r3, [r7, #24]
 8002166:	8b3b      	ldrh	r3, [r7, #24]
 8002168:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800216c:	833b      	strh	r3, [r7, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	441a      	add	r2, r3
 800217c:	8b3b      	ldrh	r3, [r7, #24]
 800217e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218e:	b29b      	uxth	r3, r3
 8002190:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01f      	beq.n	80021dc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	82fb      	strh	r3, [r7, #22]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	8afb      	ldrh	r3, [r7, #22]
 80021c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021d8:	b29b      	uxth	r3, r3
 80021da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021dc:	8b7b      	ldrh	r3, [r7, #26]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6959      	ldr	r1, [r3, #20]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	891a      	ldrh	r2, [r3, #8]
 80021f0:	8b7b      	ldrh	r3, [r7, #26]
 80021f2:	f005 f982 	bl	80074fa <USB_ReadPMA>
 80021f6:	e07c      	b.n	80022f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	3306      	adds	r3, #6
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	8b7b      	ldrh	r3, [r7, #26]
 8002228:	429a      	cmp	r2, r3
 800222a:	d306      	bcc.n	800223a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	619a      	str	r2, [r3, #24]
 8002238:	e002      	b.n	8002240 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d123      	bne.n	8002290 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	83fb      	strh	r3, [r7, #30]
 8002264:	8bfb      	ldrh	r3, [r7, #30]
 8002266:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800226a:	83fb      	strh	r3, [r7, #30]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	8bfb      	ldrh	r3, [r7, #30]
 800227c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	b29b      	uxth	r3, r3
 800228e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11f      	bne.n	80022da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b4:	83bb      	strh	r3, [r7, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	441a      	add	r2, r3
 80022c4:	8bbb      	ldrh	r3, [r7, #28]
 80022c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022da:	8b7b      	ldrh	r3, [r7, #26]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6959      	ldr	r1, [r3, #20]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	895a      	ldrh	r2, [r3, #10]
 80022ec:	8b7b      	ldrh	r3, [r7, #26]
 80022ee:	f005 f904 	bl	80074fa <USB_ReadPMA>
    }
  }

  return count;
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0a2      	sub	sp, #136	; 0x88
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 81c7 	beq.w	80026a4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	3302      	adds	r3, #2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800234a:	429a      	cmp	r2, r3
 800234c:	d907      	bls.n	800235e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002356:	1ad2      	subs	r2, r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	e002      	b.n	8002364 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 80b9 	bne.w	80024e0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d126      	bne.n	80023c4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	4413      	add	r3, r2
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	011a      	lsls	r2, r3, #4
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	4413      	add	r3, r2
 8002398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	e01a      	b.n	80023fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	785b      	ldrb	r3, [r3, #1]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d116      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	4413      	add	r3, r2
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	011a      	lsls	r2, r3, #4
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	4413      	add	r3, r2
 80023ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d126      	bne.n	8002456 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	011a      	lsls	r2, r3, #4
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4413      	add	r3, r2
 800242a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800243a:	b29a      	uxth	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e017      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d113      	bne.n	8002486 <HAL_PCD_EP_DB_Transmit+0x18a>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002466:	b29b      	uxth	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	4413      	add	r3, r2
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	011a      	lsls	r2, r3, #4
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	4413      	add	r3, r2
 800247a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f006 fde2 	bl	8009056 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 82d4 	beq.w	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	827b      	strh	r3, [r7, #18]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	8a7b      	ldrh	r3, [r7, #18]
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
 80024de:	e2b2      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d021      	beq.n	800252e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800251a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	b29b      	uxth	r3, r3
 800252c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 8286 	bne.w	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002542:	441a      	add	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002550:	441a      	add	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	429a      	cmp	r2, r3
 8002560:	d309      	bcc.n	8002576 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	621a      	str	r2, [r3, #32]
 8002574:	e015      	b.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800257e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002582:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800258c:	e009      	b.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d155      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0x35a>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	4413      	add	r3, r2
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	011a      	lsls	r2, r3, #4
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	4413      	add	r3, r2
 80025cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
 80025d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d112      	bne.n	80025fe <HAL_PCD_EP_DB_Transmit+0x302>
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	e047      	b.n	800268e <HAL_PCD_EP_DB_Transmit+0x392>
 80025fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002600:	2b3e      	cmp	r3, #62	; 0x3e
 8002602:	d811      	bhi.n	8002628 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
 800260a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_PCD_EP_DB_Transmit+0x31e>
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	3301      	adds	r3, #1
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
 800261a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261c:	b29b      	uxth	r3, r3
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	b29a      	uxth	r2, r3
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e032      	b.n	800268e <HAL_PCD_EP_DB_Transmit+0x392>
 8002628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
 800262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x342>
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	3b01      	subs	r3, #1
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	b29b      	uxth	r3, r3
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	b29b      	uxth	r3, r3
 8002646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29a      	uxth	r2, r3
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	e01b      	b.n	800268e <HAL_PCD_EP_DB_Transmit+0x392>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d117      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0x392>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002672:	4413      	add	r3, r2
 8002674:	643b      	str	r3, [r7, #64]	; 0x40
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	011a      	lsls	r2, r3, #4
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	4413      	add	r3, r2
 8002680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002688:	b29a      	uxth	r2, r3
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6959      	ldr	r1, [r3, #20]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	891a      	ldrh	r2, [r3, #8]
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	b29b      	uxth	r3, r3
 800269e:	f004 fee7 	bl	8007470 <USB_WritePMA>
 80026a2:	e1d0      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	3306      	adds	r3, #6
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d8:	429a      	cmp	r2, r3
 80026da:	d307      	bcc.n	80026ec <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e4:	1ad2      	subs	r2, r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	619a      	str	r2, [r3, #24]
 80026ea:	e002      	b.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 80c4 	bne.w	8002884 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d126      	bne.n	8002752 <HAL_PCD_EP_DB_Transmit+0x456>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	4413      	add	r3, r2
 800271a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	4413      	add	r3, r2
 8002726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800272a:	66bb      	str	r3, [r7, #104]	; 0x68
 800272c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002736:	b29a      	uxth	r2, r3
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274a:	b29a      	uxth	r2, r3
 800274c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e01a      	b.n	8002788 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d116      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x48c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	677b      	str	r3, [r7, #116]	; 0x74
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276e:	4413      	add	r3, r2
 8002770:	677b      	str	r3, [r7, #116]	; 0x74
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	011a      	lsls	r2, r3, #4
 8002778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277a:	4413      	add	r3, r2
 800277c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
 8002782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002784:	2200      	movs	r2, #0
 8002786:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	67bb      	str	r3, [r7, #120]	; 0x78
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d12f      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ae:	4413      	add	r3, r2
 80027b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	011a      	lsls	r2, r3, #4
 80027ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027be:	4413      	add	r3, r2
 80027c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	e017      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d113      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280c:	4413      	add	r3, r2
 800280e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	011a      	lsls	r2, r3, #4
 8002816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002818:	4413      	add	r3, r2
 800281a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800281e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f006 fc12 	bl	8009056 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 8104 	bne.w	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
 8002882:	e0e0      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 80b4 	bne.w	8002a46 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e6:	441a      	add	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f4:	441a      	add	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	429a      	cmp	r2, r3
 8002904:	d309      	bcc.n	800291a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002912:	1ad2      	subs	r2, r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	621a      	str	r2, [r3, #32]
 8002918:	e015      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002930:	e009      	b.n	8002946 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	667b      	str	r3, [r7, #100]	; 0x64
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d155      	bne.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x704>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002968:	4413      	add	r3, r2
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	011a      	lsls	r2, r3, #4
 8002972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002974:	4413      	add	r3, r2
 8002976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800297a:	65bb      	str	r3, [r7, #88]	; 0x58
 800297c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d112      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800298c:	b29a      	uxth	r2, r3
 800298e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	e044      	b.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x736>
 80029a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029aa:	2b3e      	cmp	r3, #62	; 0x3e
 80029ac:	d811      	bhi.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80029ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54
 80029b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	3301      	adds	r3, #1
 80029c2:	657b      	str	r3, [r7, #84]	; 0x54
 80029c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	e02f      	b.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x736>
 80029d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	3b01      	subs	r3, #1
 80029e6:	657b      	str	r3, [r7, #84]	; 0x54
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	029b      	lsls	r3, r3, #10
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	801a      	strh	r2, [r3, #0]
 80029fe:	e018      	b.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d114      	bne.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a16:	4413      	add	r3, r2
 8002a18:	667b      	str	r3, [r7, #100]	; 0x64
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	011a      	lsls	r2, r3, #4
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	4413      	add	r3, r2
 8002a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a28:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a30:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6959      	ldr	r1, [r3, #20]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	895a      	ldrh	r2, [r3, #10]
 8002a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f004 fd15 	bl	8007470 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a60:	823b      	strh	r3, [r7, #16]
 8002a62:	8a3b      	ldrh	r3, [r7, #16]
 8002a64:	f083 0310 	eor.w	r3, r3, #16
 8002a68:	823b      	strh	r3, [r7, #16]
 8002a6a:	8a3b      	ldrh	r3, [r7, #16]
 8002a6c:	f083 0320 	eor.w	r3, r3, #32
 8002a70:	823b      	strh	r3, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	441a      	add	r2, r3
 8002a80:	8a3b      	ldrh	r3, [r7, #16]
 8002a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3788      	adds	r7, #136	; 0x88
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ab2:	897b      	ldrh	r3, [r7, #10]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e009      	b.n	8002aea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ad6:	897a      	ldrh	r2, [r7, #10]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002aea:	893b      	ldrh	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	80da      	strh	r2, [r3, #6]
 8002afe:	e00b      	b.n	8002b18 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2201      	movs	r2, #1
 8002b04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e35a      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d110      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b6e:	f240 1167 	movw	r1, #359	; 0x167
 8002b72:	488f      	ldr	r0, [pc, #572]	; (8002db0 <HAL_RCC_OscConfig+0x28c>)
 8002b74:	f7fd fceb 	bl	800054e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 809a 	beq.w	8002cba <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00e      	beq.n	8002bac <HAL_RCC_OscConfig+0x88>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d009      	beq.n	8002bac <HAL_RCC_OscConfig+0x88>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d004      	beq.n	8002bac <HAL_RCC_OscConfig+0x88>
 8002ba2:	f240 116d 	movw	r1, #365	; 0x16d
 8002ba6:	4882      	ldr	r0, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x28c>)
 8002ba8:	f7fd fcd1 	bl	800054e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0xc6>
 8002bc4:	4b7b      	ldr	r3, [pc, #492]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x194>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e300      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0xde>
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6e      	ldr	r2, [pc, #440]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0x13c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x100>
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a69      	ldr	r2, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a66      	ldr	r2, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0x13c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x124>
 8002c2e:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a60      	ldr	r2, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5d      	ldr	r2, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0x13c>
 8002c48:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a59      	ldr	r2, [pc, #356]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b57      	ldr	r3, [pc, #348]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a56      	ldr	r2, [pc, #344]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fd fe10 	bl	800088c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fd fe0c 	bl	800088c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2b4      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x14c>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fd fdfc 	bl	800088c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd fdf8 	bl	800088c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e2a0      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x174>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8080 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1be>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1be>
 8002cd8:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002cdc:	4834      	ldr	r0, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x28c>)
 8002cde:	f7fd fc36 	bl	800054e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b1f      	cmp	r3, #31
 8002ce8:	d904      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x1d0>
 8002cea:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002cee:	4830      	ldr	r0, [pc, #192]	; (8002db0 <HAL_RCC_OscConfig+0x28c>)
 8002cf0:	f7fd fc2d 	bl	800054e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d00:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d11c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x222>
 8002d0c:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x20c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e25d      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	491d      	ldr	r1, [pc, #116]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d44:	e040      	b.n	8002dc8 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x294>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fd9a 	bl	800088c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fd fd96 	bl	800088c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e23e      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490a      	ldr	r1, [pc, #40]	; (8002db4 <HAL_RCC_OscConfig+0x290>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
 8002d8e:	e01b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_OscConfig+0x294>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fd fd79 	bl	800088c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9c:	e00e      	b.n	8002dbc <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fd fd75 	bl	800088c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d907      	bls.n	8002dbc <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e21d      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
 8002db0:	08009624 	.word	0x08009624
 8002db4:	40021000 	.word	0x40021000
 8002db8:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbc:	4b7d      	ldr	r3, [pc, #500]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ea      	bne.n	8002d9e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d040      	beq.n	8002e56 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_OscConfig+0x2ca>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d004      	beq.n	8002dee <HAL_RCC_OscConfig+0x2ca>
 8002de4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002de8:	4873      	ldr	r0, [pc, #460]	; (8002fb8 <HAL_RCC_OscConfig+0x494>)
 8002dea:	f7fd fbb0 	bl	800054e <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <HAL_RCC_OscConfig+0x498>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fd fd46 	bl	800088c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fd fd42 	bl	800088c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1ea      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f000 fc0c 	bl	8003640 <RCC_Delay>
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <HAL_RCC_OscConfig+0x498>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fd fd2c 	bl	800088c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fd fd28 	bl	800088c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1d0      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80bf 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x366>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_OscConfig+0x366>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d004      	beq.n	8002e8a <HAL_RCC_OscConfig+0x366>
 8002e80:	f240 2111 	movw	r1, #529	; 0x211
 8002e84:	484c      	ldr	r0, [pc, #304]	; (8002fb8 <HAL_RCC_OscConfig+0x494>)
 8002e86:	f7fd fb62 	bl	800054e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x49c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x49c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a3f      	ldr	r2, [pc, #252]	; (8002fc0 <HAL_RCC_OscConfig+0x49c>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fd fcdf 	bl	800088c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fd fcdb 	bl	800088c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	; 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e183      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x49c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3e2>
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	e02d      	b.n	8002f62 <HAL_RCC_OscConfig+0x43e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x404>
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x43e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x426>
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x43e>
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fd fc8f 	bl	800088c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fd fc8b 	bl	800088c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e131      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_OscConfig+0x490>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x44e>
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fd fc79 	bl	800088c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e012      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fc75 	bl	800088c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d909      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e11b      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08009624 	.word	0x08009624
 8002fbc:	42420480 	.word	0x42420480
 8002fc0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e6      	bne.n	8002f9e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a86      	ldr	r2, [pc, #536]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <HAL_RCC_OscConfig+0x4e0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d008      	beq.n	8003004 <HAL_RCC_OscConfig+0x4e0>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d004      	beq.n	8003004 <HAL_RCC_OscConfig+0x4e0>
 8002ffa:	f240 21af 	movw	r1, #687	; 0x2af
 8002ffe:	487e      	ldr	r0, [pc, #504]	; (80031f8 <HAL_RCC_OscConfig+0x6d4>)
 8003000:	f7fd faa5 	bl	800054e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80ee 	beq.w	80031ea <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	f000 80ce 	beq.w	80031b8 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b02      	cmp	r3, #2
 8003022:	f040 80b2 	bne.w	800318a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_OscConfig+0x51e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d004      	beq.n	8003042 <HAL_RCC_OscConfig+0x51e>
 8003038:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800303c:	486e      	ldr	r0, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x6d4>)
 800303e:	f7fd fa86 	bl	800054e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04a      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003052:	d045      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305c:	d040      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003066:	d03b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003070:	d036      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800307a:	d031      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003084:	d02c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800308e:	d027      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	d022      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80030a2:	d01d      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80030ac:	d018      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030c0:	d00e      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80030ca:	d009      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80030d4:	d004      	beq.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
 80030d6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80030da:	4847      	ldr	r0, [pc, #284]	; (80031f8 <HAL_RCC_OscConfig+0x6d4>)
 80030dc:	f7fd fa37 	bl	800054e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_OscConfig+0x6d8>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd fbd1 	bl	800088c <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fbcd 	bl	800088c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e075      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003100:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_OscConfig+0x60e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003126:	d004      	beq.n	8003132 <HAL_RCC_OscConfig+0x60e>
 8003128:	f240 21cf 	movw	r1, #719	; 0x2cf
 800312c:	4832      	ldr	r0, [pc, #200]	; (80031f8 <HAL_RCC_OscConfig+0x6d4>)
 800312e:	f7fd fa0e 	bl	800054e <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	492d      	ldr	r1, [pc, #180]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a19      	ldr	r1, [r3, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	430b      	orrs	r3, r1
 8003156:	4927      	ldr	r1, [pc, #156]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_OscConfig+0x6d8>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7fd fb93 	bl	800088c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fd fb8f 	bl	800088c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e037      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x646>
 8003188:	e02f      	b.n	80031ea <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_OscConfig+0x6d8>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd fb7c 	bl	800088c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd fb78 	bl	800088c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e020      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x674>
 80031b6:	e018      	b.n	80031ea <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e013      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x6d0>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08009624 	.word	0x08009624
 80031fc:	42420060 	.word	0x42420060

08003200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e176      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <HAL_RCC_ClockConfig+0x4e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d110      	bne.n	800324e <HAL_RCC_ClockConfig+0x4e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_RCC_ClockConfig+0x4e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_RCC_ClockConfig+0x4e>
 8003244:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003248:	4874      	ldr	r0, [pc, #464]	; (800341c <HAL_RCC_ClockConfig+0x21c>)
 800324a:	f7fd f980 	bl	800054e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCC_ClockConfig+0x6a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d007      	beq.n	800326a <HAL_RCC_ClockConfig+0x6a>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d004      	beq.n	800326a <HAL_RCC_ClockConfig+0x6a>
 8003260:	f240 3139 	movw	r1, #825	; 0x339
 8003264:	486d      	ldr	r0, [pc, #436]	; (800341c <HAL_RCC_ClockConfig+0x21c>)
 8003266:	f7fd f972 	bl	800054e <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800326a:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d910      	bls.n	800329a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003278:	4b69      	ldr	r3, [pc, #420]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 0207 	bic.w	r2, r3, #7
 8003280:	4967      	ldr	r1, [pc, #412]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003288:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e133      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d049      	beq.n	800333a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80032b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032bc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a55      	ldr	r2, [pc, #340]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80032d0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032d4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d024      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d020      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b90      	cmp	r3, #144	; 0x90
 80032ec:	d01c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2ba0      	cmp	r3, #160	; 0xa0
 80032f4:	d018      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2bb0      	cmp	r3, #176	; 0xb0
 80032fc:	d014      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2bc0      	cmp	r3, #192	; 0xc0
 8003304:	d010      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2bd0      	cmp	r3, #208	; 0xd0
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2be0      	cmp	r3, #224	; 0xe0
 8003314:	d008      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2bf0      	cmp	r3, #240	; 0xf0
 800331c:	d004      	beq.n	8003328 <HAL_RCC_ClockConfig+0x128>
 800331e:	f240 315f 	movw	r1, #863	; 0x35f
 8003322:	483e      	ldr	r0, [pc, #248]	; (800341c <HAL_RCC_ClockConfig+0x21c>)
 8003324:	f7fd f913 	bl	800054e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	493b      	ldr	r1, [pc, #236]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d051      	beq.n	80033ea <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_ClockConfig+0x168>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d008      	beq.n	8003368 <HAL_RCC_ClockConfig+0x168>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d004      	beq.n	8003368 <HAL_RCC_ClockConfig+0x168>
 800335e:	f240 3166 	movw	r1, #870	; 0x366
 8003362:	482e      	ldr	r0, [pc, #184]	; (800341c <HAL_RCC_ClockConfig+0x21c>)
 8003364:	f7fd f8f3 	bl	800054e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d115      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0c0      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b4      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0ac      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	491b      	ldr	r1, [pc, #108]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fa67 	bl	800088c <HAL_GetTick>
 80033be:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fd fa63 	bl	800088c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e094      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x224>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 020c 	and.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1eb      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d217      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_ClockConfig+0x220>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d008      	beq.n	8003428 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e073      	b.n	8003502 <HAL_RCC_ClockConfig+0x302>
 800341a:	bf00      	nop
 800341c:	08009624 	.word	0x08009624
 8003420:	40022000 	.word	0x40022000
 8003424:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d025      	beq.n	8003480 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d018      	beq.n	800346e <HAL_RCC_ClockConfig+0x26e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d013      	beq.n	800346e <HAL_RCC_ClockConfig+0x26e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800344e:	d00e      	beq.n	800346e <HAL_RCC_ClockConfig+0x26e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x26e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003462:	d004      	beq.n	800346e <HAL_RCC_ClockConfig+0x26e>
 8003464:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003468:	4828      	ldr	r0, [pc, #160]	; (800350c <HAL_RCC_ClockConfig+0x30c>)
 800346a:	f7fd f870 	bl	800054e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCC_ClockConfig+0x310>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4925      	ldr	r1, [pc, #148]	; (8003510 <HAL_RCC_ClockConfig+0x310>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d026      	beq.n	80034da <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2c6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d013      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2c6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034a6:	d00e      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ba:	d004      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2c6>
 80034bc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80034c0:	4812      	ldr	r0, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x30c>)
 80034c2:	f7fd f844 	bl	800054e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_RCC_ClockConfig+0x310>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	490e      	ldr	r1, [pc, #56]	; (8003510 <HAL_RCC_ClockConfig+0x310>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034da:	f000 f821 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_ClockConfig+0x310>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490a      	ldr	r1, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x314>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x318>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_ClockConfig+0x31c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f984 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08009624 	.word	0x08009624
 8003510:	40021000 	.word	0x40021000
 8003514:	080097b0 	.word	0x080097b0
 8003518:	20000004 	.word	0x20000004
 800351c:	20000008 	.word	0x20000008

08003520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	b490      	push	{r4, r7}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_GetSysClockFreq+0xac>)
 8003528:	1d3c      	adds	r4, r7, #4
 800352a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800352c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003530:	f240 2301 	movw	r3, #513	; 0x201
 8003534:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x40>
 800355a:	2b08      	cmp	r3, #8
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x46>
 800355e:	e02b      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003562:	623b      	str	r3, [r7, #32]
      break;
 8003564:	e02b      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	0c9b      	lsrs	r3, r3, #18
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3328      	adds	r3, #40	; 0x28
 8003570:	443b      	add	r3, r7
 8003572:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003576:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0c5b      	lsrs	r3, r3, #17
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	3328      	adds	r3, #40	; 0x28
 800358e:	443b      	add	r3, r7
 8003590:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003594:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800359a:	fb03 f202 	mul.w	r2, r3, r2
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	e004      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	623b      	str	r3, [r7, #32]
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ba:	623b      	str	r3, [r7, #32]
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6a3b      	ldr	r3, [r7, #32]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3728      	adds	r7, #40	; 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc90      	pop	{r4, r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	0800965c 	.word	0x0800965c
 80035d0:	40021000 	.word	0x40021000
 80035d4:	007a1200 	.word	0x007a1200
 80035d8:	003d0900 	.word	0x003d0900

080035dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <HAL_RCC_GetHCLKFreq+0x10>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	20000004 	.word	0x20000004

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff2 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	080097c0 	.word	0x080097c0

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffde 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0adb      	lsrs	r3, r3, #11
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	080097c0 	.word	0x080097c0

08003640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <RCC_Delay+0x34>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <RCC_Delay+0x38>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0a5b      	lsrs	r3, r3, #9
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800365c:	bf00      	nop
  }
  while (Delay --);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	60fa      	str	r2, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <RCC_Delay+0x1c>
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	20000004 	.word	0x20000004
 8003678:	10624dd3 	.word	0x10624dd3

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80036b0:	216c      	movs	r1, #108	; 0x6c
 80036b2:	4873      	ldr	r0, [pc, #460]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80036b4:	f7fc ff4b 	bl	800054e <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8095 	beq.w	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	d00d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036f0:	2174      	movs	r1, #116	; 0x74
 80036f2:	4863      	ldr	r0, [pc, #396]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80036f4:	f7fc ff2b 	bl	800054e <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f8:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
 8003710:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371c:	2301      	movs	r3, #1
 800371e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d118      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a55      	ldr	r2, [pc, #340]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003738:	f7fd f8a8 	bl	800088c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	e008      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7fd f8a4 	bl	800088c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e092      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375e:	4b49      	ldr	r3, [pc, #292]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02e      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x150>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	429a      	cmp	r2, r3
 800377a:	d027      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378c:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003792:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d014      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd f873 	bl	800088c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd f86f 	bl	800088c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e05b      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ee      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037cc:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	492a      	ldr	r1, [pc, #168]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01f      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d012      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380c:	d00d      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003820:	d003      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003822:	21b9      	movs	r1, #185	; 0xb9
 8003824:	4816      	ldr	r0, [pc, #88]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003826:	f7fc fe92 	bl	800054e <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4913      	ldr	r1, [pc, #76]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800385a:	f240 1115 	movw	r1, #277	; 0x115
 800385e:	4808      	ldr	r0, [pc, #32]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003860:	f7fc fe75 	bl	800054e <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4904      	ldr	r1, [pc, #16]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	0800966c 	.word	0x0800966c
 8003884:	40021000 	.word	0x40021000
 8003888:	40007000 	.word	0x40007000
 800388c:	42420440 	.word	0x42420440

08003890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e093      	b.n	80039ca <HAL_TIM_PWM_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4b      	ldr	r2, [pc, #300]	; (80039d4 <HAL_TIM_PWM_Init+0x144>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_TIM_PWM_Init+0x44>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_PWM_Init+0x44>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_TIM_PWM_Init+0x148>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_PWM_Init+0x44>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a45      	ldr	r2, [pc, #276]	; (80039dc <HAL_TIM_PWM_Init+0x14c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_PWM_Init+0x44>
 80038ca:	f240 5113 	movw	r1, #1299	; 0x513
 80038ce:	4844      	ldr	r0, [pc, #272]	; (80039e0 <HAL_TIM_PWM_Init+0x150>)
 80038d0:	f7fc fe3d 	bl	800054e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d014      	beq.n	8003906 <HAL_TIM_PWM_Init+0x76>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d010      	beq.n	8003906 <HAL_TIM_PWM_Init+0x76>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d00c      	beq.n	8003906 <HAL_TIM_PWM_Init+0x76>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d008      	beq.n	8003906 <HAL_TIM_PWM_Init+0x76>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b60      	cmp	r3, #96	; 0x60
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_PWM_Init+0x76>
 80038fc:	f240 5114 	movw	r1, #1300	; 0x514
 8003900:	4837      	ldr	r0, [pc, #220]	; (80039e0 <HAL_TIM_PWM_Init+0x150>)
 8003902:	f7fc fe24 	bl	800054e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <HAL_TIM_PWM_Init+0x9c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d009      	beq.n	800392c <HAL_TIM_PWM_Init+0x9c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003920:	d004      	beq.n	800392c <HAL_TIM_PWM_Init+0x9c>
 8003922:	f240 5115 	movw	r1, #1301	; 0x515
 8003926:	482e      	ldr	r0, [pc, #184]	; (80039e0 <HAL_TIM_PWM_Init+0x150>)
 8003928:	f7fc fe11 	bl	800054e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_TIM_PWM_Init+0xb6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d004      	beq.n	8003946 <HAL_TIM_PWM_Init+0xb6>
 800393c:	f240 5116 	movw	r1, #1302	; 0x516
 8003940:	4827      	ldr	r0, [pc, #156]	; (80039e0 <HAL_TIM_PWM_Init+0x150>)
 8003942:	f7fc fe04 	bl	800054e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_PWM_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc fe34 	bl	80005c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fa92 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	080096b8 	.word	0x080096b8

080039e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6f      	ldr	r2, [pc, #444]	; (8003bb0 <HAL_TIM_PWM_Start+0x1cc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10b      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x2c>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d040      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d03d      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d03a      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d037      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d10b      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x4e>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02f      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d02c      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d029      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d026      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5f      	ldr	r2, [pc, #380]	; (8003bb4 <HAL_TIM_PWM_Start+0x1d0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10b      	bne.n	8003a54 <HAL_TIM_PWM_Start+0x70>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01e      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d01b      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d018      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b0c      	cmp	r3, #12
 8003a52:	d015      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_TIM_PWM_Start+0x1d4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10b      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x92>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00a      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_PWM_Start+0x9c>
 8003a76:	f240 5199 	movw	r1, #1433	; 0x599
 8003a7a:	4850      	ldr	r0, [pc, #320]	; (8003bbc <HAL_TIM_PWM_Start+0x1d8>)
 8003a7c:	f7fc fd67 	bl	800054e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xb6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e022      	b.n	8003ae0 <HAL_TIM_PWM_Start+0xfc>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d109      	bne.n	8003ab4 <HAL_TIM_PWM_Start+0xd0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e015      	b.n	8003ae0 <HAL_TIM_PWM_Start+0xfc>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d109      	bne.n	8003ace <HAL_TIM_PWM_Start+0xea>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e008      	b.n	8003ae0 <HAL_TIM_PWM_Start+0xfc>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_PWM_Start+0x104>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e05e      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x1c2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x114>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af6:	e013      	b.n	8003b20 <HAL_TIM_PWM_Start+0x13c>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d104      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x124>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b06:	e00b      	b.n	8003b20 <HAL_TIM_PWM_Start+0x13c>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d104      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x134>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b16:	e003      	b.n	8003b20 <HAL_TIM_PWM_Start+0x13c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fc2f 	bl	800438c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_TIM_PWM_Start+0x1cc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_PWM_Start+0x164>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIM_PWM_Start+0x1cc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_PWM_Start+0x18c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_PWM_Start+0x18c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_PWM_Start+0x1d0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_PWM_Start+0x18c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIM_PWM_Start+0x1d4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x1b0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_PWM_Start+0x1c0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x1c0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	080096b8 	.word	0x080096b8

08003bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d007      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b3c      	cmp	r3, #60	; 0x3c
 8003be8:	d004      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bea:	f241 0127 	movw	r1, #4135	; 0x1027
 8003bee:	4881      	ldr	r0, [pc, #516]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003bf0:	f7fc fcad 	bl	800054e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b60      	cmp	r3, #96	; 0x60
 8003bfa:	d008      	beq.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d004      	beq.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003c04:	f241 0128 	movw	r1, #4136	; 0x1028
 8003c08:	487a      	ldr	r0, [pc, #488]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003c0a:	f7fc fca0 	bl	800054e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003c1e:	f241 0129 	movw	r1, #4137	; 0x1029
 8003c22:	4874      	ldr	r0, [pc, #464]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003c24:	f7fc fc93 	bl	800054e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d004      	beq.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c38:	f241 012a 	movw	r1, #4138	; 0x102a
 8003c3c:	486d      	ldr	r0, [pc, #436]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003c3e:	f7fc fc86 	bl	800054e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e119      	b.n	8003e84 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	f200 810c 	bhi.w	8003e78 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003e79 	.word	0x08003e79
 8003c70:	08003e79 	.word	0x08003e79
 8003c74:	08003e79 	.word	0x08003e79
 8003c78:	08003d0f 	.word	0x08003d0f
 8003c7c:	08003e79 	.word	0x08003e79
 8003c80:	08003e79 	.word	0x08003e79
 8003c84:	08003e79 	.word	0x08003e79
 8003c88:	08003d83 	.word	0x08003d83
 8003c8c:	08003e79 	.word	0x08003e79
 8003c90:	08003e79 	.word	0x08003e79
 8003c94:	08003e79 	.word	0x08003e79
 8003c98:	08003e05 	.word	0x08003e05
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00e      	beq.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a51      	ldr	r2, [pc, #324]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a50      	ldr	r2, [pc, #320]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003cc4:	f241 0134 	movw	r1, #4148	; 0x1034
 8003cc8:	484a      	ldr	r0, [pc, #296]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003cca:	f7fc fc40 	bl	800054e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f943 	bl	8003f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0208 	orr.w	r2, r2, #8
 8003ce8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0204 	bic.w	r2, r2, #4
 8003cf8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6999      	ldr	r1, [r3, #24]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	619a      	str	r2, [r3, #24]
      break;
 8003d0c:	e0b5      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x180>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x180>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x180>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a33      	ldr	r2, [pc, #204]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x180>
 8003d36:	f241 0145 	movw	r1, #4165	; 0x1045
 8003d3a:	482e      	ldr	r0, [pc, #184]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003d3c:	f7fc fc07 	bl	800054e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f99a 	bl	8004080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e07b      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d00e      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003daa:	f241 0156 	movw	r1, #4182	; 0x1056
 8003dae:	4811      	ldr	r0, [pc, #68]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003db0:	f7fc fbcd 	bl	800054e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f9f4 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69d9      	ldr	r1, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e042      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8003df4:	080096b8 	.word	0x080096b8
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003e2c:	f241 0167 	movw	r1, #4199	; 0x1067
 8003e30:	4819      	ldr	r0, [pc, #100]	; (8003e98 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8003e32:	f7fc fb8c 	bl	800054e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fa47 	bl	80042d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
      break;
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    default:
      break;
 8003e78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	080096b8 	.word	0x080096b8

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a29      	ldr	r2, [pc, #164]	; (8003f54 <TIM_Base_SetConfig+0xb8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x30>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x30>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <TIM_Base_SetConfig+0xbc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x30>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <TIM_Base_SetConfig+0xc0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <TIM_Base_SetConfig+0xb8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_Base_SetConfig+0x62>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d007      	beq.n	8003efe <TIM_Base_SetConfig+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_Base_SetConfig+0xbc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_Base_SetConfig+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <TIM_Base_SetConfig+0xc0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <TIM_Base_SetConfig+0xb8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800

08003f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <TIM_OC1_SetConfig+0x118>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d119      	bne.n	8003ff0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <TIM_OC1_SetConfig+0x76>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d004      	beq.n	8003fd6 <TIM_OC1_SetConfig+0x76>
 8003fcc:	f641 2141 	movw	r1, #6721	; 0x1a41
 8003fd0:	482a      	ldr	r0, [pc, #168]	; (800407c <TIM_OC1_SetConfig+0x11c>)
 8003fd2:	f7fc fabc 	bl	800054e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 0308 	bic.w	r3, r3, #8
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_OC1_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d12d      	bne.n	8004054 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d008      	beq.n	8004014 <TIM_OC1_SetConfig+0xb4>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <TIM_OC1_SetConfig+0xb4>
 800400a:	f641 214e 	movw	r1, #6734	; 0x1a4e
 800400e:	481b      	ldr	r0, [pc, #108]	; (800407c <TIM_OC1_SetConfig+0x11c>)
 8004010:	f7fc fa9d 	bl	800054e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401c:	d008      	beq.n	8004030 <TIM_OC1_SetConfig+0xd0>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <TIM_OC1_SetConfig+0xd0>
 8004026:	f641 214f 	movw	r1, #6735	; 0x1a4f
 800402a:	4814      	ldr	r0, [pc, #80]	; (800407c <TIM_OC1_SetConfig+0x11c>)
 800402c:	f7fc fa8f 	bl	800054e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	080096b8 	.word	0x080096b8

08004080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <TIM_OC2_SetConfig+0x120>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d11a      	bne.n	8004116 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <TIM_OC2_SetConfig+0x7a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d004      	beq.n	80040fa <TIM_OC2_SetConfig+0x7a>
 80040f0:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80040f4:	482b      	ldr	r0, [pc, #172]	; (80041a4 <TIM_OC2_SetConfig+0x124>)
 80040f6:	f7fc fa2a 	bl	800054e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <TIM_OC2_SetConfig+0x120>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d12f      	bne.n	800417e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d008      	beq.n	800413a <TIM_OC2_SetConfig+0xba>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <TIM_OC2_SetConfig+0xba>
 8004130:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8004134:	481b      	ldr	r0, [pc, #108]	; (80041a4 <TIM_OC2_SetConfig+0x124>)
 8004136:	f7fc fa0a 	bl	800054e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004142:	d008      	beq.n	8004156 <TIM_OC2_SetConfig+0xd6>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <TIM_OC2_SetConfig+0xd6>
 800414c:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8004150:	4814      	ldr	r0, [pc, #80]	; (80041a4 <TIM_OC2_SetConfig+0x124>)
 8004152:	f7fc f9fc 	bl	800054e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	080096b8 	.word	0x080096b8

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a31      	ldr	r2, [pc, #196]	; (80042c8 <TIM_OC3_SetConfig+0x120>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d11a      	bne.n	800423c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <TIM_OC3_SetConfig+0x78>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d004      	beq.n	8004220 <TIM_OC3_SetConfig+0x78>
 8004216:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800421a:	482c      	ldr	r0, [pc, #176]	; (80042cc <TIM_OC3_SetConfig+0x124>)
 800421c:	f7fc f997 	bl	800054e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <TIM_OC3_SetConfig+0x120>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d12f      	bne.n	80042a4 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d008      	beq.n	8004260 <TIM_OC3_SetConfig+0xb8>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <TIM_OC3_SetConfig+0xb8>
 8004256:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800425a:	481c      	ldr	r0, [pc, #112]	; (80042cc <TIM_OC3_SetConfig+0x124>)
 800425c:	f7fc f977 	bl	800054e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004268:	d008      	beq.n	800427c <TIM_OC3_SetConfig+0xd4>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <TIM_OC3_SetConfig+0xd4>
 8004272:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8004276:	4815      	ldr	r0, [pc, #84]	; (80042cc <TIM_OC3_SetConfig+0x124>)
 8004278:	f7fc f969 	bl	800054e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	080096b8 	.word	0x080096b8

080042d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a16      	ldr	r2, [pc, #88]	; (8004384 <TIM_OC4_SetConfig+0xb4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d117      	bne.n	8004360 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004338:	d008      	beq.n	800434c <TIM_OC4_SetConfig+0x7c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <TIM_OC4_SetConfig+0x7c>
 8004342:	f641 3123 	movw	r1, #6947	; 0x1b23
 8004346:	4810      	ldr	r0, [pc, #64]	; (8004388 <TIM_OC4_SetConfig+0xb8>)
 8004348:	f7fc f901 	bl	800054e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40012c00 	.word	0x40012c00
 8004388:	080096b8 	.word	0x080096b8

0800438c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a22      	ldr	r2, [pc, #136]	; (8004424 <TIM_CCxChannelCmd+0x98>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d010      	beq.n	80043c2 <TIM_CCxChannelCmd+0x36>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d00c      	beq.n	80043c2 <TIM_CCxChannelCmd+0x36>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <TIM_CCxChannelCmd+0x9c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d008      	beq.n	80043c2 <TIM_CCxChannelCmd+0x36>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_CCxChannelCmd+0xa0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <TIM_CCxChannelCmd+0x36>
 80043b8:	f641 5109 	movw	r1, #7433	; 0x1d09
 80043bc:	481c      	ldr	r0, [pc, #112]	; (8004430 <TIM_CCxChannelCmd+0xa4>)
 80043be:	f7fc f8c6 	bl	800054e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <TIM_CCxChannelCmd+0x5e>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00d      	beq.n	80043ea <TIM_CCxChannelCmd+0x5e>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d00a      	beq.n	80043ea <TIM_CCxChannelCmd+0x5e>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d007      	beq.n	80043ea <TIM_CCxChannelCmd+0x5e>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b3c      	cmp	r3, #60	; 0x3c
 80043de:	d004      	beq.n	80043ea <TIM_CCxChannelCmd+0x5e>
 80043e0:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80043e4:	4812      	ldr	r0, [pc, #72]	; (8004430 <TIM_CCxChannelCmd+0xa4>)
 80043e6:	f7fc f8b2 	bl	800054e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2201      	movs	r2, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	43db      	mvns	r3, r3
 8004400:	401a      	ands	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	080096b8 	.word	0x080096b8

08004434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d00e      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a49      	ldr	r2, [pc, #292]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a47      	ldr	r2, [pc, #284]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004466:	f240 7186 	movw	r1, #1926	; 0x786
 800446a:	4846      	ldr	r0, [pc, #280]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800446c:	f7fc f86f 	bl	800054e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b10      	cmp	r3, #16
 800447e:	d01c      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b20      	cmp	r3, #32
 8004486:	d018      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d014      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d010      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b50      	cmp	r3, #80	; 0x50
 800449e:	d00c      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b60      	cmp	r3, #96	; 0x60
 80044a6:	d008      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b70      	cmp	r3, #112	; 0x70
 80044ae:	d004      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044b0:	f240 7187 	movw	r1, #1927	; 0x787
 80044b4:	4833      	ldr	r0, [pc, #204]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80044b6:	f7fc f84a 	bl	800054e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d008      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80044ca:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80044ce:	482d      	ldr	r0, [pc, #180]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80044d0:	f7fc f83d 	bl	800054e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80044de:	2302      	movs	r3, #2
 80044e0:	e046      	b.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004508:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452e:	d009      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	080096f0 	.word	0x080096f0

08004588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5c      	ldr	r2, [pc, #368]	; (800470c <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 80045a0:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80045a4:	485a      	ldr	r0, [pc, #360]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80045a6:	f7fb ffd2 	bl	800054e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b2:	d008      	beq.n	80045c6 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80045bc:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80045c0:	4853      	ldr	r0, [pc, #332]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80045c2:	f7fb ffc4 	bl	800054e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d008      	beq.n	80045e2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80045d8:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80045dc:	484c      	ldr	r0, [pc, #304]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80045de:	f7fb ffb6 	bl	800054e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d013      	beq.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f2:	d00e      	beq.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045fc:	d009      	beq.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004606:	d004      	beq.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004608:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800460c:	4840      	ldr	r0, [pc, #256]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800460e:	f7fb ff9e 	bl	800054e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2bff      	cmp	r3, #255	; 0xff
 8004618:	d904      	bls.n	8004624 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800461a:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800461e:	483c      	ldr	r0, [pc, #240]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004620:	f7fb ff95 	bl	800054e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d008      	beq.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004636:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 800463a:	4835      	ldr	r0, [pc, #212]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800463c:	f7fb ff87 	bl	800054e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d004      	beq.n	800465c <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8004652:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8004656:	482e      	ldr	r0, [pc, #184]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004658:	f7fb ff79 	bl	800054e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004664:	d008      	beq.n	8004678 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800466e:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8004672:	4827      	ldr	r0, [pc, #156]	; (8004710 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004674:	f7fb ff6b 	bl	800054e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8004682:	2302      	movs	r3, #2
 8004684:	e03d      	b.n	8004702 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	080096f0 	.word	0x080096f0

08004714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e092      	b.n	800484c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02c      	beq.n	8004788 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a48      	ldr	r2, [pc, #288]	; (8004854 <HAL_UART_Init+0x140>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_UART_Init+0x42>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a46      	ldr	r2, [pc, #280]	; (8004858 <HAL_UART_Init+0x144>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_UART_Init+0x42>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a45      	ldr	r2, [pc, #276]	; (800485c <HAL_UART_Init+0x148>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_UART_Init+0x42>
 800474c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8004750:	4843      	ldr	r0, [pc, #268]	; (8004860 <HAL_UART_Init+0x14c>)
 8004752:	f7fb fefc 	bl	800054e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d028      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d023      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d01e      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477a:	d019      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 800477c:	f240 116d 	movw	r1, #365	; 0x16d
 8004780:	4837      	ldr	r0, [pc, #220]	; (8004860 <HAL_UART_Init+0x14c>)
 8004782:	f7fb fee4 	bl	800054e <assert_failed>
 8004786:	e013      	b.n	80047b0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a31      	ldr	r2, [pc, #196]	; (8004854 <HAL_UART_Init+0x140>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a30      	ldr	r2, [pc, #192]	; (8004858 <HAL_UART_Init+0x144>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_UART_Init+0x148>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_UART_Init+0x9c>
 80047a6:	f240 1171 	movw	r1, #369	; 0x171
 80047aa:	482d      	ldr	r0, [pc, #180]	; (8004860 <HAL_UART_Init+0x14c>)
 80047ac:	f7fb fecf 	bl	800054e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_UART_Init+0xb8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c0:	d004      	beq.n	80047cc <HAL_UART_Init+0xb8>
 80047c2:	f240 1173 	movw	r1, #371	; 0x173
 80047c6:	4826      	ldr	r0, [pc, #152]	; (8004860 <HAL_UART_Init+0x14c>)
 80047c8:	f7fb fec1 	bl	800054e <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fb ff43 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2224      	movs	r2, #36	; 0x24
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f830 	bl	8004864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004812:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004822:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004832:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40013800 	.word	0x40013800
 8004858:	40004400 	.word	0x40004400
 800485c:	40004800 	.word	0x40004800
 8004860:	0800972c 	.word	0x0800972c

08004864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <UART_SetConfig+0x18c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d904      	bls.n	8004880 <UART_SetConfig+0x1c>
 8004876:	f640 6153 	movw	r1, #3667	; 0xe53
 800487a:	485e      	ldr	r0, [pc, #376]	; (80049f4 <UART_SetConfig+0x190>)
 800487c:	f7fb fe67 	bl	800054e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <UART_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d004      	beq.n	800489c <UART_SetConfig+0x38>
 8004892:	f640 6154 	movw	r1, #3668	; 0xe54
 8004896:	4857      	ldr	r0, [pc, #348]	; (80049f4 <UART_SetConfig+0x190>)
 8004898:	f7fb fe59 	bl	800054e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <UART_SetConfig+0x5e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ac:	d009      	beq.n	80048c2 <UART_SetConfig+0x5e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048b6:	d004      	beq.n	80048c2 <UART_SetConfig+0x5e>
 80048b8:	f640 6155 	movw	r1, #3669	; 0xe55
 80048bc:	484d      	ldr	r0, [pc, #308]	; (80049f4 <UART_SetConfig+0x190>)
 80048be:	f7fb fe46 	bl	800054e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <UART_SetConfig+0x74>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <UART_SetConfig+0x7e>
 80048d8:	f640 6156 	movw	r1, #3670	; 0xe56
 80048dc:	4845      	ldr	r0, [pc, #276]	; (80049f4 <UART_SetConfig+0x190>)
 80048de:	f7fb fe36 	bl	800054e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004914:	f023 030c 	bic.w	r3, r3, #12
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <UART_SetConfig+0x194>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d103      	bne.n	800494a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004942:	f7fe fe69 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	e002      	b.n	8004950 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800494a:	f7fe fe51 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 800494e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009a      	lsls	r2, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	4a25      	ldr	r2, [pc, #148]	; (80049fc <UART_SetConfig+0x198>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	0119      	lsls	r1, r3, #4
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009a      	lsls	r2, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	fbb2 f2f3 	udiv	r2, r2, r3
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <UART_SetConfig+0x198>)
 8004988:	fba3 0302 	umull	r0, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	2064      	movs	r0, #100	; 0x64
 8004990:	fb00 f303 	mul.w	r3, r0, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	3332      	adds	r3, #50	; 0x32
 800499a:	4a18      	ldr	r2, [pc, #96]	; (80049fc <UART_SetConfig+0x198>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a6:	4419      	add	r1, r3
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <UART_SetConfig+0x198>)
 80049c0:	fba3 0302 	umull	r0, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2064      	movs	r0, #100	; 0x64
 80049c8:	fb00 f303 	mul.w	r3, r0, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <UART_SetConfig+0x198>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	440a      	add	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	0044aa20 	.word	0x0044aa20
 80049f4:	0800972c 	.word	0x0800972c
 80049f8:	40013800 	.word	0x40013800
 80049fc:	51eb851f 	.word	0x51eb851f

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 0014 	add.w	r0, r7, #20
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	b004      	add	sp, #16
 8004a1e:	4770      	bx	lr

08004a20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a98:	b084      	sub	sp, #16
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	f107 0014 	add.w	r0, r7, #20
 8004aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	b004      	add	sp, #16
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b09b      	sub	sp, #108	; 0x6c
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d81f      	bhi.n	8004b4a <USB_ActivateEndpoint+0x72>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <USB_ActivateEndpoint+0x38>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b53 	.word	0x08004b53
 8004b1c:	08004b2f 	.word	0x08004b2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b2c:	e012      	b.n	8004b54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b3a:	e00b      	b.n	8004b54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b48:	e004      	b.n	8004b54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b50:	e000      	b.n	8004b54 <USB_ActivateEndpoint+0x7c>
      break;
 8004b52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	7b1b      	ldrb	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8149 	bne.w	8004e58 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8084 	beq.w	8004cd8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4413      	add	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	88db      	ldrh	r3, [r3, #6]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	81fb      	strh	r3, [r7, #14]
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <USB_ActivateEndpoint+0x17c>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	81bb      	strh	r3, [r7, #12]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	78db      	ldrb	r3, [r3, #3]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d020      	beq.n	8004c9e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c72:	813b      	strh	r3, [r7, #8]
 8004c74:	893b      	ldrh	r3, [r7, #8]
 8004c76:	f083 0320 	eor.w	r3, r3, #32
 8004c7a:	813b      	strh	r3, [r7, #8]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
 8004c9c:	e27f      	b.n	800519e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	441a      	add	r2, r3
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	8013      	strh	r3, [r2, #0]
 8004cd6:	e262      	b.n	800519e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	4413      	add	r3, r2
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	011a      	lsls	r2, r3, #4
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	88db      	ldrh	r3, [r3, #6]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	4413      	add	r3, r2
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	011a      	lsls	r2, r3, #4
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d112      	bne.n	8004d5e <USB_ActivateEndpoint+0x286>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e02f      	b.n	8004dbe <USB_ActivateEndpoint+0x2e6>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b3e      	cmp	r3, #62	; 0x3e
 8004d64:	d813      	bhi.n	8004d8e <USB_ActivateEndpoint+0x2b6>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <USB_ActivateEndpoint+0x2a8>
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e017      	b.n	8004dbe <USB_ActivateEndpoint+0x2e6>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <USB_ActivateEndpoint+0x2d0>
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	3b01      	subs	r3, #1
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	83fb      	strh	r3, [r7, #30]
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01b      	beq.n	8004e0e <USB_ActivateEndpoint+0x336>
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	83bb      	strh	r3, [r7, #28]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8bbb      	ldrh	r3, [r7, #28]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	837b      	strh	r3, [r7, #26]
 8004e26:	8b7b      	ldrh	r3, [r7, #26]
 8004e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e2c:	837b      	strh	r3, [r7, #26]
 8004e2e:	8b7b      	ldrh	r3, [r7, #26]
 8004e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e34:	837b      	strh	r3, [r7, #26]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8b7b      	ldrh	r3, [r7, #26]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]
 8004e56:	e1a2      	b.n	800519e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea4:	4413      	add	r3, r2
 8004ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	011a      	lsls	r2, r3, #4
 8004eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	891b      	ldrh	r3, [r3, #8]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	4413      	add	r3, r2
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	895b      	ldrh	r3, [r3, #10]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8091 	bne.w	8005028 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01b      	beq.n	8004f56 <USB_ActivateEndpoint+0x47e>
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <USB_ActivateEndpoint+0x4ce>
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005004:	867b      	strh	r3, [r7, #50]	; 0x32
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
 8005026:	e0ba      	b.n	800519e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005038:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01d      	beq.n	8005080 <USB_ActivateEndpoint+0x5a8>
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800506c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01d      	beq.n	80050d8 <USB_ActivateEndpoint+0x600>
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d024      	beq.n	800512a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050fe:	f083 0320 	eor.w	r3, r3, #32
 8005102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e01d      	b.n	8005166 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800519e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	376c      	adds	r7, #108	; 0x6c
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b08d      	sub	sp, #52	; 0x34
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	7b1b      	ldrb	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 808e 	bne.w	80052dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d044      	beq.n	8005252 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	81bb      	strh	r3, [r7, #12]
 80051d6:	89bb      	ldrh	r3, [r7, #12]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <USB_DeactivateEndpoint+0x6c>
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	817b      	strh	r3, [r7, #10]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	897b      	ldrh	r3, [r7, #10]
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522e:	813b      	strh	r3, [r7, #8]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	893b      	ldrh	r3, [r7, #8]
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]
 8005250:	e192      	b.n	8005578 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	827b      	strh	r3, [r7, #18]
 8005260:	8a7b      	ldrh	r3, [r7, #18]
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <USB_DeactivateEndpoint+0xf6>
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	823b      	strh	r3, [r7, #16]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	8a3b      	ldrh	r3, [r7, #16]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	81fb      	strh	r3, [r7, #14]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]
 80052da:	e14d      	b.n	8005578 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 80a5 	bne.w	8005430 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	843b      	strh	r3, [r7, #32]
 80052f4:	8c3b      	ldrh	r3, [r7, #32]
 80052f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01b      	beq.n	8005336 <USB_DeactivateEndpoint+0x18a>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	83fb      	strh	r3, [r7, #30]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	8bfb      	ldrh	r3, [r7, #30]
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800532e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	83bb      	strh	r3, [r7, #28]
 8005344:	8bbb      	ldrh	r3, [r7, #28]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01b      	beq.n	8005386 <USB_DeactivateEndpoint+0x1da>
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	837b      	strh	r3, [r7, #26]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	8b7b      	ldrh	r3, [r7, #26]
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	833b      	strh	r3, [r7, #24]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8b3b      	ldrh	r3, [r7, #24]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	82fb      	strh	r3, [r7, #22]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8afb      	ldrh	r3, [r7, #22]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540c:	82bb      	strh	r3, [r7, #20]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8abb      	ldrh	r3, [r7, #20]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
 800542e:	e0a3      	b.n	8005578 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800543e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <USB_DeactivateEndpoint+0x2d4>
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800546c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	b29b      	uxth	r3, r3
 800547e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800548e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <USB_DeactivateEndpoint+0x324>
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	847b      	strh	r3, [r7, #34]	; 0x22
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3734      	adds	r7, #52	; 0x34
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0cc      	sub	sp, #304	; 0x130
 8005588:	af00      	add	r7, sp, #0
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005592:	6018      	str	r0, [r3, #0]
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	f041 817d 	bne.w	80068aa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d908      	bls.n	80055de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055dc:	e007      	b.n	80055ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	7b1b      	ldrb	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d152      	bne.n	80056a4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	88da      	ldrh	r2, [r3, #6]
 8005616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561a:	b29b      	uxth	r3, r3
 800561c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005620:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005624:	6800      	ldr	r0, [r0, #0]
 8005626:	f001 ff23 	bl	8007470 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005632:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005636:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564c:	b29b      	uxth	r3, r3
 800564e:	4619      	mov	r1, r3
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005658:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800565c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	440a      	add	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4413      	add	r3, r2
 8005680:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005692:	b29a      	uxth	r2, r3
 8005694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005698:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	f001 b8b5 	b.w	800680e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	f040 84c6 	bne.w	8006042 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f240 8443 	bls.w	8005f5a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005724:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 823e 	beq.w	8005bf2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800577e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005782:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 809a 	bne.w	80058d0 <USB_EPStartXfer+0x34c>
 800579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057ce:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	440a      	add	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	011a      	lsls	r2, r3, #4
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d122      	bne.n	800584e <USB_EPStartXfer+0x2ca>
 8005808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800581a:	b29a      	uxth	r2, r3
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583e:	b29a      	uxth	r2, r3
 8005840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005844:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	e079      	b.n	8005942 <USB_EPStartXfer+0x3be>
 800584e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005852:	2b3e      	cmp	r3, #62	; 0x3e
 8005854:	d81b      	bhi.n	800588e <USB_EPStartXfer+0x30a>
 8005856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <USB_EPStartXfer+0x2f2>
 800586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005870:	3301      	adds	r3, #1
 8005872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800587a:	b29b      	uxth	r3, r3
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	b29a      	uxth	r2, r3
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e059      	b.n	8005942 <USB_EPStartXfer+0x3be>
 800588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <USB_EPStartXfer+0x32a>
 80058a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	029b      	lsls	r3, r3, #10
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e038      	b.n	8005942 <USB_EPStartXfer+0x3be>
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d130      	bne.n	8005942 <USB_EPStartXfer+0x3be>
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80058fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058fe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	440a      	add	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	011a      	lsls	r2, r3, #4
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4413      	add	r3, r2
 8005922:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005934:	b29a      	uxth	r2, r3
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	895b      	ldrh	r3, [r3, #10]
 800594e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6959      	ldr	r1, [r3, #20]
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	b29b      	uxth	r3, r3
 8005964:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005968:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800596c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005970:	6800      	ldr	r0, [r0, #0]
 8005972:	f001 fd7d 	bl	8007470 <USB_WritePMA>
            ep->xfer_buff += len;
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	441a      	add	r2, r3
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a1a      	ldr	r2, [r3, #32]
 80059a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d90f      	bls.n	80059d0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	621a      	str	r2, [r3, #32]
 80059ce:	e00e      	b.n	80059ee <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80059d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80059e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 809a 	bne.w	8005b34 <USB_EPStartXfer+0x5b0>
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4619      	mov	r1, r3
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a32:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	440a      	add	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	011a      	lsls	r2, r3, #4
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4413      	add	r3, r2
 8005a56:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d122      	bne.n	8005ab2 <USB_EPStartXfer+0x52e>
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e083      	b.n	8005bba <USB_EPStartXfer+0x636>
 8005ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab8:	d81b      	bhi.n	8005af2 <USB_EPStartXfer+0x56e>
 8005aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <USB_EPStartXfer+0x556>
 8005ad0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ada:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	029b      	lsls	r3, r3, #10
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e063      	b.n	8005bba <USB_EPStartXfer+0x636>
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <USB_EPStartXfer+0x58e>
 8005b08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e042      	b.n	8005bba <USB_EPStartXfer+0x636>
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d13a      	bne.n	8005bba <USB_EPStartXfer+0x636>
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b50:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b76:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	011a      	lsls	r2, r3, #4
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	891b      	ldrh	r3, [r3, #8]
 8005bc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6959      	ldr	r1, [r3, #20]
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005be0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005be4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005be8:	6800      	ldr	r0, [r0, #0]
 8005bea:	f001 fc41 	bl	8007470 <USB_WritePMA>
 8005bee:	f000 be0e 	b.w	800680e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d16d      	bne.n	8005cde <USB_EPStartXfer+0x75a>
 8005c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c22:	4413      	add	r3, r2
 8005c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	011a      	lsls	r2, r3, #4
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d112      	bne.n	8005c6c <USB_EPStartXfer+0x6e8>
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e063      	b.n	8005d34 <USB_EPStartXfer+0x7b0>
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	2b3e      	cmp	r3, #62	; 0x3e
 8005c72:	d817      	bhi.n	8005ca4 <USB_EPStartXfer+0x720>
 8005c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <USB_EPStartXfer+0x710>
 8005c8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	e047      	b.n	8005d34 <USB_EPStartXfer+0x7b0>
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USB_EPStartXfer+0x740>
 8005cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	e02a      	b.n	8005d34 <USB_EPStartXfer+0x7b0>
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d122      	bne.n	8005d34 <USB_EPStartXfer+0x7b0>
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0e:	4413      	add	r3, r2
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	891b      	ldrh	r3, [r3, #8]
 8005d40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6959      	ldr	r1, [r3, #20]
 8005d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d5a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005d5e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005d62:	6800      	ldr	r0, [r0, #0]
 8005d64:	f001 fb84 	bl	8007470 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d78:	441a      	add	r2, r3
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d90f      	bls.n	8005dc2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	621a      	str	r2, [r3, #32]
 8005dc0:	e00e      	b.n	8005de0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	643b      	str	r3, [r7, #64]	; 0x40
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d16d      	bne.n	8005ed8 <USB_EPStartXfer+0x954>
 8005dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	4413      	add	r3, r2
 8005e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d112      	bne.n	8005e66 <USB_EPStartXfer+0x8e2>
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e05d      	b.n	8005f22 <USB_EPStartXfer+0x99e>
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6c:	d817      	bhi.n	8005e9e <USB_EPStartXfer+0x91a>
 8005e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <USB_EPStartXfer+0x90a>
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e88:	3301      	adds	r3, #1
 8005e8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	029b      	lsls	r3, r3, #10
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e041      	b.n	8005f22 <USB_EPStartXfer+0x99e>
 8005e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <USB_EPStartXfer+0x93a>
 8005eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e024      	b.n	8005f22 <USB_EPStartXfer+0x99e>
 8005ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d11c      	bne.n	8005f22 <USB_EPStartXfer+0x99e>
 8005ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efc:	4413      	add	r3, r2
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	895b      	ldrh	r3, [r3, #10]
 8005f2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6959      	ldr	r1, [r3, #20]
 8005f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f50:	6800      	ldr	r0, [r0, #0]
 8005f52:	f001 fa8d 	bl	8007470 <USB_WritePMA>
 8005f56:	f000 bc5a 	b.w	800680e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	011a      	lsls	r2, r3, #4
 8005ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006000:	65bb      	str	r3, [r7, #88]	; 0x58
 8006002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006006:	b29a      	uxth	r2, r3
 8006008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800600c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	891b      	ldrh	r3, [r3, #8]
 8006018:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6959      	ldr	r1, [r3, #20]
 8006028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602c:	b29b      	uxth	r3, r3
 800602e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006032:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006036:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	f001 fa18 	bl	8007470 <USB_WritePMA>
 8006040:	e3e5      	b.n	800680e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a1a      	ldr	r2, [r3, #32]
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 81bc 	beq.w	800645c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d16d      	bne.n	80061de <USB_EPStartXfer+0xc5a>
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	67bb      	str	r3, [r7, #120]	; 0x78
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006122:	4413      	add	r3, r2
 8006124:	67bb      	str	r3, [r7, #120]	; 0x78
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	011a      	lsls	r2, r3, #4
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	4413      	add	r3, r2
 8006138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
 800613e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d112      	bne.n	800616c <USB_EPStartXfer+0xbe8>
 8006146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006150:	b29a      	uxth	r2, r3
 8006152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006164:	b29a      	uxth	r2, r3
 8006166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e060      	b.n	800622e <USB_EPStartXfer+0xcaa>
 800616c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006170:	2b3e      	cmp	r3, #62	; 0x3e
 8006172:	d817      	bhi.n	80061a4 <USB_EPStartXfer+0xc20>
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800617e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <USB_EPStartXfer+0xc10>
 800618a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800618e:	3301      	adds	r3, #1
 8006190:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006194:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29a      	uxth	r2, r3
 800619e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e044      	b.n	800622e <USB_EPStartXfer+0xcaa>
 80061a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <USB_EPStartXfer+0xc40>
 80061ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061be:	3b01      	subs	r3, #1
 80061c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e027      	b.n	800622e <USB_EPStartXfer+0xcaa>
 80061de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d11f      	bne.n	800622e <USB_EPStartXfer+0xcaa>
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006204:	4413      	add	r3, r2
 8006206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	011a      	lsls	r2, r3, #4
 8006218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800621c:	4413      	add	r3, r2
 800621e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006228:	b29a      	uxth	r2, r3
 800622a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800622c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	895b      	ldrh	r3, [r3, #10]
 800623a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6959      	ldr	r1, [r3, #20]
 800624a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624e:	b29b      	uxth	r3, r3
 8006250:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006254:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006258:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800625c:	6800      	ldr	r0, [r0, #0]
 800625e:	f001 f907 	bl	8007470 <USB_WritePMA>
          ep->xfer_buff += len;
 8006262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	441a      	add	r2, r3
 8006274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	429a      	cmp	r2, r3
 800629a:	d90f      	bls.n	80062bc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ac:	1ad2      	subs	r2, r2, r3
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	621a      	str	r2, [r3, #32]
 80062ba:	e00e      	b.n	80062da <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2200      	movs	r2, #0
 80062d8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8295 	beq.w	800680e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d16d      	bne.n	80063d0 <USB_EPStartXfer+0xe4c>
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006314:	4413      	add	r3, r2
 8006316:	66bb      	str	r3, [r7, #104]	; 0x68
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006328:	4413      	add	r3, r2
 800632a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800632e:	667b      	str	r3, [r7, #100]	; 0x64
 8006330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d112      	bne.n	800635e <USB_EPStartXfer+0xdda>
 8006338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006342:	b29a      	uxth	r2, r3
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e063      	b.n	8006426 <USB_EPStartXfer+0xea2>
 800635e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006362:	2b3e      	cmp	r3, #62	; 0x3e
 8006364:	d817      	bhi.n	8006396 <USB_EPStartXfer+0xe12>
 8006366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <USB_EPStartXfer+0xe02>
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006380:	3301      	adds	r3, #1
 8006382:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	b29b      	uxth	r3, r3
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	b29a      	uxth	r2, r3
 8006390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e047      	b.n	8006426 <USB_EPStartXfer+0xea2>
 8006396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <USB_EPStartXfer+0xe32>
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b0:	3b01      	subs	r3, #1
 80063b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	029b      	lsls	r3, r3, #10
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e02a      	b.n	8006426 <USB_EPStartXfer+0xea2>
 80063d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d122      	bne.n	8006426 <USB_EPStartXfer+0xea2>
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	673b      	str	r3, [r7, #112]	; 0x70
 80063ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006400:	4413      	add	r3, r2
 8006402:	673b      	str	r3, [r7, #112]	; 0x70
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006414:	4413      	add	r3, r2
 8006416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	b29a      	uxth	r2, r3
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	891b      	ldrh	r3, [r3, #8]
 8006432:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6959      	ldr	r1, [r3, #20]
 8006442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006446:	b29b      	uxth	r3, r3
 8006448:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800644c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006450:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006454:	6800      	ldr	r0, [r0, #0]
 8006456:	f001 f80b 	bl	8007470 <USB_WritePMA>
 800645a:	e1d8      	b.n	800680e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d178      	bne.n	800655e <USB_EPStartXfer+0xfda>
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006490:	4413      	add	r3, r2
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <USB_EPStartXfer+0xf64>
 80064ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e06b      	b.n	80065c0 <USB_EPStartXfer+0x103c>
 80064e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ec:	2b3e      	cmp	r3, #62	; 0x3e
 80064ee:	d818      	bhi.n	8006522 <USB_EPStartXfer+0xf9e>
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <USB_EPStartXfer+0xf8c>
 8006506:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800650a:	3301      	adds	r3, #1
 800650c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006510:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e04e      	b.n	80065c0 <USB_EPStartXfer+0x103c>
 8006522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <USB_EPStartXfer+0xfbe>
 8006538:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800653c:	3b01      	subs	r3, #1
 800653e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006542:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e030      	b.n	80065c0 <USB_EPStartXfer+0x103c>
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d128      	bne.n	80065c0 <USB_EPStartXfer+0x103c>
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800657c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658a:	b29b      	uxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006592:	4413      	add	r3, r2
 8006594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	011a      	lsls	r2, r3, #4
 80065a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	891b      	ldrh	r3, [r3, #8]
 80065cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6959      	ldr	r1, [r3, #20]
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	f000 ff3e 	bl	8007470 <USB_WritePMA>
          ep->xfer_buff += len;
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006604:	441a      	add	r2, r3
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90f      	bls.n	800664e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	621a      	str	r2, [r3, #32]
 800664c:	e00e      	b.n	800666c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80cc 	beq.w	800680e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d178      	bne.n	8006786 <USB_EPStartXfer+0x1202>
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	011a      	lsls	r2, r3, #4
 80066cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d116      	bne.n	8006710 <USB_EPStartXfer+0x118c>
 80066e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006706:	b29a      	uxth	r2, r3
 8006708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	e064      	b.n	80067da <USB_EPStartXfer+0x1256>
 8006710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006714:	2b3e      	cmp	r3, #62	; 0x3e
 8006716:	d818      	bhi.n	800674a <USB_EPStartXfer+0x11c6>
 8006718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0x11b4>
 800672e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673c:	b29b      	uxth	r3, r3
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	b29a      	uxth	r2, r3
 8006742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e047      	b.n	80067da <USB_EPStartXfer+0x1256>
 800674a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USB_EPStartXfer+0x11e6>
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	3b01      	subs	r3, #1
 8006766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800676a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676e:	b29b      	uxth	r3, r3
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	b29b      	uxth	r3, r3
 8006774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e029      	b.n	80067da <USB_EPStartXfer+0x1256>
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d121      	bne.n	80067da <USB_EPStartXfer+0x1256>
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067ac:	4413      	add	r3, r2
 80067ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	011a      	lsls	r2, r3, #4
 80067c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6959      	ldr	r1, [r3, #20]
 80067f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006800:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006804:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006808:	6800      	ldr	r0, [r0, #0]
 800680a:	f000 fe31 	bl	8007470 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006830:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	8013      	strh	r3, [r2, #0]
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006846:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800684a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800684e:	8812      	ldrh	r2, [r2, #0]
 8006850:	f082 0210 	eor.w	r2, r2, #16
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800685e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006862:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006866:	8812      	ldrh	r2, [r2, #0]
 8006868:	f082 0220 	eor.w	r2, r2, #32
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	f000 bc9f 	b.w	80071e8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	7b1b      	ldrb	r3, [r3, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f040 80ae 	bne.w	8006a18 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d917      	bls.n	8006908 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	619a      	str	r2, [r3, #24]
 8006906:	e00e      	b.n	8006926 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800694a:	4413      	add	r3, r2
 800694c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006962:	4413      	add	r3, r2
 8006964:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d116      	bne.n	80069a2 <USB_EPStartXfer+0x141e>
 8006974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006998:	b29a      	uxth	r2, r3
 800699a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e3e8      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	2b3e      	cmp	r3, #62	; 0x3e
 80069a8:	d818      	bhi.n	80069dc <USB_EPStartXfer+0x1458>
 80069aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <USB_EPStartXfer+0x1446>
 80069c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c4:	3301      	adds	r3, #1
 80069c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	029b      	lsls	r3, r3, #10
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e3cb      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
 80069dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <USB_EPStartXfer+0x1478>
 80069f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f6:	3b01      	subs	r3, #1
 80069f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	029b      	lsls	r3, r3, #10
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e3ad      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	f040 8200 	bne.w	8006e2a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 8091 	bne.w	8006b5e <USB_EPStartXfer+0x15da>
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	011a      	lsls	r2, r3, #4
 8006a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d116      	bne.n	8006ac0 <USB_EPStartXfer+0x153c>
 8006a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa4:	801a      	strh	r2, [r3, #0]
 8006aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e083      	b.n	8006bc8 <USB_EPStartXfer+0x1644>
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ace:	d820      	bhi.n	8006b12 <USB_EPStartXfer+0x158e>
 8006ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <USB_EPStartXfer+0x157c>
 8006af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afa:	3301      	adds	r3, #1
 8006afc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	029b      	lsls	r3, r3, #10
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e05a      	b.n	8006bc8 <USB_EPStartXfer+0x1644>
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <USB_EPStartXfer+0x15be>
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	029b      	lsls	r3, r3, #10
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e034      	b.n	8006bc8 <USB_EPStartXfer+0x1644>
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d12c      	bne.n	8006bc8 <USB_EPStartXfer+0x1644>
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b92:	4413      	add	r3, r2
 8006b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	011a      	lsls	r2, r3, #4
 8006ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 8091 	bne.w	8006d0a <USB_EPStartXfer+0x1786>
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	011a      	lsls	r2, r3, #4
 8006c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c24:	4413      	add	r3, r2
 8006c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d116      	bne.n	8006c6c <USB_EPStartXfer+0x16e8>
 8006c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e07c      	b.n	8006d66 <USB_EPStartXfer+0x17e2>
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7a:	d820      	bhi.n	8006cbe <USB_EPStartXfer+0x173a>
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USB_EPStartXfer+0x1728>
 8006ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e053      	b.n	8006d66 <USB_EPStartXfer+0x17e2>
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <USB_EPStartXfer+0x176a>
 8006ce4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	029b      	lsls	r3, r3, #10
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	e02d      	b.n	8006d66 <USB_EPStartXfer+0x17e2>
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d125      	bne.n	8006d66 <USB_EPStartXfer+0x17e2>
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d30:	4413      	add	r3, r2
 8006d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d64:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 81fe 	beq.w	8007174 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d98:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <USB_EPStartXfer+0x182c>
 8006da4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10d      	bne.n	8006dcc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006db0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 81db 	bne.w	8007174 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dbe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 81d4 	bne.w	8007174 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]
 8006e28:	e1a4      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	f040 819a 	bne.w	8007170 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d917      	bls.n	8006e88 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e78:	1ad2      	subs	r2, r2, r3
 8006e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	619a      	str	r2, [r3, #24]
 8006e86:	e00e      	b.n	8006ea6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d178      	bne.n	8006fa8 <USB_EPStartXfer+0x1a24>
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eda:	4413      	add	r3, r2
 8006edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	011a      	lsls	r2, r3, #4
 8006eee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d116      	bne.n	8006f32 <USB_EPStartXfer+0x19ae>
 8006f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	e06b      	b.n	800700a <USB_EPStartXfer+0x1a86>
 8006f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f36:	2b3e      	cmp	r3, #62	; 0x3e
 8006f38:	d818      	bhi.n	8006f6c <USB_EPStartXfer+0x19e8>
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <USB_EPStartXfer+0x19d6>
 8006f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f54:	3301      	adds	r3, #1
 8006f56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	e04e      	b.n	800700a <USB_EPStartXfer+0x1a86>
 8006f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <USB_EPStartXfer+0x1a08>
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	029b      	lsls	r3, r3, #10
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	e030      	b.n	800700a <USB_EPStartXfer+0x1a86>
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d128      	bne.n	800700a <USB_EPStartXfer+0x1a86>
 8006fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	4413      	add	r3, r2
 8006fde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	011a      	lsls	r2, r3, #4
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d178      	bne.n	800711a <USB_EPStartXfer+0x1b96>
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704c:	4413      	add	r3, r2
 800704e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	011a      	lsls	r2, r3, #4
 8007060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007064:	4413      	add	r3, r2
 8007066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800706a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800706e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d116      	bne.n	80070a4 <USB_EPStartXfer+0x1b20>
 8007076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007082:	b29a      	uxth	r2, r3
 8007084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e067      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	2b3e      	cmp	r3, #62	; 0x3e
 80070aa:	d818      	bhi.n	80070de <USB_EPStartXfer+0x1b5a>
 80070ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <USB_EPStartXfer+0x1b48>
 80070c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070c6:	3301      	adds	r3, #1
 80070c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	e04a      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
 80070de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <USB_EPStartXfer+0x1b7a>
 80070f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070f8:	3b01      	subs	r3, #1
 80070fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007102:	b29b      	uxth	r3, r3
 8007104:	029b      	lsls	r3, r3, #10
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	e02c      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
 800711a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	785b      	ldrb	r3, [r3, #1]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d124      	bne.n	8007174 <USB_EPStartXfer+0x1bf0>
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007140:	4413      	add	r3, r2
 8007142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	011a      	lsls	r2, r3, #4
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	4413      	add	r3, r2
 800715a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800715e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e001      	b.n	8007174 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e03a      	b.n	80071ea <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800719e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	441a      	add	r2, r3
 80071d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d020      	beq.n	8007248 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721c:	81bb      	strh	r3, [r7, #12]
 800721e:	89bb      	ldrh	r3, [r7, #12]
 8007220:	f083 0310 	eor.w	r3, r3, #16
 8007224:	81bb      	strh	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	89bb      	ldrh	r3, [r7, #12]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]
 8007246:	e01f      	b.n	8007288 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	81fb      	strh	r3, [r7, #14]
 8007260:	89fb      	ldrh	r3, [r7, #14]
 8007262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007266:	81fb      	strh	r3, [r7, #14]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	441a      	add	r2, r3
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	7b1b      	ldrb	r3, [r3, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 809d 	bne.w	80073e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d04c      	beq.n	800734a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	823b      	strh	r3, [r7, #16]
 80072be:	8a3b      	ldrh	r3, [r7, #16]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01b      	beq.n	8007300 <USB_EPClearStall+0x6c>
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	81fb      	strh	r3, [r7, #14]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	89fb      	ldrh	r3, [r7, #14]
 80072ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	78db      	ldrb	r3, [r3, #3]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d06c      	beq.n	80073e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731e:	81bb      	strh	r3, [r7, #12]
 8007320:	89bb      	ldrh	r3, [r7, #12]
 8007322:	f083 0320 	eor.w	r3, r3, #32
 8007326:	81bb      	strh	r3, [r7, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	89bb      	ldrh	r3, [r7, #12]
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
 8007348:	e04b      	b.n	80073e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	82fb      	strh	r3, [r7, #22]
 8007358:	8afb      	ldrh	r3, [r7, #22]
 800735a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01b      	beq.n	800739a <USB_EPClearStall+0x106>
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007378:	82bb      	strh	r3, [r7, #20]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	8abb      	ldrh	r3, [r7, #20]
 8007386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800738a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007396:	b29b      	uxth	r3, r3
 8007398:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b0:	827b      	strh	r3, [r7, #18]
 80073b2:	8a7b      	ldrh	r3, [r7, #18]
 80073b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073b8:	827b      	strh	r3, [r7, #18]
 80073ba:	8a7b      	ldrh	r3, [r7, #18]
 80073bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073c0:	827b      	strh	r3, [r7, #18]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	8a7b      	ldrh	r3, [r7, #18]
 80073ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073de:	b29b      	uxth	r3, r3
 80073e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800744a:	b29b      	uxth	r3, r3
 800744c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800744e:	68fb      	ldr	r3, [r7, #12]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	4770      	bx	lr

0800745a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007470:	b480      	push	{r7}
 8007472:	b08d      	sub	sp, #52	; 0x34
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	460b      	mov	r3, r1
 8007480:	80fb      	strh	r3, [r7, #6]
 8007482:	4613      	mov	r3, r2
 8007484:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007486:	88bb      	ldrh	r3, [r7, #4]
 8007488:	3301      	adds	r3, #1
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	005a      	lsls	r2, r3, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a8:	e01e      	b.n	80074e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	3301      	adds	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	b29b      	uxth	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	3302      	adds	r3, #2
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	3302      	adds	r3, #2
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	3301      	adds	r3, #1
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	3b01      	subs	r3, #1
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1dd      	bne.n	80074aa <USB_WritePMA+0x3a>
  }
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	3734      	adds	r7, #52	; 0x34
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b08b      	sub	sp, #44	; 0x2c
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	4611      	mov	r1, r2
 8007506:	461a      	mov	r2, r3
 8007508:	460b      	mov	r3, r1
 800750a:	80fb      	strh	r3, [r7, #6]
 800750c:	4613      	mov	r3, r2
 800750e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007510:	88bb      	ldrh	r3, [r7, #4]
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	b29b      	uxth	r3, r3
 8007516:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	005a      	lsls	r2, r3, #1
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	e01b      	b.n	800756c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	3302      	adds	r3, #2
 8007540:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	b2da      	uxtb	r2, r3
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	3301      	adds	r3, #1
 800754e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b2da      	uxtb	r2, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3301      	adds	r3, #1
 800755e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	3302      	adds	r3, #2
 8007564:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	3b01      	subs	r3, #1
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e0      	bne.n	8007534 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007572:	88bb      	ldrh	r3, [r7, #4]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	701a      	strb	r2, [r3, #0]
  }
}
 800758e:	bf00      	nop
 8007590:	372c      	adds	r7, #44	; 0x2c
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7c1b      	ldrb	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d115      	bne.n	80075dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b4:	2202      	movs	r2, #2
 80075b6:	2181      	movs	r1, #129	; 0x81
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fe30 	bl	800921e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c8:	2202      	movs	r2, #2
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fe26 	bl	800921e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80075da:	e012      	b.n	8007602 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	2202      	movs	r2, #2
 80075e0:	2181      	movs	r1, #129	; 0x81
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fe1b 	bl	800921e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075ee:	2340      	movs	r3, #64	; 0x40
 80075f0:	2202      	movs	r2, #2
 80075f2:	2101      	movs	r1, #1
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe12 	bl	800921e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007602:	2308      	movs	r3, #8
 8007604:	2203      	movs	r2, #3
 8007606:	2182      	movs	r1, #130	; 0x82
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fe08 	bl	800921e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007618:	f001 ff28 	bl	800946c <USBD_static_malloc>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	e026      	b.n	8007682 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7c1b      	ldrb	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007668:	2101      	movs	r1, #1
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fec8 	bl	8009400 <USBD_LL_PrepareReceive>
 8007670:	e007      	b.n	8007682 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	2101      	movs	r1, #1
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 febf 	bl	8009400 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800769c:	2181      	movs	r1, #129	; 0x81
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fde3 	bl	800926a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076aa:	2101      	movs	r1, #1
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fddc 	bl	800926a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076ba:	2182      	movs	r1, #130	; 0x82
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fdd4 	bl	800926a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fece 	bl	8009484 <USBD_static_free>
    pdev->pClassData = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007720:	2b00      	cmp	r3, #0
 8007722:	d039      	beq.n	8007798 <USBD_CDC_Setup+0x9e>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d17f      	bne.n	8007828 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d029      	beq.n	8007784 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	da11      	bge.n	800775e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007746:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	88d2      	ldrh	r2, [r2, #6]
 800774c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	88db      	ldrh	r3, [r3, #6]
 8007754:	461a      	mov	r2, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 f9d9 	bl	8008b0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800775c:	e06b      	b.n	8007836 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	785a      	ldrb	r2, [r3, #1]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	88db      	ldrh	r3, [r3, #6]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007774:	6939      	ldr	r1, [r7, #16]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	88db      	ldrh	r3, [r3, #6]
 800777a:	461a      	mov	r2, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f9f4 	bl	8008b6a <USBD_CtlPrepareRx>
      break;
 8007782:	e058      	b.n	8007836 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	7850      	ldrb	r0, [r2, #1]
 8007790:	2200      	movs	r2, #0
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	4798      	blx	r3
      break;
 8007796:	e04e      	b.n	8007836 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b0b      	cmp	r3, #11
 800779e:	d02e      	beq.n	80077fe <USBD_CDC_Setup+0x104>
 80077a0:	2b0b      	cmp	r3, #11
 80077a2:	dc38      	bgt.n	8007816 <USBD_CDC_Setup+0x11c>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <USBD_CDC_Setup+0xb4>
 80077a8:	2b0a      	cmp	r3, #10
 80077aa:	d014      	beq.n	80077d6 <USBD_CDC_Setup+0xdc>
 80077ac:	e033      	b.n	8007816 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d107      	bne.n	80077c8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077b8:	f107 030c 	add.w	r3, r7, #12
 80077bc:	2202      	movs	r2, #2
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 f9a4 	bl	8008b0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c6:	e02e      	b.n	8007826 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f935 	bl	8008a3a <USBD_CtlError>
            ret = USBD_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	75fb      	strb	r3, [r7, #23]
          break;
 80077d4:	e027      	b.n	8007826 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d107      	bne.n	80077f0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80077e0:	f107 030f 	add.w	r3, r7, #15
 80077e4:	2201      	movs	r2, #1
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 f990 	bl	8008b0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077ee:	e01a      	b.n	8007826 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 f921 	bl	8008a3a <USBD_CtlError>
            ret = USBD_FAIL;
 80077f8:	2302      	movs	r3, #2
 80077fa:	75fb      	strb	r3, [r7, #23]
          break;
 80077fc:	e013      	b.n	8007826 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b03      	cmp	r3, #3
 8007806:	d00d      	beq.n	8007824 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 f915 	bl	8008a3a <USBD_CtlError>
            ret = USBD_FAIL;
 8007810:	2302      	movs	r3, #2
 8007812:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007814:	e006      	b.n	8007824 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f90e 	bl	8008a3a <USBD_CtlError>
          ret = USBD_FAIL;
 800781e:	2302      	movs	r3, #2
 8007820:	75fb      	strb	r3, [r7, #23]
          break;
 8007822:	e000      	b.n	8007826 <USBD_CDC_Setup+0x12c>
          break;
 8007824:	bf00      	nop
      }
      break;
 8007826:	e006      	b.n	8007836 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f905 	bl	8008a3a <USBD_CtlError>
      ret = USBD_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	75fb      	strb	r3, [r7, #23]
      break;
 8007834:	bf00      	nop
  }

  return ret;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007852:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d03a      	beq.n	80078dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	331c      	adds	r3, #28
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d029      	beq.n	80078d0 <USBD_CDC_DataIn+0x90>
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	331c      	adds	r3, #28
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	78f9      	ldrb	r1, [r7, #3]
 8007890:	68b8      	ldr	r0, [r7, #8]
 8007892:	460b      	mov	r3, r1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4403      	add	r3, r0
 800789c:	3338      	adds	r3, #56	; 0x38
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	331c      	adds	r3, #28
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078c2:	78f9      	ldrb	r1, [r7, #3]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fd76 	bl	80093ba <USBD_LL_Transmit>
 80078ce:	e003      	b.n	80078d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fda1 	bl	8009446 <USBD_LL_GetRxDataSize>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800792a:	4611      	mov	r1, r2
 800792c:	4798      	blx	r3

    return USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e000      	b.n	8007934 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007932:	2302      	movs	r3, #2
  }
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <USBD_CDC_EP0_RxReady+0x46>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800795c:	2bff      	cmp	r3, #255	; 0xff
 800795e:	d010      	beq.n	8007982 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800796e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007976:	b292      	uxth	r2, r2
 8007978:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	22ff      	movs	r2, #255	; 0xff
 800797e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2243      	movs	r2, #67	; 0x43
 8007998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000098 	.word	0x20000098

080079ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2243      	movs	r2, #67	; 0x43
 80079b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	20000054 	.word	0x20000054

080079cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2243      	movs	r2, #67	; 0x43
 80079d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200000dc 	.word	0x200000dc

080079ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220a      	movs	r2, #10
 80079f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80079fa:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000010 	.word	0x20000010

08007a0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a16:	2302      	movs	r3, #2
 8007a18:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a56:	88fa      	ldrh	r2, [r7, #6]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d017      	beq.n	8007ada <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7c1b      	ldrb	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007abc:	2101      	movs	r1, #1
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 fc9e 	bl	8009400 <USBD_LL_PrepareReceive>
 8007ac4:	e007      	b.n	8007ad6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	2101      	movs	r1, #1
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fc95 	bl	8009400 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e000      	b.n	8007adc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007af8:	2302      	movs	r3, #2
 8007afa:	e01a      	b.n	8007b32 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f001 fb02 	bl	8009134 <USBD_LL_Init>

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d006      	beq.n	8007b5c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
 8007b5a:	e001      	b.n	8007b60 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr

08007b6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 fb37 	bl	80091e8 <USBD_LL_Start>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr

08007b98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00c      	beq.n	8007bcc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	4611      	mov	r1, r2
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fed7 	bl	80089c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d016      	beq.n	8007c66 <USBD_LL_SetupStage+0x6a>
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d81c      	bhi.n	8007c76 <USBD_LL_SetupStage+0x7a>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <USBD_LL_SetupStage+0x4a>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d008      	beq.n	8007c56 <USBD_LL_SetupStage+0x5a>
 8007c44:	e017      	b.n	8007c76 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9ca 	bl	8007fe8 <USBD_StdDevReq>
      break;
 8007c54:	e01a      	b.n	8007c8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa2c 	bl	80080bc <USBD_StdItfReq>
      break;
 8007c64:	e012      	b.n	8007c8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa6c 	bl	800814c <USBD_StdEPReq>
      break;
 8007c74:	e00a      	b.n	8007c8c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 fb0f 	bl	80092a8 <USBD_LL_StallEP>
      break;
 8007c8a:	bf00      	nop
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d14b      	bne.n	8007d42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007cb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d134      	bne.n	8007d26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d919      	bls.n	8007cfc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	1ad2      	subs	r2, r2, r3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d203      	bcs.n	8007cea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	e002      	b.n	8007cf0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 ff56 	bl	8008ba6 <USBD_CtlContinueRx>
 8007cfa:	e038      	b.n	8007d6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d105      	bne.n	8007d1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 ff53 	bl	8008bca <USBD_CtlSendStatus>
 8007d24:	e023      	b.n	8007d6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d2c:	2b05      	cmp	r3, #5
 8007d2e:	d11e      	bne.n	8007d6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f001 fab4 	bl	80092a8 <USBD_LL_StallEP>
 8007d40:	e015      	b.n	8007d6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d108      	bne.n	8007d6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	7afa      	ldrb	r2, [r7, #11]
 8007d62:	4611      	mov	r1, r2
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	4798      	blx	r3
 8007d68:	e001      	b.n	8007d6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e000      	b.n	8007d70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	460b      	mov	r3, r1
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d17f      	bne.n	8007e8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3314      	adds	r3, #20
 8007d90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d15c      	bne.n	8007e56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d915      	bls.n	8007dd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	1ad2      	subs	r2, r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fec0 	bl	8008b46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fb17 	bl	8009400 <USBD_LL_PrepareReceive>
 8007dd2:	e04e      	b.n	8007e72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	6912      	ldr	r2, [r2, #16]
 8007ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007de0:	fb01 f202 	mul.w	r2, r1, r2
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11c      	bne.n	8007e24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d316      	bcc.n	8007e24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d20f      	bcs.n	8007e24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fe9c 	bl	8008b46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e16:	2300      	movs	r3, #0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f001 faef 	bl	8009400 <USBD_LL_PrepareReceive>
 8007e22:	e026      	b.n	8007e72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d105      	bne.n	8007e46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 fa2d 	bl	80092a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fece 	bl	8008bf0 <USBD_CtlReceiveStatus>
 8007e54:	e00d      	b.n	8007e72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d004      	beq.n	8007e6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 fa1b 	bl	80092a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d11d      	bne.n	8007eb8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fe81 	bl	8007b84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e8a:	e015      	b.n	8007eb8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00d      	beq.n	8007eb4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d108      	bne.n	8007eb4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	7afa      	ldrb	r2, [r7, #11]
 8007eac:	4611      	mov	r1, r2
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	4798      	blx	r3
 8007eb2:	e001      	b.n	8007eb8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e000      	b.n	8007eba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f9a4 	bl	800921e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2180      	movs	r1, #128	; 0x80
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f996 	bl	800921e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2240      	movs	r2, #64	; 0x40
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6852      	ldr	r2, [r2, #4]
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	4611      	mov	r1, r2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
  }

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d105      	bne.n	8007fa8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d10b      	bne.n	8007fde <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d005      	beq.n	800800e <USBD_StdDevReq+0x26>
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d84f      	bhi.n	80080a6 <USBD_StdDevReq+0xbe>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <USBD_StdDevReq+0x36>
 800800a:	2b20      	cmp	r3, #32
 800800c:	d14b      	bne.n	80080a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
      break;
 800801c:	e048      	b.n	80080b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b09      	cmp	r3, #9
 8008024:	d839      	bhi.n	800809a <USBD_StdDevReq+0xb2>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_StdDevReq+0x44>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800807d 	.word	0x0800807d
 8008030:	08008091 	.word	0x08008091
 8008034:	0800809b 	.word	0x0800809b
 8008038:	08008087 	.word	0x08008087
 800803c:	0800809b 	.word	0x0800809b
 8008040:	0800805f 	.word	0x0800805f
 8008044:	08008055 	.word	0x08008055
 8008048:	0800809b 	.word	0x0800809b
 800804c:	08008073 	.word	0x08008073
 8008050:	08008069 	.word	0x08008069
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9dc 	bl	8008414 <USBD_GetDescriptor>
          break;
 800805c:	e022      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb3f 	bl	80086e4 <USBD_SetAddress>
          break;
 8008066:	e01d      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fb7e 	bl	800876c <USBD_SetConfig>
          break;
 8008070:	e018      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fc07 	bl	8008888 <USBD_GetConfig>
          break;
 800807a:	e013      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc37 	bl	80088f2 <USBD_GetStatus>
          break;
 8008084:	e00e      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc65 	bl	8008958 <USBD_SetFeature>
          break;
 800808e:	e009      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fc74 	bl	8008980 <USBD_ClrFeature>
          break;
 8008098:	e004      	b.n	80080a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fccc 	bl	8008a3a <USBD_CtlError>
          break;
 80080a2:	bf00      	nop
      }
      break;
 80080a4:	e004      	b.n	80080b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fcc6 	bl	8008a3a <USBD_CtlError>
      break;
 80080ae:	bf00      	nop
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop

080080bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	d005      	beq.n	80080e2 <USBD_StdItfReq+0x26>
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d82e      	bhi.n	8008138 <USBD_StdItfReq+0x7c>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <USBD_StdItfReq+0x26>
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d12a      	bne.n	8008138 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	3b01      	subs	r3, #1
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d81d      	bhi.n	800812a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	889b      	ldrh	r3, [r3, #4]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d813      	bhi.n	8008120 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	88db      	ldrh	r3, [r3, #6]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d110      	bne.n	8008134 <USBD_StdItfReq+0x78>
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10d      	bne.n	8008134 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fd56 	bl	8008bca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800811e:	e009      	b.n	8008134 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc89 	bl	8008a3a <USBD_CtlError>
          break;
 8008128:	e004      	b.n	8008134 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc84 	bl	8008a3a <USBD_CtlError>
          break;
 8008132:	e000      	b.n	8008136 <USBD_StdItfReq+0x7a>
          break;
 8008134:	bf00      	nop
      }
      break;
 8008136:	e004      	b.n	8008142 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc7d 	bl	8008a3a <USBD_CtlError>
      break;
 8008140:	bf00      	nop
  }

  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	889b      	ldrh	r3, [r3, #4]
 800815e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008168:	2b40      	cmp	r3, #64	; 0x40
 800816a:	d007      	beq.n	800817c <USBD_StdEPReq+0x30>
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	f200 8146 	bhi.w	80083fe <USBD_StdEPReq+0x2b2>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <USBD_StdEPReq+0x40>
 8008176:	2b20      	cmp	r3, #32
 8008178:	f040 8141 	bne.w	80083fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      break;
 800818a:	e13d      	b.n	8008408 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008194:	2b20      	cmp	r3, #32
 8008196:	d10a      	bne.n	80081ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	e12d      	b.n	800840a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d007      	beq.n	80081c6 <USBD_StdEPReq+0x7a>
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	f300 811b 	bgt.w	80083f2 <USBD_StdEPReq+0x2a6>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d072      	beq.n	80082a6 <USBD_StdEPReq+0x15a>
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d03a      	beq.n	800823a <USBD_StdEPReq+0xee>
 80081c4:	e115      	b.n	80083f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d002      	beq.n	80081d6 <USBD_StdEPReq+0x8a>
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d015      	beq.n	8008200 <USBD_StdEPReq+0xb4>
 80081d4:	e02b      	b.n	800822e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00c      	beq.n	80081f6 <USBD_StdEPReq+0xaa>
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b80      	cmp	r3, #128	; 0x80
 80081e0:	d009      	beq.n	80081f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f85e 	bl	80092a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081ec:	2180      	movs	r1, #128	; 0x80
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 f85a 	bl	80092a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081f4:	e020      	b.n	8008238 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc1e 	bl	8008a3a <USBD_CtlError>
              break;
 80081fe:	e01b      	b.n	8008238 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	885b      	ldrh	r3, [r3, #2]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10e      	bne.n	8008226 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <USBD_StdEPReq+0xda>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d008      	beq.n	8008226 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	88db      	ldrh	r3, [r3, #6]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f841 	bl	80092a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fccf 	bl	8008bca <USBD_CtlSendStatus>

              break;
 800822c:	e004      	b.n	8008238 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc02 	bl	8008a3a <USBD_CtlError>
              break;
 8008236:	bf00      	nop
          }
          break;
 8008238:	e0e0      	b.n	80083fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	2b02      	cmp	r3, #2
 8008242:	d002      	beq.n	800824a <USBD_StdEPReq+0xfe>
 8008244:	2b03      	cmp	r3, #3
 8008246:	d015      	beq.n	8008274 <USBD_StdEPReq+0x128>
 8008248:	e026      	b.n	8008298 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00c      	beq.n	800826a <USBD_StdEPReq+0x11e>
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d009      	beq.n	800826a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f824 	bl	80092a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 f820 	bl	80092a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008268:	e01c      	b.n	80082a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbe4 	bl	8008a3a <USBD_CtlError>
              break;
 8008272:	e017      	b.n	80082a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	885b      	ldrh	r3, [r3, #2]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d112      	bne.n	80082a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 f82b 	bl	80092e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fc9a 	bl	8008bca <USBD_CtlSendStatus>
              }
              break;
 8008296:	e004      	b.n	80082a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fbcd 	bl	8008a3a <USBD_CtlError>
              break;
 80082a0:	e000      	b.n	80082a4 <USBD_StdEPReq+0x158>
              break;
 80082a2:	bf00      	nop
          }
          break;
 80082a4:	e0aa      	b.n	80083fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d002      	beq.n	80082b6 <USBD_StdEPReq+0x16a>
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d032      	beq.n	800831a <USBD_StdEPReq+0x1ce>
 80082b4:	e097      	b.n	80083e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <USBD_StdEPReq+0x180>
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b80      	cmp	r3, #128	; 0x80
 80082c0:	d004      	beq.n	80082cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fbb8 	bl	8008a3a <USBD_CtlError>
                break;
 80082ca:	e091      	b.n	80083f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da0b      	bge.n	80082ec <USBD_StdEPReq+0x1a0>
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	3310      	adds	r3, #16
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4413      	add	r3, r2
 80082e8:	3304      	adds	r3, #4
 80082ea:	e00b      	b.n	8008304 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	3304      	adds	r3, #4
 8008304:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2202      	movs	r2, #2
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fbfb 	bl	8008b0e <USBD_CtlSendData>
              break;
 8008318:	e06a      	b.n	80083f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800831a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da11      	bge.n	8008346 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	f003 020f 	and.w	r2, r3, #15
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3318      	adds	r3, #24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d117      	bne.n	800836c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb7b 	bl	8008a3a <USBD_CtlError>
                  break;
 8008344:	e054      	b.n	80083f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	f003 020f 	and.w	r2, r3, #15
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fb68 	bl	8008a3a <USBD_CtlError>
                  break;
 800836a:	e041      	b.n	80083f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800836c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	da0b      	bge.n	800838c <USBD_StdEPReq+0x240>
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	3310      	adds	r3, #16
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	4413      	add	r3, r2
 8008388:	3304      	adds	r3, #4
 800838a:	e00b      	b.n	80083a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	3304      	adds	r3, #4
 80083a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <USBD_StdEPReq+0x266>
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b80      	cmp	r3, #128	; 0x80
 80083b0:	d103      	bne.n	80083ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e00e      	b.n	80083d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 ffb0 	bl	8009324 <USBD_LL_IsStallEP>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2201      	movs	r2, #1
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	e002      	b.n	80083d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2202      	movs	r2, #2
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fb95 	bl	8008b0e <USBD_CtlSendData>
              break;
 80083e4:	e004      	b.n	80083f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb26 	bl	8008a3a <USBD_CtlError>
              break;
 80083ee:	bf00      	nop
          }
          break;
 80083f0:	e004      	b.n	80083fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb20 	bl	8008a3a <USBD_CtlError>
          break;
 80083fa:	bf00      	nop
      }
      break;
 80083fc:	e004      	b.n	8008408 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fb1a 	bl	8008a3a <USBD_CtlError>
      break;
 8008406:	bf00      	nop
  }

  return ret;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	0a1b      	lsrs	r3, r3, #8
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	2b06      	cmp	r3, #6
 8008436:	f200 8128 	bhi.w	800868a <USBD_GetDescriptor+0x276>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <USBD_GetDescriptor+0x2c>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008475 	.word	0x08008475
 8008448:	080084b5 	.word	0x080084b5
 800844c:	0800868b 	.word	0x0800868b
 8008450:	0800868b 	.word	0x0800868b
 8008454:	0800862b 	.word	0x0800862b
 8008458:	08008657 	.word	0x08008657
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7c12      	ldrb	r2, [r2, #16]
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
      break;
 8008472:	e112      	b.n	800869a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7c1b      	ldrb	r3, [r3, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10d      	bne.n	8008498 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f107 0208 	add.w	r2, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	2202      	movs	r2, #2
 8008494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008496:	e100      	b.n	800869a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	f107 0208 	add.w	r2, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	2202      	movs	r2, #2
 80084b0:	701a      	strb	r2, [r3, #0]
      break;
 80084b2:	e0f2      	b.n	800869a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	885b      	ldrh	r3, [r3, #2]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	f200 80ac 	bhi.w	8008618 <USBD_GetDescriptor+0x204>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBD_GetDescriptor+0xb4>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084e1 	.word	0x080084e1
 80084cc:	08008515 	.word	0x08008515
 80084d0:	08008549 	.word	0x08008549
 80084d4:	0800857d 	.word	0x0800857d
 80084d8:	080085b1 	.word	0x080085b1
 80084dc:	080085e5 	.word	0x080085e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	7c12      	ldrb	r2, [r2, #16]
 80084f8:	f107 0108 	add.w	r1, r7, #8
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008502:	e091      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa97 	bl	8008a3a <USBD_CtlError>
            err++;
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	3301      	adds	r3, #1
 8008510:	72fb      	strb	r3, [r7, #11]
          break;
 8008512:	e089      	b.n	8008628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 0108 	add.w	r1, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008536:	e077      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa7d 	bl	8008a3a <USBD_CtlError>
            err++;
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	3301      	adds	r3, #1
 8008544:	72fb      	strb	r3, [r7, #11]
          break;
 8008546:	e06f      	b.n	8008628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856a:	e05d      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa63 	bl	8008a3a <USBD_CtlError>
            err++;
 8008574:	7afb      	ldrb	r3, [r7, #11]
 8008576:	3301      	adds	r3, #1
 8008578:	72fb      	strb	r3, [r7, #11]
          break;
 800857a:	e055      	b.n	8008628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	7c12      	ldrb	r2, [r2, #16]
 8008594:	f107 0108 	add.w	r1, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800859e:	e043      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa49 	bl	8008a3a <USBD_CtlError>
            err++;
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	3301      	adds	r3, #1
 80085ac:	72fb      	strb	r3, [r7, #11]
          break;
 80085ae:	e03b      	b.n	8008628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e029      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa2f 	bl	8008a3a <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e021      	b.n	8008628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e00f      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa15 	bl	8008a3a <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e007      	b.n	8008628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa0d 	bl	8008a3a <USBD_CtlError>
          err++;
 8008620:	7afb      	ldrb	r3, [r7, #11]
 8008622:	3301      	adds	r3, #1
 8008624:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008626:	e038      	b.n	800869a <USBD_GetDescriptor+0x286>
 8008628:	e037      	b.n	800869a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7c1b      	ldrb	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	f107 0208 	add.w	r2, r7, #8
 800863e:	4610      	mov	r0, r2
 8008640:	4798      	blx	r3
 8008642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008644:	e029      	b.n	800869a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9f6 	bl	8008a3a <USBD_CtlError>
        err++;
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	3301      	adds	r3, #1
 8008652:	72fb      	strb	r3, [r7, #11]
      break;
 8008654:	e021      	b.n	800869a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7c1b      	ldrb	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10d      	bne.n	800867a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f107 0208 	add.w	r2, r7, #8
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
 800866e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	2207      	movs	r2, #7
 8008676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008678:	e00f      	b.n	800869a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9dc 	bl	8008a3a <USBD_CtlError>
        err++;
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	3301      	adds	r3, #1
 8008686:	72fb      	strb	r3, [r7, #11]
      break;
 8008688:	e007      	b.n	800869a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9d4 	bl	8008a3a <USBD_CtlError>
      err++;
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	3301      	adds	r3, #1
 8008696:	72fb      	strb	r3, [r7, #11]
      break;
 8008698:	bf00      	nop
  }

  if (err != 0U)
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11c      	bne.n	80086da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80086a0:	893b      	ldrh	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <USBD_GetDescriptor+0x2b6>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88db      	ldrh	r3, [r3, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	88da      	ldrh	r2, [r3, #6]
 80086b2:	893b      	ldrh	r3, [r7, #8]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	bf28      	it	cs
 80086b8:	4613      	movcs	r3, r2
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086be:	893b      	ldrh	r3, [r7, #8]
 80086c0:	461a      	mov	r2, r3
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa22 	bl	8008b0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	88db      	ldrh	r3, [r3, #6]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa79 	bl	8008bca <USBD_CtlSendStatus>
 80086d8:	e000      	b.n	80086dc <USBD_GetDescriptor+0x2c8>
    return;
 80086da:	bf00      	nop
    }
  }
}
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop

080086e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d130      	bne.n	8008758 <USBD_SetAddress+0x74>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88db      	ldrh	r3, [r3, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d12c      	bne.n	8008758 <USBD_SetAddress+0x74>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	885b      	ldrh	r3, [r3, #2]
 8008702:	2b7f      	cmp	r3, #127	; 0x7f
 8008704:	d828      	bhi.n	8008758 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	885b      	ldrh	r3, [r3, #2]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	2b03      	cmp	r3, #3
 800871a:	d104      	bne.n	8008726 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f98b 	bl	8008a3a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008724:	e01d      	b.n	8008762 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7bfa      	ldrb	r2, [r7, #15]
 800872a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fe22 	bl	800937c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa46 	bl	8008bca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874c:	e009      	b.n	8008762 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	e004      	b.n	8008762 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f96d 	bl	8008a3a <USBD_CtlError>
  }
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	b2da      	uxtb	r2, r3
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <USBD_SetConfig+0x118>)
 800877e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008780:	4b40      	ldr	r3, [pc, #256]	; (8008884 <USBD_SetConfig+0x118>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d904      	bls.n	8008792 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f955 	bl	8008a3a <USBD_CtlError>
 8008790:	e075      	b.n	800887e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008798:	2b02      	cmp	r3, #2
 800879a:	d002      	beq.n	80087a2 <USBD_SetConfig+0x36>
 800879c:	2b03      	cmp	r3, #3
 800879e:	d023      	beq.n	80087e8 <USBD_SetConfig+0x7c>
 80087a0:	e062      	b.n	8008868 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80087a2:	4b38      	ldr	r3, [pc, #224]	; (8008884 <USBD_SetConfig+0x118>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01a      	beq.n	80087e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80087aa:	4b36      	ldr	r3, [pc, #216]	; (8008884 <USBD_SetConfig+0x118>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2203      	movs	r2, #3
 80087b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087bc:	4b31      	ldr	r3, [pc, #196]	; (8008884 <USBD_SetConfig+0x118>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff f9e8 	bl	8007b98 <USBD_SetClassConfig>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d104      	bne.n	80087d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f932 	bl	8008a3a <USBD_CtlError>
            return;
 80087d6:	e052      	b.n	800887e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f9f6 	bl	8008bca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087de:	e04e      	b.n	800887e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9f2 	bl	8008bca <USBD_CtlSendStatus>
        break;
 80087e6:	e04a      	b.n	800887e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80087e8:	4b26      	ldr	r3, [pc, #152]	; (8008884 <USBD_SetConfig+0x118>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d112      	bne.n	8008816 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80087f8:	4b22      	ldr	r3, [pc, #136]	; (8008884 <USBD_SetConfig+0x118>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008802:	4b20      	ldr	r3, [pc, #128]	; (8008884 <USBD_SetConfig+0x118>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff f9e4 	bl	8007bd6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f9db 	bl	8008bca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008814:	e033      	b.n	800887e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008816:	4b1b      	ldr	r3, [pc, #108]	; (8008884 <USBD_SetConfig+0x118>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d01d      	beq.n	8008860 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff f9d2 	bl	8007bd6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <USBD_SetConfig+0x118>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <USBD_SetConfig+0x118>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff f9a8 	bl	8007b98 <USBD_SetClassConfig>
 8008848:	4603      	mov	r3, r0
 800884a:	2b02      	cmp	r3, #2
 800884c:	d104      	bne.n	8008858 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f8f2 	bl	8008a3a <USBD_CtlError>
            return;
 8008856:	e012      	b.n	800887e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9b6 	bl	8008bca <USBD_CtlSendStatus>
        break;
 800885e:	e00e      	b.n	800887e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f9b2 	bl	8008bca <USBD_CtlSendStatus>
        break;
 8008866:	e00a      	b.n	800887e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8e5 	bl	8008a3a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <USBD_SetConfig+0x118>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff f9ad 	bl	8007bd6 <USBD_ClrClassConfig>
        break;
 800887c:	bf00      	nop
    }
  }
}
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000230 	.word	0x20000230

08008888 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d004      	beq.n	80088a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f8cc 	bl	8008a3a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088a2:	e022      	b.n	80088ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	dc02      	bgt.n	80088b4 <USBD_GetConfig+0x2c>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dc03      	bgt.n	80088ba <USBD_GetConfig+0x32>
 80088b2:	e015      	b.n	80088e0 <USBD_GetConfig+0x58>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d00b      	beq.n	80088d0 <USBD_GetConfig+0x48>
 80088b8:	e012      	b.n	80088e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3308      	adds	r3, #8
 80088c4:	2201      	movs	r2, #1
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f920 	bl	8008b0e <USBD_CtlSendData>
        break;
 80088ce:	e00c      	b.n	80088ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3304      	adds	r3, #4
 80088d4:	2201      	movs	r2, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f918 	bl	8008b0e <USBD_CtlSendData>
        break;
 80088de:	e004      	b.n	80088ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f8a9 	bl	8008a3a <USBD_CtlError>
        break;
 80088e8:	bf00      	nop
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008902:	3b01      	subs	r3, #1
 8008904:	2b02      	cmp	r3, #2
 8008906:	d81e      	bhi.n	8008946 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d004      	beq.n	800891a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f891 	bl	8008a3a <USBD_CtlError>
        break;
 8008918:	e01a      	b.n	8008950 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f043 0202 	orr.w	r2, r3, #2
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	330c      	adds	r3, #12
 800893a:	2202      	movs	r2, #2
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8e5 	bl	8008b0e <USBD_CtlSendData>
      break;
 8008944:	e004      	b.n	8008950 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f876 	bl	8008a3a <USBD_CtlError>
      break;
 800894e:	bf00      	nop
  }
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d106      	bne.n	8008978 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f929 	bl	8008bca <USBD_CtlSendStatus>
  }
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	3b01      	subs	r3, #1
 8008992:	2b02      	cmp	r3, #2
 8008994:	d80b      	bhi.n	80089ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d10c      	bne.n	80089b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f90f 	bl	8008bca <USBD_CtlSendStatus>
      }
      break;
 80089ac:	e004      	b.n	80089b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f842 	bl	8008a3a <USBD_CtlError>
      break;
 80089b6:	e000      	b.n	80089ba <USBD_ClrFeature+0x3a>
      break;
 80089b8:	bf00      	nop
  }
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	785a      	ldrb	r2, [r3, #1]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	3302      	adds	r3, #2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	3303      	adds	r3, #3
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	3304      	adds	r3, #4
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	3305      	adds	r3, #5
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	3306      	adds	r3, #6
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	80da      	strh	r2, [r3, #6]

}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr

08008a3a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a44:	2180      	movs	r1, #128	; 0x80
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fc2e 	bl	80092a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fc2a 	bl	80092a8 <USBD_LL_StallEP>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d032      	beq.n	8008ad8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f834 	bl	8008ae0 <USBD_GetLen>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	75fa      	strb	r2, [r7, #23]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	75fa      	strb	r2, [r7, #23]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008aa8:	e012      	b.n	8008ad0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	60fa      	str	r2, [r7, #12]
 8008ab0:	7dfa      	ldrb	r2, [r7, #23]
 8008ab2:	1c51      	adds	r1, r2, #1
 8008ab4:	75f9      	strb	r1, [r7, #23]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	440a      	add	r2, r1
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	75fa      	strb	r2, [r7, #23]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4413      	add	r3, r2
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e8      	bne.n	8008aaa <USBD_GetString+0x4e>
    }
  }
}
 8008ad8:	bf00      	nop
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008aec:	e005      	b.n	8008afa <USBD_GetLen+0x1a>
  {
    len++;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	3301      	adds	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f5      	bne.n	8008aee <USBD_GetLen+0xe>
  }

  return len;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr

08008b0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b24:	88fa      	ldrh	r2, [r7, #6]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b2a:	88fa      	ldrh	r2, [r7, #6]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b30:	88fb      	ldrh	r3, [r7, #6]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fc3f 	bl	80093ba <USBD_LL_Transmit>

  return USBD_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	4613      	mov	r3, r2
 8008b52:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	2100      	movs	r1, #0
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fc2d 	bl	80093ba <USBD_LL_Transmit>

  return USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b88:	88fa      	ldrh	r2, [r7, #6]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	2100      	movs	r1, #0
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fc32 	bl	8009400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fc20 	bl	8009400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2100      	movs	r1, #0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fbea 	bl	80093ba <USBD_LL_Transmit>

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c00:	2300      	movs	r3, #0
 8008c02:	2200      	movs	r2, #0
 8008c04:	2100      	movs	r1, #0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fbfa 	bl	8009400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4912      	ldr	r1, [pc, #72]	; (8008c68 <MX_USB_DEVICE_Init+0x50>)
 8008c20:	4812      	ldr	r0, [pc, #72]	; (8008c6c <MX_USB_DEVICE_Init+0x54>)
 8008c22:	f7fe ff5f 	bl	8007ae4 <USBD_Init>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c2c:	f7f7 fc8a 	bl	8000544 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c30:	490f      	ldr	r1, [pc, #60]	; (8008c70 <MX_USB_DEVICE_Init+0x58>)
 8008c32:	480e      	ldr	r0, [pc, #56]	; (8008c6c <MX_USB_DEVICE_Init+0x54>)
 8008c34:	f7fe ff81 	bl	8007b3a <USBD_RegisterClass>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c3e:	f7f7 fc81 	bl	8000544 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c42:	490c      	ldr	r1, [pc, #48]	; (8008c74 <MX_USB_DEVICE_Init+0x5c>)
 8008c44:	4809      	ldr	r0, [pc, #36]	; (8008c6c <MX_USB_DEVICE_Init+0x54>)
 8008c46:	f7fe fee1 	bl	8007a0c <USBD_CDC_RegisterInterface>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c50:	f7f7 fc78 	bl	8000544 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c54:	4805      	ldr	r0, [pc, #20]	; (8008c6c <MX_USB_DEVICE_Init+0x54>)
 8008c56:	f7fe ff89 	bl	8007b6c <USBD_Start>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c60:	f7f7 fc70 	bl	8000544 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c64:	bf00      	nop
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20000130 	.word	0x20000130
 8008c6c:	20000234 	.word	0x20000234
 8008c70:	2000001c 	.word	0x2000001c
 8008c74:	20000120 	.word	0x20000120

08008c78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4905      	ldr	r1, [pc, #20]	; (8008c94 <CDC_Init_FS+0x1c>)
 8008c80:	4805      	ldr	r0, [pc, #20]	; (8008c98 <CDC_Init_FS+0x20>)
 8008c82:	f7fe fed9 	bl	8007a38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c86:	4905      	ldr	r1, [pc, #20]	; (8008c9c <CDC_Init_FS+0x24>)
 8008c88:	4803      	ldr	r0, [pc, #12]	; (8008c98 <CDC_Init_FS+0x20>)
 8008c8a:	f7fe feee 	bl	8007a6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200008e0 	.word	0x200008e0
 8008c98:	20000234 	.word	0x20000234
 8008c9c:	200004f8 	.word	0x200004f8

08008ca0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ca4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr
	...

08008cb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b23      	cmp	r3, #35	; 0x23
 8008cc4:	d84a      	bhi.n	8008d5c <CDC_Control_FS+0xac>
 8008cc6:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <CDC_Control_FS+0x1c>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008d5d 	.word	0x08008d5d
 8008cd0:	08008d5d 	.word	0x08008d5d
 8008cd4:	08008d5d 	.word	0x08008d5d
 8008cd8:	08008d5d 	.word	0x08008d5d
 8008cdc:	08008d5d 	.word	0x08008d5d
 8008ce0:	08008d5d 	.word	0x08008d5d
 8008ce4:	08008d5d 	.word	0x08008d5d
 8008ce8:	08008d5d 	.word	0x08008d5d
 8008cec:	08008d5d 	.word	0x08008d5d
 8008cf0:	08008d5d 	.word	0x08008d5d
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008d5d 	.word	0x08008d5d
 8008d00:	08008d5d 	.word	0x08008d5d
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008d5d 	.word	0x08008d5d
 8008d10:	08008d5d 	.word	0x08008d5d
 8008d14:	08008d5d 	.word	0x08008d5d
 8008d18:	08008d5d 	.word	0x08008d5d
 8008d1c:	08008d5d 	.word	0x08008d5d
 8008d20:	08008d5d 	.word	0x08008d5d
 8008d24:	08008d5d 	.word	0x08008d5d
 8008d28:	08008d5d 	.word	0x08008d5d
 8008d2c:	08008d5d 	.word	0x08008d5d
 8008d30:	08008d5d 	.word	0x08008d5d
 8008d34:	08008d5d 	.word	0x08008d5d
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008d5d 	.word	0x08008d5d
 8008d54:	08008d5d 	.word	0x08008d5d
 8008d58:	08008d5d 	.word	0x08008d5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d5c:	bf00      	nop
  }

  return (USBD_OK);
 8008d5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop

08008d6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4805      	ldr	r0, [pc, #20]	; (8008d90 <CDC_Receive_FS+0x24>)
 8008d7a:	f7fe fe76 	bl	8007a6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d7e:	4804      	ldr	r0, [pc, #16]	; (8008d90 <CDC_Receive_FS+0x24>)
 8008d80:	f7fe fe86 	bl	8007a90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000234 	.word	0x20000234

08008d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2212      	movs	r2, #18
 8008da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008da6:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	2000014c 	.word	0x2000014c

08008db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2204      	movs	r2, #4
 8008dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000160 	.word	0x20000160

08008ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df4:	f7ff fe32 	bl	8008a5c <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e00:	f7ff fe2c 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000cc8 	.word	0x20000cc8
 8008e14:	08009768 	.word	0x08009768

08008e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4904      	ldr	r1, [pc, #16]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e28:	4804      	ldr	r0, [pc, #16]	; (8008e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e2a:	f7ff fe17 	bl	8008a5c <USBD_GetString>
  return USBD_StrDesc;
 8008e2e:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000cc8 	.word	0x20000cc8
 8008e3c:	08009780 	.word	0x08009780

08008e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	221a      	movs	r2, #26
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e52:	f000 f843 	bl	8008edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e56:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000164 	.word	0x20000164

08008e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e7c:	f7ff fdee 	bl	8008a5c <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e88:	f7ff fde8 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000cc8 	.word	0x20000cc8
 8008e9c:	08009794 	.word	0x08009794

08008ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4907      	ldr	r1, [pc, #28]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb6:	4808      	ldr	r0, [pc, #32]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb8:	f7ff fdd0 	bl	8008a5c <USBD_GetString>
 8008ebc:	e004      	b.n	8008ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec4:	f7ff fdca 	bl	8008a5c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000cc8 	.word	0x20000cc8
 8008ed8:	080097a0 	.word	0x080097a0

08008edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <Get_SerialNum+0x44>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <Get_SerialNum+0x48>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <Get_SerialNum+0x4c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f02:	2208      	movs	r2, #8
 8008f04:	4909      	ldr	r1, [pc, #36]	; (8008f2c <Get_SerialNum+0x50>)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f814 	bl	8008f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	4908      	ldr	r1, [pc, #32]	; (8008f30 <Get_SerialNum+0x54>)
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f000 f80f 	bl	8008f34 <IntToUnicode>
  }
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	1ffff7e8 	.word	0x1ffff7e8
 8008f24:	1ffff7ec 	.word	0x1ffff7ec
 8008f28:	1ffff7f0 	.word	0x1ffff7f0
 8008f2c:	20000166 	.word	0x20000166
 8008f30:	20000176 	.word	0x20000176

08008f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
 8008f4a:	e027      	b.n	8008f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d80b      	bhi.n	8008f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	0f1b      	lsrs	r3, r3, #28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	440b      	add	r3, r1
 8008f64:	3230      	adds	r2, #48	; 0x30
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e00a      	b.n	8008f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0f1b      	lsrs	r3, r3, #28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3237      	adds	r2, #55	; 0x37
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	7dfa      	ldrb	r2, [r7, #23]
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3d3      	bcc.n	8008f4c <IntToUnicode+0x18>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr

08008fb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <HAL_PCD_MspInit+0x44>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d113      	bne.n	8008fea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <HAL_PCD_MspInit+0x48>)
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	4a0c      	ldr	r2, [pc, #48]	; (8008ff8 <HAL_PCD_MspInit+0x48>)
 8008fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fcc:	61d3      	str	r3, [r2, #28]
 8008fce:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <HAL_PCD_MspInit+0x48>)
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	2014      	movs	r0, #20
 8008fe0:	f7f7 fd6e 	bl	8000ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fe4:	2014      	movs	r0, #20
 8008fe6:	f7f7 fd97 	bl	8000b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40005c00 	.word	0x40005c00
 8008ff8:	40021000 	.word	0x40021000

08008ffc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7fe fdf2 	bl	8007bfc <USBD_LL_SetupStage>
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	440b      	add	r3, r1
 8009040:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	4619      	mov	r1, r3
 800904a:	f7fe fe24 	bl	8007c96 <USBD_LL_DataOutStage>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	333c      	adds	r3, #60	; 0x3c
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	4619      	mov	r1, r3
 800907e:	f7fe fe7b 	bl	8007d78 <USBD_LL_DataInStage>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe ff8b 	bl	8007fb4 <USBD_LL_SOF>
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090ae:	2301      	movs	r3, #1
 80090b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d001      	beq.n	80090be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090ba:	f7f7 fa43 	bl	8000544 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090c4:	7bfa      	ldrb	r2, [r7, #15]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe ff3b 	bl	8007f44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fef4 	bl	8007ec2 <USBD_LL_Reset>
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe ff35 	bl	8007f62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <HAL_PCD_SuspendCallback+0x30>)
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	4a03      	ldr	r2, [pc, #12]	; (8009114 <HAL_PCD_SuspendCallback+0x30>)
 8009106:	f043 0306 	orr.w	r3, r3, #6
 800910a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	e000ed00 	.word	0xe000ed00

08009118 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe ff2f 	bl	8007f8a <USBD_LL_Resume>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800913c:	4a28      	ldr	r2, [pc, #160]	; (80091e0 <USBD_LL_Init+0xac>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <USBD_LL_Init+0xac>)
 8009148:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800914c:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <USBD_LL_Init+0xac>)
 800914e:	4a25      	ldr	r2, [pc, #148]	; (80091e4 <USBD_LL_Init+0xb0>)
 8009150:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009152:	4b23      	ldr	r3, [pc, #140]	; (80091e0 <USBD_LL_Init+0xac>)
 8009154:	2208      	movs	r2, #8
 8009156:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009158:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <USBD_LL_Init+0xac>)
 800915a:	2202      	movs	r2, #2
 800915c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800915e:	4b20      	ldr	r3, [pc, #128]	; (80091e0 <USBD_LL_Init+0xac>)
 8009160:	2200      	movs	r2, #0
 8009162:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009164:	4b1e      	ldr	r3, [pc, #120]	; (80091e0 <USBD_LL_Init+0xac>)
 8009166:	2200      	movs	r2, #0
 8009168:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800916a:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <USBD_LL_Init+0xac>)
 800916c:	2200      	movs	r2, #0
 800916e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009170:	481b      	ldr	r0, [pc, #108]	; (80091e0 <USBD_LL_Init+0xac>)
 8009172:	f7f8 f807 	bl	8001184 <HAL_PCD_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800917c:	f7f7 f9e2 	bl	8000544 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009186:	2318      	movs	r3, #24
 8009188:	2200      	movs	r2, #0
 800918a:	2100      	movs	r1, #0
 800918c:	f7f9 fc88 	bl	8002aa0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009196:	2358      	movs	r3, #88	; 0x58
 8009198:	2200      	movs	r2, #0
 800919a:	2180      	movs	r1, #128	; 0x80
 800919c:	f7f9 fc80 	bl	8002aa0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091a6:	23c0      	movs	r3, #192	; 0xc0
 80091a8:	2200      	movs	r2, #0
 80091aa:	2181      	movs	r1, #129	; 0x81
 80091ac:	f7f9 fc78 	bl	8002aa0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091ba:	2200      	movs	r2, #0
 80091bc:	2101      	movs	r1, #1
 80091be:	f7f9 fc6f 	bl	8002aa0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091cc:	2200      	movs	r2, #0
 80091ce:	2182      	movs	r1, #130	; 0x82
 80091d0:	f7f9 fc66 	bl	8002aa0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000ec8 	.word	0x20000ec8
 80091e4:	40005c00 	.word	0x40005c00

080091e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f8 f8d8 	bl	80013b4 <HAL_PCD_Start>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f94e 	bl	80094ac <USBD_Get_USB_Status>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009214:	7bbb      	ldrb	r3, [r7, #14]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	461a      	mov	r2, r3
 800922c:	4603      	mov	r3, r0
 800922e:	70fb      	strb	r3, [r7, #3]
 8009230:	460b      	mov	r3, r1
 8009232:	70bb      	strb	r3, [r7, #2]
 8009234:	4613      	mov	r3, r2
 8009236:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009246:	78bb      	ldrb	r3, [r7, #2]
 8009248:	883a      	ldrh	r2, [r7, #0]
 800924a:	78f9      	ldrb	r1, [r7, #3]
 800924c:	f7f8 fa50 	bl	80016f0 <HAL_PCD_EP_Open>
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f928 	bl	80094ac <USBD_Get_USB_Status>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009260:	7bbb      	ldrb	r3, [r7, #14]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f7f8 fa97 	bl	80017bc <HAL_PCD_EP_Close>
 800928e:	4603      	mov	r3, r0
 8009290:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 f909 	bl	80094ac <USBD_Get_USB_Status>
 800929a:	4603      	mov	r3, r0
 800929c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929e:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7f8 fb57 	bl	800197a <HAL_PCD_EP_SetStall>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f8ea 	bl	80094ac <USBD_Get_USB_Status>
 80092d8:	4603      	mov	r3, r0
 80092da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f7f8 fb98 	bl	8001a3a <HAL_PCD_EP_ClrStall>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f8cb 	bl	80094ac <USBD_Get_USB_Status>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800931a:	7bbb      	ldrb	r3, [r7, #14]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009336:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da0c      	bge.n	800935a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009346:	68f9      	ldr	r1, [r7, #12]
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	440b      	add	r3, r1
 8009354:	3302      	adds	r3, #2
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	e00b      	b.n	8009372 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009360:	68f9      	ldr	r1, [r7, #12]
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	440b      	add	r3, r1
 800936c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009370:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f7f8 f983 	bl	80016a6 <HAL_PCD_SetAddress>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f880 	bl	80094ac <USBD_Get_USB_Status>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b086      	sub	sp, #24
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	461a      	mov	r2, r3
 80093c6:	460b      	mov	r3, r1
 80093c8:	72fb      	strb	r3, [r7, #11]
 80093ca:	4613      	mov	r3, r2
 80093cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093dc:	893b      	ldrh	r3, [r7, #8]
 80093de:	7af9      	ldrb	r1, [r7, #11]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	f7f8 fa87 	bl	80018f4 <HAL_PCD_EP_Transmit>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f85d 	bl	80094ac <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	461a      	mov	r2, r3
 800940c:	460b      	mov	r3, r1
 800940e:	72fb      	strb	r3, [r7, #11]
 8009410:	4613      	mov	r3, r2
 8009412:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009422:	893b      	ldrh	r3, [r7, #8]
 8009424:	7af9      	ldrb	r1, [r7, #11]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	f7f8 fa10 	bl	800184c <HAL_PCD_EP_Receive>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f83a 	bl	80094ac <USBD_Get_USB_Status>
 8009438:	4603      	mov	r3, r0
 800943a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800943c:	7dbb      	ldrb	r3, [r7, #22]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7f8 fa32 	bl	80018c6 <HAL_PCD_EP_GetRxCount>
 8009462:	4603      	mov	r3, r0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <USBD_static_malloc+0x14>)
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr
 8009480:	200011b4 	.word	0x200011b4

08009484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr

08009496 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80094a2:	bf00      	nop
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d817      	bhi.n	80094f0 <USBD_Get_USB_Status+0x44>
 80094c0:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_Get_USB_Status+0x1c>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094df 	.word	0x080094df
 80094d0:	080094e5 	.word	0x080094e5
 80094d4:	080094eb 	.word	0x080094eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e00b      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094de:	2302      	movs	r3, #2
 80094e0:	73fb      	strb	r3, [r7, #15]
    break;
 80094e2:	e008      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	e005      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ea:	2302      	movs	r3, #2
 80094ec:	73fb      	strb	r3, [r7, #15]
    break;
 80094ee:	e002      	b.n	80094f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094f0:	2302      	movs	r3, #2
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	bf00      	nop
  }
  return usb_status;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <__libc_init_array>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	2600      	movs	r6, #0
 8009508:	4d0c      	ldr	r5, [pc, #48]	; (800953c <__libc_init_array+0x38>)
 800950a:	4c0d      	ldr	r4, [pc, #52]	; (8009540 <__libc_init_array+0x3c>)
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	42a6      	cmp	r6, r4
 8009512:	d109      	bne.n	8009528 <__libc_init_array+0x24>
 8009514:	f000 f822 	bl	800955c <_init>
 8009518:	2600      	movs	r6, #0
 800951a:	4d0a      	ldr	r5, [pc, #40]	; (8009544 <__libc_init_array+0x40>)
 800951c:	4c0a      	ldr	r4, [pc, #40]	; (8009548 <__libc_init_array+0x44>)
 800951e:	1b64      	subs	r4, r4, r5
 8009520:	10a4      	asrs	r4, r4, #2
 8009522:	42a6      	cmp	r6, r4
 8009524:	d105      	bne.n	8009532 <__libc_init_array+0x2e>
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	f855 3b04 	ldr.w	r3, [r5], #4
 800952c:	4798      	blx	r3
 800952e:	3601      	adds	r6, #1
 8009530:	e7ee      	b.n	8009510 <__libc_init_array+0xc>
 8009532:	f855 3b04 	ldr.w	r3, [r5], #4
 8009536:	4798      	blx	r3
 8009538:	3601      	adds	r6, #1
 800953a:	e7f2      	b.n	8009522 <__libc_init_array+0x1e>
 800953c:	080097c8 	.word	0x080097c8
 8009540:	080097c8 	.word	0x080097c8
 8009544:	080097c8 	.word	0x080097c8
 8009548:	080097cc 	.word	0x080097cc

0800954c <memset>:
 800954c:	4603      	mov	r3, r0
 800954e:	4402      	add	r2, r0
 8009550:	4293      	cmp	r3, r2
 8009552:	d100      	bne.n	8009556 <memset+0xa>
 8009554:	4770      	bx	lr
 8009556:	f803 1b01 	strb.w	r1, [r3], #1
 800955a:	e7f9      	b.n	8009550 <memset+0x4>

0800955c <_init>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	bf00      	nop
 8009560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009562:	bc08      	pop	{r3}
 8009564:	469e      	mov	lr, r3
 8009566:	4770      	bx	lr

08009568 <_fini>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr
