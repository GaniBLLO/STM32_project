
New_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009858  08009858  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009858  08009858  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009858  08009858  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000180  080099e0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  080099e0  00021400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013962  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003234  00000000  00000000  00033b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00036d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00037f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8a0  00000000  00000000  00038fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e89  00000000  00000000  00053888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f088  00000000  00000000  0006a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  000f97ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080095ec 	.word	0x080095ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080095ec 	.word	0x080095ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb53 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83d 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f945 	bl	80003e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f895 	bl	800028c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f008 fda1 	bl	8008ca8 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f915 	bl	8000394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800016a:	4816      	ldr	r0, [pc, #88]	; (80001c4 <main+0x78>)
 800016c:	f003 fb70 	bl	8003850 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(regym == 3){
 8000170:	4b15      	ldr	r3, [pc, #84]	; (80001c8 <main+0x7c>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b03      	cmp	r3, #3
 8000176:	d1fb      	bne.n	8000170 <main+0x24>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2178      	movs	r1, #120	; 0x78
 800017c:	4813      	ldr	r0, [pc, #76]	; (80001cc <main+0x80>)
 800017e:	f000 ff49 	bl	8001014 <HAL_GPIO_WritePin>
		  for(int i = 0; i < 4095; i++){
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	e005      	b.n	8000194 <main+0x48>
			  TIM1->CCR1 = i;
 8000188:	4a11      	ldr	r2, [pc, #68]	; (80001d0 <main+0x84>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	6353      	str	r3, [r2, #52]	; 0x34
		  for(int i = 0; i < 4095; i++){
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f640 72fe 	movw	r2, #4094	; 0xffe
 800019a:	4293      	cmp	r3, r2
 800019c:	ddf4      	ble.n	8000188 <main+0x3c>
		  }
		  for(int i = 0; i < 4095; i++){
 800019e:	2300      	movs	r3, #0
 80001a0:	603b      	str	r3, [r7, #0]
 80001a2:	e008      	b.n	80001b6 <main+0x6a>
			  TIM1->CCR1 = 4095 - i;
 80001a4:	683b      	ldr	r3, [r7, #0]
 80001a6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80001aa:	330f      	adds	r3, #15
 80001ac:	4a08      	ldr	r2, [pc, #32]	; (80001d0 <main+0x84>)
 80001ae:	6353      	str	r3, [r2, #52]	; 0x34
		  for(int i = 0; i < 4095; i++){
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	3301      	adds	r3, #1
 80001b4:	603b      	str	r3, [r7, #0]
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80001bc:	4293      	cmp	r3, r2
 80001be:	ddf1      	ble.n	80001a4 <main+0x58>
	  if(regym == 3){
 80001c0:	e7d6      	b.n	8000170 <main+0x24>
 80001c2:	bf00      	nop
 80001c4:	2000019c 	.word	0x2000019c
 80001c8:	20000000 	.word	0x20000000
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40012c00 	.word	0x40012c00

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f009 f9fa 	bl	80095dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fc5a 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000236:	f000 f983 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2101      	movs	r1, #1
 8000256:	4618      	mov	r0, r3
 8000258:	f002 ffb2 	bl	80031c0 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000262:	f000 f96d 	bl	8000540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000266:	2310      	movs	r3, #16
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800026a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800026e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f003 f9e2 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800027e:	f000 f95f 	bl	8000540 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3750      	adds	r7, #80	; 0x50
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b092      	sub	sp, #72	; 0x48
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800029c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2220      	movs	r2, #32
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f009 f990 	bl	80095dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002bc:	4b33      	ldr	r3, [pc, #204]	; (800038c <MX_TIM1_Init+0x100>)
 80002be:	4a34      	ldr	r2, [pc, #208]	; (8000390 <MX_TIM1_Init+0x104>)
 80002c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 255;
 80002c2:	4b32      	ldr	r3, [pc, #200]	; (800038c <MX_TIM1_Init+0x100>)
 80002c4:	22ff      	movs	r2, #255	; 0xff
 80002c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <MX_TIM1_Init+0x100>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <MX_TIM1_Init+0x100>)
 80002d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d6:	4b2d      	ldr	r3, [pc, #180]	; (800038c <MX_TIM1_Init+0x100>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002dc:	4b2b      	ldr	r3, [pc, #172]	; (800038c <MX_TIM1_Init+0x100>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_TIM1_Init+0x100>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002e8:	4828      	ldr	r0, [pc, #160]	; (800038c <MX_TIM1_Init+0x100>)
 80002ea:	f003 fb1d 	bl	8003928 <HAL_TIM_PWM_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80002f4:	f000 f924 	bl	8000540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000304:	4619      	mov	r1, r3
 8000306:	4821      	ldr	r0, [pc, #132]	; (800038c <MX_TIM1_Init+0x100>)
 8000308:	f004 f8ca 	bl	80044a0 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000312:	f000 f915 	bl	8000540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000316:	2360      	movs	r3, #96	; 0x60
 8000318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031e:	2300      	movs	r3, #0
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000322:	2300      	movs	r3, #0
 8000324:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800032e:	2300      	movs	r3, #0
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <MX_TIM1_Init+0x100>)
 800033c:	f003 fca6 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000346:	f000 f8fb 	bl	8000540 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800035e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <MX_TIM1_Init+0x100>)
 800036e:	f004 f941 	bl	80045f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000378:	f000 f8e2 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800037c:	4803      	ldr	r0, [pc, #12]	; (800038c <MX_TIM1_Init+0x100>)
 800037e:	f000 f947 	bl	8000610 <HAL_TIM_MspPostInit>

}
 8000382:	bf00      	nop
 8000384:	3748      	adds	r7, #72	; 0x48
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000019c 	.word	0x2000019c
 8000390:	40012c00 	.word	0x40012c00

08000394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <MX_USART1_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003cc:	f004 f9ea 	bl	80047a4 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f000 f8b3 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200001e4 	.word	0x200001e4
 80003e4:	40013800 	.word	0x40013800

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0xb8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <MX_GPIO_Init+0xb8>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000444:	2330      	movs	r3, #48	; 0x30
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <MX_GPIO_Init+0xbc>)
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4814      	ldr	r0, [pc, #80]	; (80004a8 <MX_GPIO_Init+0xc0>)
 8000458:	f000 fb6e 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800045c:	2378      	movs	r3, #120	; 0x78
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2302      	movs	r3, #2
 800046a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	4619      	mov	r1, r3
 8000472:	480e      	ldr	r0, [pc, #56]	; (80004ac <MX_GPIO_Init+0xc4>)
 8000474:	f000 fb60 	bl	8000b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	200a      	movs	r0, #10
 800047e:	f000 fb0b 	bl	8000a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000482:	200a      	movs	r0, #10
 8000484:	f000 fb34 	bl	8000af0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	2017      	movs	r0, #23
 800048e:	f000 fb03 	bl	8000a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000492:	2017      	movs	r0, #23
 8000494:	f000 fb2c 	bl	8000af0 <HAL_NVIC_EnableIRQ>

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	10110000 	.word	0x10110000
 80004a8:	40010800 	.word	0x40010800
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	extern uint8_t regym;
	uint32_t tic = HAL_GetTick();
 80004b8:	f000 f9f8 	bl	80008ac <HAL_GetTick>
 80004bc:	60f8      	str	r0, [r7, #12]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d131      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x7c>
        {
        	if(regym == 1 && tic > 10){
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d108      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x32>
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b0a      	cmp	r3, #10
 80004d4:	d905      	bls.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x32>
        			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2178      	movs	r1, #120	; 0x78
 80004da:	4818      	ldr	r0, [pc, #96]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004dc:	f000 fd9a 	bl	8001014 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
			//  HAL_Delay(1000);
			  }

        }
}
 80004e0:	e024      	b.n	800052c <HAL_TIM_PeriodElapsedCallback+0x7c>
			else if(regym == 2){
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d120      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x7c>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2178      	movs	r1, #120	; 0x78
 80004ee:	4813      	ldr	r0, [pc, #76]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004f0:	f000 fd90 	bl	8001014 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80004f4:	2108      	movs	r1, #8
 80004f6:	4811      	ldr	r0, [pc, #68]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004f8:	f000 fdbe 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80004fc:	2108      	movs	r1, #8
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000500:	f000 fdba 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000504:	2110      	movs	r1, #16
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000508:	f000 fdb6 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800050c:	2110      	movs	r1, #16
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000510:	f000 fdb2 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000514:	2120      	movs	r1, #32
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000518:	f000 fdae 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800051c:	2120      	movs	r1, #32
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000520:	f000 fdaa 	bl	8001078 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000528:	f000 fda6 	bl	8001078 <HAL_GPIO_TogglePin>
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40012c00 	.word	0x40012c00
 8000538:	20000000 	.word	0x20000000
 800053c:	40010c00 	.word	0x40010c00

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>

0800054a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <HAL_MspInit+0x5c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x5c>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_MspInit+0x60>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_MspInit+0x60>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010000 	.word	0x40010000

080005c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_TIM_PWM_MspInit+0x44>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d113      	bne.n	80005fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_TIM_PWM_MspInit+0x48>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_TIM_PWM_MspInit+0x48>)
 80005dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_TIM_PWM_MspInit+0x48>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2019      	movs	r0, #25
 80005f4:	f000 fa50 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005f8:	2019      	movs	r0, #25
 80005fa:	f000 fa79 	bl	8000af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40012c00 	.word	0x40012c00
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <HAL_TIM_MspPostInit+0x5c>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d118      	bne.n	8000662 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_TIM_MspPostInit+0x60>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_MspPostInit+0x60>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_TIM_MspPostInit+0x60>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2302      	movs	r3, #2
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <HAL_TIM_MspPostInit+0x64>)
 800065e:	f000 fa6b 	bl	8000b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40012c00 	.word	0x40012c00
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_UART_MspInit+0x8c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d131      	bne.n	80006fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <HAL_UART_MspInit+0x90>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_UART_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <HAL_UART_MspInit+0x94>)
 80006de:	f000 fa2b 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_MspInit+0x94>)
 80006f8:	f000 fa1e 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f897 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000762:	2010      	movs	r0, #16
 8000764:	f000 fcb0 	bl	80010c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000772:	f000 fe25 	bl	80013c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000ef4 	.word	0x20000ef4

08000780 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000784:	2020      	movs	r0, #32
 8000786:	f000 fc9f 	bl	80010c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <TIM1_UP_IRQHandler+0x10>)
 8000796:	f003 f971 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000019c 	.word	0x2000019c

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffe5 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f008 fedb 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fcb5 	bl	800014c <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80007ec:	08009860 	.word	0x08009860
  ldr r2, =_sbss
 80007f0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007f4:	20001400 	.word	0x20001400

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f923 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fea2 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f96a 	bl	8000b20 <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f918 	bl	8000a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000004 	.word	0x20000004
 8000880:	2000000c 	.word	0x2000000c
 8000884:	20000008 	.word	0x20000008

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	2000000c 	.word	0x2000000c
 80008a8:	20000228 	.word	0x20000228

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000228 	.word	0x20000228

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <__NVIC_EnableIRQ+0x34>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff90 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	d00f      	beq.n	8000a86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d00c      	beq.n	8000a86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b05      	cmp	r3, #5
 8000a70:	d009      	beq.n	8000a86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d006      	beq.n	8000a86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d003      	beq.n	8000a86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a7e:	2192      	movs	r1, #146	; 0x92
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000a82:	f7ff fd62 	bl	800054a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ff1a 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	08009604 	.word	0x08009604

08000a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d903      	bls.n	8000ab8 <HAL_NVIC_SetPriority+0x20>
 8000ab0:	21aa      	movs	r1, #170	; 0xaa
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <HAL_NVIC_SetPriority+0x54>)
 8000ab4:	f7ff fd49 	bl	800054a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d903      	bls.n	8000ac6 <HAL_NVIC_SetPriority+0x2e>
 8000abe:	21ab      	movs	r1, #171	; 0xab
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <HAL_NVIC_SetPriority+0x54>)
 8000ac2:	f7ff fd42 	bl	800054a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac6:	f7ff ff1f 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	6978      	ldr	r0, [r7, #20]
 8000ad2:	f7ff ff6d 	bl	80009b0 <NVIC_EncodePriority>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff3c 	bl	800095c <__NVIC_SetPriority>
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	08009604 	.word	0x08009604

08000af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da03      	bge.n	8000b0a <HAL_NVIC_EnableIRQ+0x1a>
 8000b02:	21be      	movs	r1, #190	; 0xbe
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_NVIC_EnableIRQ+0x2c>)
 8000b06:	f7ff fd20 	bl	800054a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff08 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	08009604 	.word	0x08009604

08000b20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff73 	bl	8000a14 <SysTick_Config>
 8000b2e:	4603      	mov	r3, r0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <HAL_GPIO_Init+0x270>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0x42>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a95      	ldr	r2, [pc, #596]	; (8000dac <HAL_GPIO_Init+0x274>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00f      	beq.n	8000b7a <HAL_GPIO_Init+0x42>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <HAL_GPIO_Init+0x278>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00b      	beq.n	8000b7a <HAL_GPIO_Init+0x42>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a93      	ldr	r2, [pc, #588]	; (8000db4 <HAL_GPIO_Init+0x27c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d007      	beq.n	8000b7a <HAL_GPIO_Init+0x42>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x280>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x42>
 8000b72:	21bd      	movs	r1, #189	; 0xbd
 8000b74:	4891      	ldr	r0, [pc, #580]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000b76:	f7ff fce8 	bl	800054a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <HAL_GPIO_Init+0x58>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	0c1b      	lsrs	r3, r3, #16
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x60>
 8000b90:	21be      	movs	r1, #190	; 0xbe
 8000b92:	488a      	ldr	r0, [pc, #552]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000b94:	f7ff fcd9 	bl	800054a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 821c 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	f000 8217 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b11      	cmp	r3, #17
 8000bb2:	f000 8212 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	f000 820d 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b12      	cmp	r3, #18
 8000bc6:	f000 8208 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <HAL_GPIO_Init+0x288>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	f000 8202 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <HAL_GPIO_Init+0x28c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	f000 81fc 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a78      	ldr	r2, [pc, #480]	; (8000dc8 <HAL_GPIO_Init+0x290>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f000 81f6 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a76      	ldr	r2, [pc, #472]	; (8000dcc <HAL_GPIO_Init+0x294>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	f000 81f0 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a74      	ldr	r2, [pc, #464]	; (8000dd0 <HAL_GPIO_Init+0x298>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f000 81ea 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a72      	ldr	r2, [pc, #456]	; (8000dd4 <HAL_GPIO_Init+0x29c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	f000 81e4 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	f000 81df 	beq.w	8000fda <HAL_GPIO_Init+0x4a2>
 8000c1c:	21bf      	movs	r1, #191	; 0xbf
 8000c1e:	4867      	ldr	r0, [pc, #412]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000c20:	f7ff fc93 	bl	800054a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	e1d9      	b.n	8000fda <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c26:	2201      	movs	r2, #1
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f040 81c8 	bne.w	8000fd4 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a58      	ldr	r2, [pc, #352]	; (8000da8 <HAL_GPIO_Init+0x270>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a57      	ldr	r2, [pc, #348]	; (8000dac <HAL_GPIO_Init+0x274>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00f      	beq.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <HAL_GPIO_Init+0x278>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d00b      	beq.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a55      	ldr	r2, [pc, #340]	; (8000db4 <HAL_GPIO_Init+0x27c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a54      	ldr	r2, [pc, #336]	; (8000db8 <HAL_GPIO_Init+0x280>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x13c>
 8000c6c:	21cd      	movs	r1, #205	; 0xcd
 8000c6e:	4853      	ldr	r0, [pc, #332]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000c70:	f7ff fc6b 	bl	800054a <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a56      	ldr	r2, [pc, #344]	; (8000dd4 <HAL_GPIO_Init+0x29c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f000 80c1 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
 8000c80:	4a54      	ldr	r2, [pc, #336]	; (8000dd4 <HAL_GPIO_Init+0x29c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f200 80e7 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000c88:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_GPIO_Init+0x290>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f000 80b9 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
 8000c90:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x290>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f200 80df 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x298>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f000 80b1 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
 8000ca0:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <HAL_GPIO_Init+0x298>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f200 80d7 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000ca8:	4a46      	ldr	r2, [pc, #280]	; (8000dc4 <HAL_GPIO_Init+0x28c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f000 80a9 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
 8000cb0:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <HAL_GPIO_Init+0x28c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f200 80cf 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000cb8:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <HAL_GPIO_Init+0x294>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f000 80a1 	beq.w	8000e02 <HAL_GPIO_Init+0x2ca>
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <HAL_GPIO_Init+0x294>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f200 80c7 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000cc8:	2b12      	cmp	r3, #18
 8000cca:	d82b      	bhi.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000ccc:	2b12      	cmp	r3, #18
 8000cce:	f200 80c2 	bhi.w	8000e56 <HAL_GPIO_Init+0x31e>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <HAL_GPIO_Init+0x1a0>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000e03 	.word	0x08000e03
 8000cdc:	08000d2d 	.word	0x08000d2d
 8000ce0:	08000d7f 	.word	0x08000d7f
 8000ce4:	08000e51 	.word	0x08000e51
 8000ce8:	08000e57 	.word	0x08000e57
 8000cec:	08000e57 	.word	0x08000e57
 8000cf0:	08000e57 	.word	0x08000e57
 8000cf4:	08000e57 	.word	0x08000e57
 8000cf8:	08000e57 	.word	0x08000e57
 8000cfc:	08000e57 	.word	0x08000e57
 8000d00:	08000e57 	.word	0x08000e57
 8000d04:	08000e57 	.word	0x08000e57
 8000d08:	08000e57 	.word	0x08000e57
 8000d0c:	08000e57 	.word	0x08000e57
 8000d10:	08000e57 	.word	0x08000e57
 8000d14:	08000e57 	.word	0x08000e57
 8000d18:	08000e57 	.word	0x08000e57
 8000d1c:	08000d55 	.word	0x08000d55
 8000d20:	08000dd9 	.word	0x08000dd9
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_GPIO_Init+0x288>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d06b      	beq.n	8000e02 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d2a:	e094      	b.n	8000e56 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d00b      	beq.n	8000d4c <HAL_GPIO_Init+0x214>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x214>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x214>
 8000d44:	21d5      	movs	r1, #213	; 0xd5
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000d48:	f7ff fbff 	bl	800054a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e081      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0x23c>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x23c>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x23c>
 8000d6c:	21dc      	movs	r1, #220	; 0xdc
 8000d6e:	4813      	ldr	r0, [pc, #76]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000d70:	f7ff fbeb 	bl	800054a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e06c      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d00b      	beq.n	8000d9e <HAL_GPIO_Init+0x266>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x266>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x266>
 8000d96:	21e3      	movs	r1, #227	; 0xe3
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <HAL_GPIO_Init+0x284>)
 8000d9a:	f7ff fbd6 	bl	800054a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e057      	b.n	8000e58 <HAL_GPIO_Init+0x320>
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40011800 	.word	0x40011800
 8000dbc:	08009640 	.word	0x08009640
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	10210000 	.word	0x10210000
 8000dc8:	10310000 	.word	0x10310000
 8000dcc:	10120000 	.word	0x10120000
 8000dd0:	10220000 	.word	0x10220000
 8000dd4:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d00b      	beq.n	8000df8 <HAL_GPIO_Init+0x2c0>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d007      	beq.n	8000df8 <HAL_GPIO_Init+0x2c0>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x2c0>
 8000df0:	21ea      	movs	r1, #234	; 0xea
 8000df2:	4880      	ldr	r0, [pc, #512]	; (8000ff4 <HAL_GPIO_Init+0x4bc>)
 8000df4:	f7ff fba9 	bl	800054a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e02a      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <HAL_GPIO_Init+0x2ea>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x2ea>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2ea>
 8000e1a:	21f7      	movs	r1, #247	; 0xf7
 8000e1c:	4875      	ldr	r0, [pc, #468]	; (8000ff4 <HAL_GPIO_Init+0x4bc>)
 8000e1e:	f7ff fb94 	bl	800054a <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	623b      	str	r3, [r7, #32]
          break;
 8000e2e:	e013      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d105      	bne.n	8000e44 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	611a      	str	r2, [r3, #16]
          break;
 8000e42:	e009      	b.n	8000e58 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e44:	2308      	movs	r3, #8
 8000e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	615a      	str	r2, [r3, #20]
          break;
 8000e4e:	e003      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x320>
          break;
 8000e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d801      	bhi.n	8000e62 <HAL_GPIO_Init+0x32a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e001      	b.n	8000e66 <HAL_GPIO_Init+0x32e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3304      	adds	r3, #4
 8000e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d802      	bhi.n	8000e74 <HAL_GPIO_Init+0x33c>
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x342>
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3b08      	subs	r3, #8
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	210f      	movs	r1, #15
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	6a39      	ldr	r1, [r7, #32]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	431a      	orrs	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8096 	beq.w	8000fd4 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea8:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <HAL_GPIO_Init+0x4c0>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_GPIO_Init+0x4c0>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <HAL_GPIO_Init+0x4c0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_GPIO_Init+0x4c4>)
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a46      	ldr	r2, [pc, #280]	; (8001000 <HAL_GPIO_Init+0x4c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d013      	beq.n	8000f14 <HAL_GPIO_Init+0x3dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a45      	ldr	r2, [pc, #276]	; (8001004 <HAL_GPIO_Init+0x4cc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d00d      	beq.n	8000f10 <HAL_GPIO_Init+0x3d8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_GPIO_Init+0x4d0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x3d4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a43      	ldr	r2, [pc, #268]	; (800100c <HAL_GPIO_Init+0x4d4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_GPIO_Init+0x3d0>
 8000f04:	2303      	movs	r3, #3
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x3de>
 8000f08:	2304      	movs	r3, #4
 8000f0a:	e004      	b.n	8000f16 <HAL_GPIO_Init+0x3de>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x3de>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_GPIO_Init+0x3de>
 8000f14:	2300      	movs	r3, #0
 8000f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f18:	f002 0203 	and.w	r2, r2, #3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f26:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x4c4>)
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4932      	ldr	r1, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	492e      	ldr	r1, [pc, #184]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4928      	ldr	r1, [pc, #160]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4924      	ldr	r1, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	491e      	ldr	r1, [pc, #120]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	491a      	ldr	r1, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	4914      	ldr	r1, [pc, #80]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60cb      	str	r3, [r1, #12]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4910      	ldr	r1, [pc, #64]	; (8001010 <HAL_GPIO_Init+0x4d8>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae1e 	bne.w	8000c26 <HAL_GPIO_Init+0xee>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	08009640 	.word	0x08009640
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40010800 	.word	0x40010800
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000
 800100c:	40011400 	.word	0x40011400
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <HAL_GPIO_WritePin+0x20>
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	041b      	lsls	r3, r3, #16
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <HAL_GPIO_WritePin+0x2a>
 8001034:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <HAL_GPIO_WritePin+0x60>)
 800103a:	f7ff fa86 	bl	800054a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800103e:	787b      	ldrb	r3, [r7, #1]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_WritePin+0x40>
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d004      	beq.n	8001054 <HAL_GPIO_WritePin+0x40>
 800104a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <HAL_GPIO_WritePin+0x60>)
 8001050:	f7ff fa7b 	bl	800054a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	08009640 	.word	0x08009640

08001078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_GPIO_TogglePin+0x1c>
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_GPIO_TogglePin+0x26>
 8001094:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HAL_GPIO_TogglePin+0x4c>)
 800109a:	f7ff fa56 	bl	800054a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	041a      	lsls	r2, r3, #16
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	400b      	ands	r3, r1
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08009640 	.word	0x08009640

080010c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f806 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin == GPIO_PIN_4){
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	2b10      	cmp	r3, #16
 8001106:	d116      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x3e>
	  if(regym == 1)
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d103      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x20>
		  regym = 2;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
	   else if(regym == 2)
		   regym = 3;
	   else if(regym == 3)
		   regym = 1;
  }
}
 8001116:	e00e      	b.n	8001136 <HAL_GPIO_EXTI_Callback+0x3e>
	   else if(regym == 2)
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d103      	bne.n	8001128 <HAL_GPIO_EXTI_Callback+0x30>
		   regym = 3;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 8001122:	2203      	movs	r2, #3
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	e006      	b.n	8001136 <HAL_GPIO_EXTI_Callback+0x3e>
	   else if(regym == 3)
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d102      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x3e>
		   regym = 1;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GPIO_EXTI_Callback+0x48>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000000 	.word	0x20000000

08001144 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af06      	add	r7, sp, #24
 800114a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e106      	b.n	8001364 <HAL_PCD_Init+0x220>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a84      	ldr	r2, [pc, #528]	; (800136c <HAL_PCD_Init+0x228>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_PCD_Init+0x24>
 8001160:	218e      	movs	r1, #142	; 0x8e
 8001162:	4883      	ldr	r0, [pc, #524]	; (8001370 <HAL_PCD_Init+0x22c>)
 8001164:	f7ff f9f1 	bl	800054a <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f007 ff5f 	bl	8009040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fca4 	bl	8004adc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	687e      	ldr	r6, [r7, #4]
 800119c:	466d      	mov	r5, sp
 800119e:	f106 0410 	add.w	r4, r6, #16
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	1d33      	adds	r3, r6, #4
 80011ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f003 fc6e 	bl	8004a90 <USB_CoreInit>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0ce      	b.n	8001364 <HAL_PCD_Init+0x220>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fc9f 	bl	8004b10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e04c      	b.n	8001272 <HAL_PCD_Init+0x12e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	3301      	adds	r3, #1
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	b298      	uxth	r0, r3
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3336      	adds	r3, #54	; 0x36
 8001216:	4602      	mov	r2, r0
 8001218:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3303      	adds	r3, #3
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3338      	adds	r3, #56	; 0x38
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	333c      	adds	r3, #60	; 0x3c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	3340      	adds	r3, #64	; 0x40
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	3301      	adds	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3ad      	bcc.n	80011d8 <HAL_PCD_Init+0x94>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e044      	b.n	800130c <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	440b      	add	r3, r1
 80012bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	3301      	adds	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3b5      	bcc.n	8001282 <HAL_PCD_Init+0x13e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	687e      	ldr	r6, [r7, #4]
 800131e:	466d      	mov	r5, sp
 8001320:	f106 0410 	add.w	r4, r6, #16
 8001324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	602b      	str	r3, [r5, #0]
 800132c:	1d33      	adds	r3, r6, #4
 800132e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f003 fbf9 	bl	8004b28 <USB_DevInit>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e00d      	b.n	8001364 <HAL_PCD_Init+0x220>
  }

  hpcd->USB_Address = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f006 f8ab 	bl	80074b8 <USB_DevDisconnect>

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136c:	40005c00 	.word	0x40005c00
 8001370:	0800967c 	.word	0x0800967c

08001374 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_PCD_Start+0x16>
 8001386:	2302      	movs	r3, #2
 8001388:	e016      	b.n	80013b8 <HAL_PCD_Start+0x44>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fb8a 	bl	8004ab0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800139c:	2101      	movs	r1, #1
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f008 f8c1 	bl	8009526 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 f87b 	bl	80074a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 f87d 	bl	80074cc <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013dc:	d102      	bne.n	80013e4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fb5f 	bl	8001aa2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 f86f 	bl	80074cc <USB_ReadInterrupts>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d112      	bne.n	8001420 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140c:	b292      	uxth	r2, r2
 800140e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f007 fe8f 	bl	8009136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001418:	2100      	movs	r1, #0
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f923 	bl	8001666 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f006 f851 	bl	80074cc <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001434:	d10b      	bne.n	800144e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001448:	b292      	uxth	r2, r2
 800144a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f006 f83a 	bl	80074cc <USB_ReadInterrupts>
 8001458:	4603      	mov	r3, r0
 800145a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001462:	d10b      	bne.n	800147c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001476:	b292      	uxth	r2, r2
 8001478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f006 f823 	bl	80074cc <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001490:	d126      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0204 	bic.w	r2, r2, #4
 80014a4:	b292      	uxth	r2, r2
 80014a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	b292      	uxth	r2, r2
 80014be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f007 fe70 	bl	80091a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 fff1 	bl	80074cc <USB_ReadInterrupts>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f4:	f040 8082 	bne.w	80015fc <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	77fb      	strb	r3, [r7, #31]
 80014fc:	e010      	b.n	8001520 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	441a      	add	r2, r3
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	b292      	uxth	r2, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3320      	adds	r3, #32
 8001514:	443b      	add	r3, r7
 8001516:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	3301      	adds	r3, #1
 800151e:	77fb      	strb	r3, [r7, #31]
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d9eb      	bls.n	80014fe <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001556:	bf00      	nop
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001560:	b29b      	uxth	r3, r3
 8001562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f6      	beq.n	8001558 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800157c:	b292      	uxth	r2, r2
 800157e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	77fb      	strb	r3, [r7, #31]
 8001586:	e00f      	b.n	80015a8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
 8001590:	7ffa      	ldrb	r2, [r7, #31]
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	440a      	add	r2, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3320      	adds	r3, #32
 800159a:	443b      	add	r3, r7
 800159c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80015a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	3301      	adds	r3, #1
 80015a6:	77fb      	strb	r3, [r7, #31]
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	d9ec      	bls.n	8001588 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0208 	orr.w	r2, r2, #8
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0204 	orr.w	r2, r2, #4
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f007 fdbc 	bl	8009174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f005 ff63 	bl	80074cc <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d10e      	bne.n	8001630 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001624:	b292      	uxth	r2, r2
 8001626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f007 fd75 	bl	800911a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f005 ff49 	bl	80074cc <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	d10b      	bne.n	800165e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800165e:	bf00      	nop
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_PCD_SetAddress+0x1a>
 800167c:	2302      	movs	r3, #2
 800167e:	e013      	b.n	80016a8 <HAL_PCD_SetAddress+0x42>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fef0 	bl	800747e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	70fb      	strb	r3, [r7, #3]
 80016c2:	460b      	mov	r3, r1
 80016c4:	803b      	strh	r3, [r7, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da0e      	bge.n	80016f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	705a      	strb	r2, [r3, #1]
 80016f2:	e00e      	b.n	8001712 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 0207 	and.w	r2, r3, #7
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	b2da      	uxtb	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800171e:	883a      	ldrh	r2, [r7, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	78ba      	ldrb	r2, [r7, #2]
 8001728:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	785b      	ldrb	r3, [r3, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d102      	bne.n	8001748 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_PCD_EP_Open+0xa6>
 8001752:	2302      	movs	r3, #2
 8001754:	e00e      	b.n	8001774 <HAL_PCD_EP_Open+0xc4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f9ff 	bl	8004b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001772:	7afb      	ldrb	r3, [r7, #11]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0e      	bge.n	80017ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	705a      	strb	r2, [r3, #1]
 80017ac:	e00e      	b.n	80017cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 0207 	and.w	r2, r3, #7
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_PCD_EP_Close+0x6a>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e00e      	b.n	8001804 <HAL_PCD_EP_Close+0x88>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68f9      	ldr	r1, [r7, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fd21 	bl	800523c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	b2da      	uxtb	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001858:	7afb      	ldrb	r3, [r7, #11]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fed3 	bl	8005614 <USB_EPStartXfer>
 800186e:	e005      	b.n	800187c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6979      	ldr	r1, [r7, #20]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fecc 	bl	8005614 <USB_EPStartXfer>
  }

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f003 0207 	and.w	r2, r3, #7
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018a8:	681b      	ldr	r3, [r3, #0]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	460b      	mov	r3, r1
 80018c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	b2da      	uxtb	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fe79 	bl	8005614 <USB_EPStartXfer>
 8001922:	e005      	b.n	8001930 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fe72 	bl	8005614 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 0207 	and.w	r2, r3, #7
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	d901      	bls.n	8001958 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04c      	b.n	80019f2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0e      	bge.n	800197e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	705a      	strb	r2, [r3, #1]
 800197c:	e00c      	b.n	8001998 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_PCD_EP_SetStall+0x7e>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e01c      	b.n	80019f2 <HAL_PCD_EP_SetStall+0xb8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 fc5c 	bl	8007284 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d108      	bne.n	80019e8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f005 fd81 	bl	80074ea <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 020f 	and.w	r2, r3, #15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d901      	bls.n	8001a18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e040      	b.n	8001a9a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da0e      	bge.n	8001a3e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	705a      	strb	r2, [r3, #1]
 8001a3c:	e00e      	b.n	8001a5c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 0207 	and.w	r2, r3, #7
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_EP_ClrStall+0x82>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e00e      	b.n	8001a9a <HAL_PCD_EP_ClrStall+0xa0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 fc4a 	bl	8007324 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b08e      	sub	sp, #56	; 0x38
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aaa:	e2ec      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ab6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ac2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 8161 	bne.w	8001d8e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001acc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d152      	bne.n	8001b7c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	81fb      	strh	r3, [r7, #14]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3328      	adds	r3, #40	; 0x28
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	441a      	add	r2, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f007 fad2 	bl	80090e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 829b 	beq.w	8002086 <PCD_EP_ISR_Handler+0x5e4>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 8296 	bne.w	8002086 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b7a:	e284      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d034      	beq.n	8001c00 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3306      	adds	r3, #6
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f005 fcd8 	bl	800758a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001be6:	4013      	ands	r3, r2
 8001be8:	823b      	strh	r3, [r7, #16]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	8a3a      	ldrh	r2, [r7, #16]
 8001bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f007 fa47 	bl	800908c <HAL_PCD_SetupStageCallback>
 8001bfe:	e242      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c00:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f280 823e 	bge.w	8002086 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c16:	4013      	ands	r3, r2
 8001c18:	83bb      	strh	r3, [r7, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	8bba      	ldrh	r2, [r7, #28]
 8001c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c24:	b292      	uxth	r2, r2
 8001c26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d019      	beq.n	8001c90 <PCD_EP_ISR_Handler+0x1ee>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d015      	beq.n	8001c90 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	6959      	ldr	r1, [r3, #20]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f005 fc88 	bl	800758a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	441a      	add	r2, r3
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f007 fa10 	bl	80090b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 81f2 	bne.w	8002086 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d112      	bne.n	8001cf0 <PCD_EP_ISR_Handler+0x24e>
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	e02f      	b.n	8001d50 <PCD_EP_ISR_Handler+0x2ae>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf6:	d813      	bhi.n	8001d20 <PCD_EP_ISR_Handler+0x27e>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <PCD_EP_ISR_Handler+0x270>
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	3301      	adds	r3, #1
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	e017      	b.n	8001d50 <PCD_EP_ISR_Handler+0x2ae>
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <PCD_EP_ISR_Handler+0x298>
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	3b01      	subs	r3, #1
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d60:	827b      	strh	r3, [r7, #18]
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d68:	827b      	strh	r3, [r7, #18]
 8001d6a:	8a7b      	ldrh	r3, [r7, #18]
 8001d6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d70:	827b      	strh	r3, [r7, #18]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	8a7b      	ldrh	r3, [r7, #18]
 8001d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8013      	strh	r3, [r2, #0]
 8001d8c:	e17b      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001da0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f280 80ea 	bge.w	8001f7e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	853b      	strh	r3, [r7, #40]	; 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ddc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	7b1b      	ldrb	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d122      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3306      	adds	r3, #6
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8087 	beq.w	8001f3a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	6959      	ldr	r1, [r3, #20]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	88da      	ldrh	r2, [r3, #6]
 8001e38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e3a:	f005 fba6 	bl	800758a <USB_ReadPMA>
 8001e3e:	e07c      	b.n	8001f3a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	78db      	ldrb	r3, [r3, #3]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d108      	bne.n	8001e5a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f927 	bl	80020a2 <HAL_PCD_EP_DB_Receive>
 8001e54:	4603      	mov	r3, r0
 8001e56:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e58:	e06f      	b.n	8001f3a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e74:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	441a      	add	r2, r3
 8001e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d021      	beq.n	8001ef8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001edc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ede:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d02a      	beq.n	8001f3a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	6959      	ldr	r1, [r3, #20]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	891a      	ldrh	r2, [r3, #8]
 8001ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef2:	f005 fb4a 	bl	800758a <USB_ReadPMA>
 8001ef6:	e020      	b.n	8001f3a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3306      	adds	r3, #6
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	6959      	ldr	r1, [r3, #20]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	895a      	ldrh	r2, [r3, #10]
 8001f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f36:	f005 fb28 	bl	800758a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f40:	441a      	add	r2, r3
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f4c:	441a      	add	r2, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <PCD_EP_ISR_Handler+0x4c2>
 8001f5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d206      	bcs.n	8001f72 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f007 f8a0 	bl	80090b0 <HAL_PCD_DataOutStageCallback>
 8001f70:	e005      	b.n	8001f7e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fb4b 	bl	8005614 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07e      	beq.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	843b      	strh	r3, [r7, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	8c3b      	ldrh	r3, [r7, #32]
 8001fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d00c      	beq.n	8001ff6 <PCD_EP_ISR_Handler+0x554>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	78db      	ldrb	r3, [r3, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d146      	bne.n	800207a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d141      	bne.n	800207a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	3302      	adds	r3, #2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	429a      	cmp	r2, r3
 8002028:	d906      	bls.n	8002038 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	8bfb      	ldrh	r3, [r7, #30]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	e002      	b.n	800203e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f007 f84a 	bl	80090e6 <HAL_PCD_DataInStageCallback>
 8002052:	e018      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	8bfb      	ldrh	r3, [r7, #30]
 800205a:	441a      	add	r2, r3
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	8bfb      	ldrh	r3, [r7, #30]
 8002066:	441a      	add	r2, r3
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002072:	4618      	mov	r0, r3
 8002074:	f003 face 	bl	8005614 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002078:	e005      	b.n	8002086 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800207a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800207c:	461a      	mov	r2, r3
 800207e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f91b 	bl	80022bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800208e:	b29b      	uxth	r3, r3
 8002090:	b21b      	sxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	f6ff ad0a 	blt.w	8001aac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3738      	adds	r7, #56	; 0x38
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b088      	sub	sp, #32
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d07e      	beq.n	80021b8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	3302      	adds	r3, #2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d306      	bcc.n	80020fc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	8b7b      	ldrh	r3, [r7, #26]
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	e002      	b.n	8002102 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d123      	bne.n	8002152 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002124:	833b      	strh	r3, [r7, #24]
 8002126:	8b3b      	ldrh	r3, [r7, #24]
 8002128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800212c:	833b      	strh	r3, [r7, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	8b3b      	ldrh	r3, [r7, #24]
 800213e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214e:	b29b      	uxth	r3, r3
 8002150:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01f      	beq.n	800219c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	82fb      	strh	r3, [r7, #22]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	8afb      	ldrh	r3, [r7, #22]
 8002188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800218c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002198:	b29b      	uxth	r3, r3
 800219a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6959      	ldr	r1, [r3, #20]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	891a      	ldrh	r2, [r3, #8]
 80021b0:	8b7b      	ldrh	r3, [r7, #26]
 80021b2:	f005 f9ea 	bl	800758a <USB_ReadPMA>
 80021b6:	e07c      	b.n	80022b2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	3306      	adds	r3, #6
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	8b7b      	ldrh	r3, [r7, #26]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d306      	bcc.n	80021fa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	8b7b      	ldrh	r3, [r7, #26]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	e002      	b.n	8002200 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d123      	bne.n	8002250 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002222:	83fb      	strh	r3, [r7, #30]
 8002224:	8bfb      	ldrh	r3, [r7, #30]
 8002226:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800222a:	83fb      	strh	r3, [r7, #30]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	8bfb      	ldrh	r3, [r7, #30]
 800223c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	b29b      	uxth	r3, r3
 800224e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11f      	bne.n	800229a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002274:	83bb      	strh	r3, [r7, #28]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	8bbb      	ldrh	r3, [r7, #28]
 8002286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6959      	ldr	r1, [r3, #20]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	895a      	ldrh	r2, [r3, #10]
 80022ac:	8b7b      	ldrh	r3, [r7, #26]
 80022ae:	f005 f96c 	bl	800758a <USB_ReadPMA>
    }
  }

  return count;
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0a2      	sub	sp, #136	; 0x88
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 81c7 	beq.w	8002664 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	3302      	adds	r3, #2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	429a      	cmp	r2, r3
 800230c:	d907      	bls.n	800231e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	e002      	b.n	8002324 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 80b9 	bne.w	80024a0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d126      	bne.n	8002384 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	4413      	add	r3, r2
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	011a      	lsls	r2, r3, #4
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	4413      	add	r3, r2
 8002358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002368:	b29a      	uxth	r2, r3
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e01a      	b.n	80023ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d116      	bne.n	80023ba <HAL_PCD_EP_DB_Transmit+0xfe>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	4413      	add	r3, r2
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	011a      	lsls	r2, r3, #4
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	4413      	add	r3, r2
 80023ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	623b      	str	r3, [r7, #32]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	785b      	ldrb	r3, [r3, #1]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d126      	bne.n	8002416 <HAL_PCD_EP_DB_Transmit+0x15a>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4413      	add	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	011a      	lsls	r2, r3, #4
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240e:	b29a      	uxth	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	e017      	b.n	8002446 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d113      	bne.n	8002446 <HAL_PCD_EP_DB_Transmit+0x18a>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	4413      	add	r3, r2
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	011a      	lsls	r2, r3, #4
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	4413      	add	r3, r2
 800243a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f006 fe4a 	bl	80090e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 82d4 	beq.w	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	827b      	strh	r3, [r7, #18]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	441a      	add	r2, r3
 8002488:	8a7b      	ldrh	r3, [r7, #18]
 800248a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	b29b      	uxth	r3, r3
 800249c:	8013      	strh	r3, [r2, #0]
 800249e:	e2b2      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d021      	beq.n	80024ee <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80024da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 8286 	bne.w	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002502:	441a      	add	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002510:	441a      	add	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6a1a      	ldr	r2, [r3, #32]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	429a      	cmp	r2, r3
 8002520:	d309      	bcc.n	8002536 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	621a      	str	r2, [r3, #32]
 8002534:	e015      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800253e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002542:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800254c:	e009      	b.n	8002562 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d155      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x35a>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257e:	4413      	add	r3, r2
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	011a      	lsls	r2, r3, #4
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	4413      	add	r3, r2
 800258c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d112      	bne.n	80025be <HAL_PCD_EP_DB_Transmit+0x302>
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e047      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x392>
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	2b3e      	cmp	r3, #62	; 0x3e
 80025c2:	d811      	bhi.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80025c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_PCD_EP_DB_Transmit+0x31e>
 80025d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d6:	3301      	adds	r3, #1
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	b29b      	uxth	r3, r3
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	e032      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x392>
 80025e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_PCD_EP_DB_Transmit+0x342>
 80025f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fa:	3b01      	subs	r3, #1
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002600:	b29b      	uxth	r3, r3
 8002602:	029b      	lsls	r3, r3, #10
 8002604:	b29b      	uxth	r3, r3
 8002606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260e:	b29a      	uxth	r2, r3
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e01b      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x392>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d117      	bne.n	800264e <HAL_PCD_EP_DB_Transmit+0x392>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	4413      	add	r3, r2
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	011a      	lsls	r2, r3, #4
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	4413      	add	r3, r2
 8002640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002648:	b29a      	uxth	r2, r3
 800264a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	891a      	ldrh	r2, [r3, #8]
 800265a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	f004 ff4f 	bl	8007500 <USB_WritePMA>
 8002662:	e1d0      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	429a      	cmp	r2, r3
 800269a:	d307      	bcc.n	80026ac <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a4:	1ad2      	subs	r2, r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	e002      	b.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80c4 	bne.w	8002844 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d126      	bne.n	8002712 <HAL_PCD_EP_DB_Transmit+0x456>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	4413      	add	r3, r2
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	011a      	lsls	r2, r3, #4
 80026e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e4:	4413      	add	r3, r2
 80026e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80026ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fa:	801a      	strh	r2, [r3, #0]
 80026fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270a:	b29a      	uxth	r2, r3
 800270c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270e:	801a      	strh	r2, [r3, #0]
 8002710:	e01a      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d116      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0x48c>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	677b      	str	r3, [r7, #116]	; 0x74
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272e:	4413      	add	r3, r2
 8002730:	677b      	str	r3, [r7, #116]	; 0x74
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	011a      	lsls	r2, r3, #4
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	4413      	add	r3, r2
 800273c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002740:	673b      	str	r3, [r7, #112]	; 0x70
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	67bb      	str	r3, [r7, #120]	; 0x78
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12f      	bne.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800276e:	4413      	add	r3, r2
 8002770:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	011a      	lsls	r2, r3, #4
 800277a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277e:	4413      	add	r3, r2
 8002780:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002794:	b29a      	uxth	r2, r3
 8002796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b2:	801a      	strh	r2, [r3, #0]
 80027b4:	e017      	b.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d113      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027cc:	4413      	add	r3, r2
 80027ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	011a      	lsls	r2, r3, #4
 80027d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d8:	4413      	add	r3, r2
 80027da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f006 fc7a 	bl	80090e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8104 	bne.w	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	441a      	add	r2, r3
 800282a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
 8002842:	e0e0      	b.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d121      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800287e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80b4 	bne.w	8002a06 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a6:	441a      	add	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028b4:	441a      	add	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d309      	bcc.n	80028da <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	621a      	str	r2, [r3, #32]
 80028d8:	e015      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80028e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028f0:	e009      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	667b      	str	r3, [r7, #100]	; 0x64
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d155      	bne.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x704>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	4413      	add	r3, r2
 800292a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	011a      	lsls	r2, r3, #4
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	4413      	add	r3, r2
 8002936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800293a:	65bb      	str	r3, [r7, #88]	; 0x58
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d112      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800294c:	b29a      	uxth	r2, r3
 800294e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002960:	b29a      	uxth	r2, r3
 8002962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e044      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296a:	2b3e      	cmp	r3, #62	; 0x3e
 800296c:	d811      	bhi.n	8002992 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800296e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	657b      	str	r3, [r7, #84]	; 0x54
 8002974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	3301      	adds	r3, #1
 8002982:	657b      	str	r3, [r7, #84]	; 0x54
 8002984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002986:	b29b      	uxth	r3, r3
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	b29a      	uxth	r2, r3
 800298c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	e02f      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	657b      	str	r3, [r7, #84]	; 0x54
 8002998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	3b01      	subs	r3, #1
 80029a6:	657b      	str	r3, [r7, #84]	; 0x54
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	029b      	lsls	r3, r3, #10
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	e018      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x736>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d114      	bne.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x736>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d6:	4413      	add	r3, r2
 80029d8:	667b      	str	r3, [r7, #100]	; 0x64
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	895a      	ldrh	r2, [r3, #10]
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f004 fd7d 	bl	8007500 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a20:	823b      	strh	r3, [r7, #16]
 8002a22:	8a3b      	ldrh	r3, [r7, #16]
 8002a24:	f083 0310 	eor.w	r3, r3, #16
 8002a28:	823b      	strh	r3, [r7, #16]
 8002a2a:	8a3b      	ldrh	r3, [r7, #16]
 8002a2c:	f083 0320 	eor.w	r3, r3, #32
 8002a30:	823b      	strh	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	441a      	add	r2, r3
 8002a40:	8a3b      	ldrh	r3, [r7, #16]
 8002a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3788      	adds	r7, #136	; 0x88
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e009      	b.n	8002aaa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a96:	897a      	ldrh	r2, [r7, #10]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002aaa:	893b      	ldrh	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	80da      	strh	r2, [r3, #6]
 8002abe:	e00b      	b.n	8002ad8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e35a      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x54>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x54>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d110      	bne.n	8002b38 <HAL_RCC_OscConfig+0x54>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x54>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_RCC_OscConfig+0x54>
 8002b2e:	f240 1167 	movw	r1, #359	; 0x167
 8002b32:	488f      	ldr	r0, [pc, #572]	; (8002d70 <HAL_RCC_OscConfig+0x28c>)
 8002b34:	f7fd fd09 	bl	800054a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 809a 	beq.w	8002c7a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <HAL_RCC_OscConfig+0x88>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b56:	d009      	beq.n	8002b6c <HAL_RCC_OscConfig+0x88>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d004      	beq.n	8002b6c <HAL_RCC_OscConfig+0x88>
 8002b62:	f240 116d 	movw	r1, #365	; 0x16d
 8002b66:	4882      	ldr	r0, [pc, #520]	; (8002d70 <HAL_RCC_OscConfig+0x28c>)
 8002b68:	f7fd fcef 	bl	800054a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	4b81      	ldr	r3, [pc, #516]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00c      	beq.n	8002b92 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d112      	bne.n	8002baa <HAL_RCC_OscConfig+0xc6>
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d10b      	bne.n	8002baa <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b92:	4b78      	ldr	r3, [pc, #480]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x194>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d168      	bne.n	8002c78 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e300      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0xde>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0x13c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x100>
 8002bca:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0x13c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x124>
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b5e      	ldr	r3, [pc, #376]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5d      	ldr	r2, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0x13c>
 8002c08:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a59      	ldr	r2, [pc, #356]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a56      	ldr	r2, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fd fe40 	bl	80008ac <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fd fe3c 	bl	80008ac <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e2b4      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x14c>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd fe2c 	bl	80008ac <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fd fe28 	bl	80008ac <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e2a0      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x174>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8080 	beq.w	8002d88 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1be>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d004      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1be>
 8002c98:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002c9c:	4834      	ldr	r0, [pc, #208]	; (8002d70 <HAL_RCC_OscConfig+0x28c>)
 8002c9e:	f7fd fc54 	bl	800054a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b1f      	cmp	r3, #31
 8002ca8:	d904      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x1d0>
 8002caa:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002cae:	4830      	ldr	r0, [pc, #192]	; (8002d70 <HAL_RCC_OscConfig+0x28c>)
 8002cb0:	f7fd fc4b 	bl	800054a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d11c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x222>
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x20c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e25d      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	491d      	ldr	r1, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d04:	e040      	b.n	8002d88 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_RCC_OscConfig+0x294>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fd fdca 	bl	80008ac <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fd fdc6 	bl	80008ac <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e23e      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490a      	ldr	r1, [pc, #40]	; (8002d74 <HAL_RCC_OscConfig+0x290>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
 8002d4e:	e01b      	b.n	8002d88 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x294>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fd fda9 	bl	80008ac <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5c:	e00e      	b.n	8002d7c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fd fda5 	bl	80008ac <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d907      	bls.n	8002d7c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e21d      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
 8002d70:	080096b4 	.word	0x080096b4
 8002d74:	40021000 	.word	0x40021000
 8002d78:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7c:	4b7d      	ldr	r3, [pc, #500]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ea      	bne.n	8002d5e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d040      	beq.n	8002e16 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_OscConfig+0x2ca>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d004      	beq.n	8002dae <HAL_RCC_OscConfig+0x2ca>
 8002da4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002da8:	4873      	ldr	r0, [pc, #460]	; (8002f78 <HAL_RCC_OscConfig+0x494>)
 8002daa:	f7fd fbce 	bl	800054a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <HAL_RCC_OscConfig+0x498>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fd fd76 	bl	80008ac <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd fd72 	bl	80008ac <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1ea      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f000 fc0c 	bl	8003600 <RCC_Delay>
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dea:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <HAL_RCC_OscConfig+0x498>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fd fd5c 	bl	80008ac <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fd fd58 	bl	80008ac <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1d0      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80bf 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x366>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_OscConfig+0x366>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCC_OscConfig+0x366>
 8002e40:	f240 2111 	movw	r1, #529	; 0x211
 8002e44:	484c      	ldr	r0, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x494>)
 8002e46:	f7fd fb80 	bl	800054a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x49c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x49c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0x49c>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fd fd0f 	bl	80008ac <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fd fd0b 	bl	80008ac <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e183      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x49c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3e2>
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e02d      	b.n	8002f22 <HAL_RCC_OscConfig+0x43e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x404>
 8002ece:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a28      	ldr	r2, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e01c      	b.n	8002f22 <HAL_RCC_OscConfig+0x43e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x426>
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x43e>
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fd fcbf 	bl	80008ac <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fd fcbb 	bl	80008ac <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e131      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_OscConfig+0x490>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCC_OscConfig+0x44e>
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fd fca9 	bl	80008ac <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e012      	b.n	8002f84 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fca5 	bl	80008ac <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d909      	bls.n	8002f84 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e11b      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	080096b4 	.word	0x080096b4
 8002f7c:	42420480 	.word	0x42420480
 8002f80:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a86      	ldr	r2, [pc, #536]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4e0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4e0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4e0>
 8002fba:	f240 21af 	movw	r1, #687	; 0x2af
 8002fbe:	487e      	ldr	r0, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x6d4>)
 8002fc0:	f7fd fac3 	bl	800054a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80ee 	beq.w	80031aa <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fce:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	f000 80ce 	beq.w	8003178 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 80b2 	bne.w	800314a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_OscConfig+0x51e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d004      	beq.n	8003002 <HAL_RCC_OscConfig+0x51e>
 8002ff8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002ffc:	486e      	ldr	r0, [pc, #440]	; (80031b8 <HAL_RCC_OscConfig+0x6d4>)
 8002ffe:	f7fd faa4 	bl	800054a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d04a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003012:	d045      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800301c:	d040      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003026:	d03b      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003030:	d036      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800303a:	d031      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003044:	d02c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800304e:	d027      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003058:	d022      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003062:	d01d      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800306c:	d018      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003080:	d00e      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800308a:	d009      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003094:	d004      	beq.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
 8003096:	f240 21b9 	movw	r1, #697	; 0x2b9
 800309a:	4847      	ldr	r0, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x6d4>)
 800309c:	f7fd fa55 	bl	800054a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_OscConfig+0x6d8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fd fc01 	bl	80008ac <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fd fbfd 	bl	80008ac <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e075      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_OscConfig+0x60e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e6:	d004      	beq.n	80030f2 <HAL_RCC_OscConfig+0x60e>
 80030e8:	f240 21cf 	movw	r1, #719	; 0x2cf
 80030ec:	4832      	ldr	r0, [pc, #200]	; (80031b8 <HAL_RCC_OscConfig+0x6d4>)
 80030ee:	f7fd fa2c 	bl	800054a <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	492d      	ldr	r1, [pc, #180]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a19      	ldr	r1, [r3, #32]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	430b      	orrs	r3, r1
 8003116:	4927      	ldr	r1, [pc, #156]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x6d8>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fd fbc3 	bl	80008ac <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fd fbbf 	bl	80008ac <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e037      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x646>
 8003148:	e02f      	b.n	80031aa <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <HAL_RCC_OscConfig+0x6d8>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fd fbac 	bl	80008ac <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fd fba8 	bl	80008ac <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e020      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x674>
 8003176:	e018      	b.n	80031aa <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e013      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x6d0>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	080096b4 	.word	0x080096b4
 80031bc:	42420060 	.word	0x42420060

080031c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e176      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <HAL_RCC_ClockConfig+0x4e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <HAL_RCC_ClockConfig+0x4e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_RCC_ClockConfig+0x4e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_RCC_ClockConfig+0x4e>
 8003204:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003208:	4874      	ldr	r0, [pc, #464]	; (80033dc <HAL_RCC_ClockConfig+0x21c>)
 800320a:	f7fd f99e 	bl	800054a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCC_ClockConfig+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d007      	beq.n	800322a <HAL_RCC_ClockConfig+0x6a>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d004      	beq.n	800322a <HAL_RCC_ClockConfig+0x6a>
 8003220:	f240 3139 	movw	r1, #825	; 0x339
 8003224:	486d      	ldr	r0, [pc, #436]	; (80033dc <HAL_RCC_ClockConfig+0x21c>)
 8003226:	f7fd f990 	bl	800054a <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d910      	bls.n	800325a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 0207 	bic.w	r2, r3, #7
 8003240:	4967      	ldr	r1, [pc, #412]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003248:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e133      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d049      	beq.n	80032fa <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003272:	4b5c      	ldr	r3, [pc, #368]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a5b      	ldr	r2, [pc, #364]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 8003278:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328a:	4b56      	ldr	r3, [pc, #344]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 8003290:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003294:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d024      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d020      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b90      	cmp	r3, #144	; 0x90
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2ba0      	cmp	r3, #160	; 0xa0
 80032b4:	d018      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2bb0      	cmp	r3, #176	; 0xb0
 80032bc:	d014      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2bc0      	cmp	r3, #192	; 0xc0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2bd0      	cmp	r3, #208	; 0xd0
 80032cc:	d00c      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2be0      	cmp	r3, #224	; 0xe0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2bf0      	cmp	r3, #240	; 0xf0
 80032dc:	d004      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x128>
 80032de:	f240 315f 	movw	r1, #863	; 0x35f
 80032e2:	483e      	ldr	r0, [pc, #248]	; (80033dc <HAL_RCC_ClockConfig+0x21c>)
 80032e4:	f7fd f931 	bl	800054a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b3e      	ldr	r3, [pc, #248]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	493b      	ldr	r1, [pc, #236]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d051      	beq.n	80033aa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x168>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d008      	beq.n	8003328 <HAL_RCC_ClockConfig+0x168>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d004      	beq.n	8003328 <HAL_RCC_ClockConfig+0x168>
 800331e:	f240 3166 	movw	r1, #870	; 0x366
 8003322:	482e      	ldr	r0, [pc, #184]	; (80033dc <HAL_RCC_ClockConfig+0x21c>)
 8003324:	f7fd f911 	bl	800054a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d115      	bne.n	8003368 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0c0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b4      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0ac      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 0203 	bic.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337a:	f7fd fa97 	bl	80008ac <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003380:	e00a      	b.n	8003398 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7fd fa93 	bl	80008ac <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e094      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x224>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 020c 	and.w	r2, r3, #12
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d1eb      	bne.n	8003382 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d217      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 0207 	bic.w	r2, r3, #7
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_ClockConfig+0x220>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d008      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e073      	b.n	80034c2 <HAL_RCC_ClockConfig+0x302>
 80033da:	bf00      	nop
 80033dc:	080096b4 	.word	0x080096b4
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d025      	beq.n	8003440 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_RCC_ClockConfig+0x26e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003404:	d013      	beq.n	800342e <HAL_RCC_ClockConfig+0x26e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800340e:	d00e      	beq.n	800342e <HAL_RCC_ClockConfig+0x26e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x26e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003422:	d004      	beq.n	800342e <HAL_RCC_ClockConfig+0x26e>
 8003424:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003428:	4828      	ldr	r0, [pc, #160]	; (80034cc <HAL_RCC_ClockConfig+0x30c>)
 800342a:	f7fd f88e 	bl	800054a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_ClockConfig+0x310>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4925      	ldr	r1, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x310>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d026      	beq.n	800349a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2c6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d013      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2c6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003466:	d00e      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2c6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2c6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800347a:	d004      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2c6>
 800347c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003480:	4812      	ldr	r0, [pc, #72]	; (80034cc <HAL_RCC_ClockConfig+0x30c>)
 8003482:	f7fd f862 	bl	800054a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x310>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x310>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x310>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x314>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x318>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x31c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f9b4 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	080096b4 	.word	0x080096b4
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08009840 	.word	0x08009840
 80034d8:	20000004 	.word	0x20000004
 80034dc:	20000008 	.word	0x20000008

080034e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	b490      	push	{r4, r7}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034e6:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_RCC_GetSysClockFreq+0xac>)
 80034e8:	1d3c      	adds	r4, r7, #4
 80034ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034f0:	f240 2301 	movw	r3, #513	; 0x201
 80034f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800350a:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb0>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d002      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 800351a:	2b08      	cmp	r3, #8
 800351c:	d003      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x46>
 800351e:	e02b      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003522:	623b      	str	r3, [r7, #32]
      break;
 8003524:	e02b      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	0c9b      	lsrs	r3, r3, #18
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3328      	adds	r3, #40	; 0x28
 8003530:	443b      	add	r3, r7
 8003532:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003536:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d012      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0c5b      	lsrs	r3, r3, #17
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	3328      	adds	r3, #40	; 0x28
 800354e:	443b      	add	r3, r7
 8003550:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003554:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355a:	fb03 f202 	mul.w	r2, r3, r2
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e004      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	623b      	str	r3, [r7, #32]
      break;
 8003576:	e002      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_GetSysClockFreq+0xb4>)
 800357a:	623b      	str	r3, [r7, #32]
      break;
 800357c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357e:	6a3b      	ldr	r3, [r7, #32]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bc90      	pop	{r4, r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	080096ec 	.word	0x080096ec
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	003d0900 	.word	0x003d0900

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b02      	ldr	r3, [pc, #8]	; (80035ac <HAL_RCC_GetHCLKFreq+0x10>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	20000004 	.word	0x20000004

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff2 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08009850 	.word	0x08009850

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffde 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0adb      	lsrs	r3, r3, #11
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	08009850 	.word	0x08009850

08003600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <RCC_Delay+0x34>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <RCC_Delay+0x38>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0a5b      	lsrs	r3, r3, #9
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800361c:	bf00      	nop
  }
  while (Delay --);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f9      	bne.n	800361c <RCC_Delay+0x1c>
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	20000004 	.word	0x20000004
 8003638:	10624dd3 	.word	0x10624dd3

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003670:	216c      	movs	r1, #108	; 0x6c
 8003672:	4873      	ldr	r0, [pc, #460]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003674:	f7fc ff69 	bl	800054a <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8095 	beq.w	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	d00d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036b0:	2174      	movs	r1, #116	; 0x74
 80036b2:	4863      	ldr	r0, [pc, #396]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80036b4:	f7fc ff49 	bl	800054a <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b8:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c4:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	4a5e      	ldr	r2, [pc, #376]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ce:	61d3      	str	r3, [r2, #28]
 80036d0:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d118      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ec:	4b56      	ldr	r3, [pc, #344]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a55      	ldr	r2, [pc, #340]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f8:	f7fd f8d8 	bl	80008ac <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	e008      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fd f8d4 	bl	80008ac <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e092      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d027      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d014      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd f8a3 	bl	80008ac <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd f89f 	bl	80008ac <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e05b      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	492a      	ldr	r1, [pc, #168]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800379a:	4313      	orrs	r3, r2
 800379c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037cc:	d00d      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80037e2:	21b9      	movs	r1, #185	; 0xb9
 80037e4:	4816      	ldr	r0, [pc, #88]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80037e6:	f7fc feb0 	bl	800054a <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4913      	ldr	r1, [pc, #76]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800381a:	f240 1115 	movw	r1, #277	; 0x115
 800381e:	4808      	ldr	r0, [pc, #32]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003820:	f7fc fe93 	bl	800054a <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	080096fc 	.word	0x080096fc
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	42420440 	.word	0x42420440

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_TIM_Base_Start_IT+0x3a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d00e      	beq.n	800388a <HAL_TIM_Base_Start_IT+0x3a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_TIM_Base_Start_IT+0x3a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_TIM_Base_Start_IT+0x3a>
 8003880:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003884:	4827      	ldr	r0, [pc, #156]	; (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 8003886:	f7fc fe60 	bl	800054a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e03a      	b.n	8003910 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x8a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d009      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIM_Base_Start_IT+0x8a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d010      	beq.n	800390e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fc:	e007      	b.n	800390e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	08009748 	.word	0x08009748

08003928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e093      	b.n	8003a62 <HAL_TIM_PWM_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_TIM_PWM_Init+0x144>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_TIM_PWM_Init+0x44>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d00e      	beq.n	800396c <HAL_TIM_PWM_Init+0x44>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a47      	ldr	r2, [pc, #284]	; (8003a70 <HAL_TIM_PWM_Init+0x148>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIM_PWM_Init+0x44>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a45      	ldr	r2, [pc, #276]	; (8003a74 <HAL_TIM_PWM_Init+0x14c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_PWM_Init+0x44>
 8003962:	f240 5113 	movw	r1, #1299	; 0x513
 8003966:	4844      	ldr	r0, [pc, #272]	; (8003a78 <HAL_TIM_PWM_Init+0x150>)
 8003968:	f7fc fdef 	bl	800054a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d014      	beq.n	800399e <HAL_TIM_PWM_Init+0x76>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d010      	beq.n	800399e <HAL_TIM_PWM_Init+0x76>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d00c      	beq.n	800399e <HAL_TIM_PWM_Init+0x76>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d008      	beq.n	800399e <HAL_TIM_PWM_Init+0x76>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d004      	beq.n	800399e <HAL_TIM_PWM_Init+0x76>
 8003994:	f240 5114 	movw	r1, #1300	; 0x514
 8003998:	4837      	ldr	r0, [pc, #220]	; (8003a78 <HAL_TIM_PWM_Init+0x150>)
 800399a:	f7fc fdd6 	bl	800054a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <HAL_TIM_PWM_Init+0x9c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ae:	d009      	beq.n	80039c4 <HAL_TIM_PWM_Init+0x9c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d004      	beq.n	80039c4 <HAL_TIM_PWM_Init+0x9c>
 80039ba:	f240 5115 	movw	r1, #1301	; 0x515
 80039be:	482e      	ldr	r0, [pc, #184]	; (8003a78 <HAL_TIM_PWM_Init+0x150>)
 80039c0:	f7fc fdc3 	bl	800054a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_TIM_PWM_Init+0xb6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d004      	beq.n	80039de <HAL_TIM_PWM_Init+0xb6>
 80039d4:	f240 5116 	movw	r1, #1302	; 0x516
 80039d8:	4827      	ldr	r0, [pc, #156]	; (8003a78 <HAL_TIM_PWM_Init+0x150>)
 80039da:	f7fc fdb6 	bl	800054a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_PWM_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fc fde6 	bl	80005c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fad0 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	08009748 	.word	0x08009748

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa5b 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa4e 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa5d 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa31 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa24 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa33 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa07 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f9fa 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa09 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9dd 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9d0 	bl	8003f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9df 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc fc58 	bl	80004b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fdb3 	bl	8004792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9a3 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd7e 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b3c      	cmp	r3, #60	; 0x3c
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003cb6:	f241 0127 	movw	r1, #4135	; 0x1027
 8003cba:	4881      	ldr	r0, [pc, #516]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003cbc:	f7fc fc45 	bl	800054a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d008      	beq.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d004      	beq.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003cd0:	f241 0128 	movw	r1, #4136	; 0x1028
 8003cd4:	487a      	ldr	r0, [pc, #488]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003cd6:	f7fc fc38 	bl	800054a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003cea:	f241 0129 	movw	r1, #4137	; 0x1029
 8003cee:	4874      	ldr	r0, [pc, #464]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003cf0:	f7fc fc2b 	bl	800054a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x82>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_PWM_ConfigChannel+0x82>
 8003d04:	f241 012a 	movw	r1, #4138	; 0x102a
 8003d08:	486d      	ldr	r0, [pc, #436]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003d0a:	f7fc fc1e 	bl	800054a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x90>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e119      	b.n	8003f50 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	f200 810c 	bhi.w	8003f44 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003f45 	.word	0x08003f45
 8003d3c:	08003f45 	.word	0x08003f45
 8003d40:	08003f45 	.word	0x08003f45
 8003d44:	08003ddb 	.word	0x08003ddb
 8003d48:	08003f45 	.word	0x08003f45
 8003d4c:	08003f45 	.word	0x08003f45
 8003d50:	08003f45 	.word	0x08003f45
 8003d54:	08003e4f 	.word	0x08003e4f
 8003d58:	08003f45 	.word	0x08003f45
 8003d5c:	08003f45 	.word	0x08003f45
 8003d60:	08003f45 	.word	0x08003f45
 8003d64:	08003ed1 	.word	0x08003ed1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d00e      	beq.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a50      	ldr	r2, [pc, #320]	; (8003ecc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x10e>
 8003d90:	f241 0134 	movw	r1, #4148	; 0x1034
 8003d94:	484a      	ldr	r0, [pc, #296]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003d96:	f7fc fbd8 	bl	800054a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f967 	bl	8004074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0208 	orr.w	r2, r2, #8
 8003db4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0204 	bic.w	r2, r2, #4
 8003dc4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6999      	ldr	r1, [r3, #24]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]
      break;
 8003dd8:	e0b5      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x180>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x180>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x180>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a33      	ldr	r2, [pc, #204]	; (8003ecc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x180>
 8003e02:	f241 0145 	movw	r1, #4165	; 0x1045
 8003e06:	482e      	ldr	r0, [pc, #184]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003e08:	f7fc fb9f 	bl	800054a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f9be 	bl	8004194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      break;
 8003e4c:	e07b      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d00e      	beq.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_TIM_PWM_ConfigChannel+0x240>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003e76:	f241 0156 	movw	r1, #4182	; 0x1056
 8003e7a:	4811      	ldr	r0, [pc, #68]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003e7c:	f7fc fb65 	bl	800054a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa18 	bl	80042bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0208 	orr.w	r2, r2, #8
 8003e9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
 8003eaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69d9      	ldr	r1, [r3, #28]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	61da      	str	r2, [r3, #28]
      break;
 8003ebe:	e042      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8003ec0:	08009748 	.word	0x08009748
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x276>
 8003ef8:	f241 0167 	movw	r1, #4199	; 0x1067
 8003efc:	4819      	ldr	r0, [pc, #100]	; (8003f64 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8003efe:	f7fc fb24 	bl	800054a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fa6b 	bl	80043e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	021a      	lsls	r2, r3, #8
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	61da      	str	r2, [r3, #28]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    default:
      break;
 8003f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	08009748 	.word	0x08009748

08003f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d007      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800

08004074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 0302 	bic.w	r3, r3, #2
 80040bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a30      	ldr	r2, [pc, #192]	; (800418c <TIM_OC1_SetConfig+0x118>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d119      	bne.n	8004104 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <TIM_OC1_SetConfig+0x76>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d004      	beq.n	80040ea <TIM_OC1_SetConfig+0x76>
 80040e0:	f641 2141 	movw	r1, #6721	; 0x1a41
 80040e4:	482a      	ldr	r0, [pc, #168]	; (8004190 <TIM_OC1_SetConfig+0x11c>)
 80040e6:	f7fc fa30 	bl	800054a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0308 	bic.w	r3, r3, #8
 80040f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a21      	ldr	r2, [pc, #132]	; (800418c <TIM_OC1_SetConfig+0x118>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d12d      	bne.n	8004168 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d008      	beq.n	8004128 <TIM_OC1_SetConfig+0xb4>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <TIM_OC1_SetConfig+0xb4>
 800411e:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8004122:	481b      	ldr	r0, [pc, #108]	; (8004190 <TIM_OC1_SetConfig+0x11c>)
 8004124:	f7fc fa11 	bl	800054a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004130:	d008      	beq.n	8004144 <TIM_OC1_SetConfig+0xd0>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <TIM_OC1_SetConfig+0xd0>
 800413a:	f641 214f 	movw	r1, #6735	; 0x1a4f
 800413e:	4814      	ldr	r0, [pc, #80]	; (8004190 <TIM_OC1_SetConfig+0x11c>)
 8004140:	f7fc fa03 	bl	800054a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00
 8004190:	08009748 	.word	0x08009748

08004194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <TIM_OC2_SetConfig+0x120>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d11a      	bne.n	800422a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <TIM_OC2_SetConfig+0x7a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d004      	beq.n	800420e <TIM_OC2_SetConfig+0x7a>
 8004204:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8004208:	482b      	ldr	r0, [pc, #172]	; (80042b8 <TIM_OC2_SetConfig+0x124>)
 800420a:	f7fc f99e 	bl	800054a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC2_SetConfig+0x120>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d12f      	bne.n	8004292 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423a:	d008      	beq.n	800424e <TIM_OC2_SetConfig+0xba>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <TIM_OC2_SetConfig+0xba>
 8004244:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8004248:	481b      	ldr	r0, [pc, #108]	; (80042b8 <TIM_OC2_SetConfig+0x124>)
 800424a:	f7fc f97e 	bl	800054a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d008      	beq.n	800426a <TIM_OC2_SetConfig+0xd6>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <TIM_OC2_SetConfig+0xd6>
 8004260:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8004264:	4814      	ldr	r0, [pc, #80]	; (80042b8 <TIM_OC2_SetConfig+0x124>)
 8004266:	f7fc f970 	bl	800054a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	621a      	str	r2, [r3, #32]
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	08009748 	.word	0x08009748

080042bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a31      	ldr	r2, [pc, #196]	; (80043dc <TIM_OC3_SetConfig+0x120>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d11a      	bne.n	8004350 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <TIM_OC3_SetConfig+0x78>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d004      	beq.n	8004334 <TIM_OC3_SetConfig+0x78>
 800432a:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800432e:	482c      	ldr	r0, [pc, #176]	; (80043e0 <TIM_OC3_SetConfig+0x124>)
 8004330:	f7fc f90b 	bl	800054a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800433a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a22      	ldr	r2, [pc, #136]	; (80043dc <TIM_OC3_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d12f      	bne.n	80043b8 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004360:	d008      	beq.n	8004374 <TIM_OC3_SetConfig+0xb8>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <TIM_OC3_SetConfig+0xb8>
 800436a:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800436e:	481c      	ldr	r0, [pc, #112]	; (80043e0 <TIM_OC3_SetConfig+0x124>)
 8004370:	f7fc f8eb 	bl	800054a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437c:	d008      	beq.n	8004390 <TIM_OC3_SetConfig+0xd4>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <TIM_OC3_SetConfig+0xd4>
 8004386:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800438a:	4815      	ldr	r0, [pc, #84]	; (80043e0 <TIM_OC3_SetConfig+0x124>)
 800438c:	f7fc f8dd 	bl	800054a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	08009748 	.word	0x08009748

080043e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800442e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <TIM_OC4_SetConfig+0xb4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d117      	bne.n	8004474 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444c:	d008      	beq.n	8004460 <TIM_OC4_SetConfig+0x7c>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <TIM_OC4_SetConfig+0x7c>
 8004456:	f641 3123 	movw	r1, #6947	; 0x1b23
 800445a:	4810      	ldr	r0, [pc, #64]	; (800449c <TIM_OC4_SetConfig+0xb8>)
 800445c:	f7fc f875 	bl	800054a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	08009748 	.word	0x08009748

080044a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d00e      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a47      	ldr	r2, [pc, #284]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044d2:	f240 7186 	movw	r1, #1926	; 0x786
 80044d6:	4846      	ldr	r0, [pc, #280]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80044d8:	f7fc f837 	bl	800054a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d01c      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d018      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b30      	cmp	r3, #48	; 0x30
 80044fa:	d014      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d010      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d00c      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b60      	cmp	r3, #96	; 0x60
 8004512:	d008      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b70      	cmp	r3, #112	; 0x70
 800451a:	d004      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800451c:	f240 7187 	movw	r1, #1927	; 0x787
 8004520:	4833      	ldr	r0, [pc, #204]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8004522:	f7fc f812 	bl	800054a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d008      	beq.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004536:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800453a:	482d      	ldr	r0, [pc, #180]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800453c:	f7fc f805 	bl	800054a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800454a:	2302      	movs	r3, #2
 800454c:	e046      	b.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d009      	beq.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	08009780 	.word	0x08009780

080045f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800460c:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8004610:	485a      	ldr	r0, [pc, #360]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8004612:	f7fb ff9a 	bl	800054a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d008      	beq.n	8004632 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8004628:	f240 71c4 	movw	r1, #1988	; 0x7c4
 800462c:	4853      	ldr	r0, [pc, #332]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800462e:	f7fb ff8c 	bl	800054a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d008      	beq.n	800464e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8004644:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8004648:	484c      	ldr	r0, [pc, #304]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800464a:	f7fb ff7e 	bl	800054a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d013      	beq.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	d00e      	beq.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d009      	beq.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8004674:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8004678:	4840      	ldr	r0, [pc, #256]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800467a:	f7fb ff66 	bl	800054a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2bff      	cmp	r3, #255	; 0xff
 8004684:	d904      	bls.n	8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8004686:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800468a:	483c      	ldr	r0, [pc, #240]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800468c:	f7fb ff5d 	bl	800054a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004698:	d008      	beq.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80046a2:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80046a6:	4835      	ldr	r0, [pc, #212]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80046a8:	f7fb ff4f 	bl	800054a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d004      	beq.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80046be:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80046c2:	482e      	ldr	r0, [pc, #184]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80046c4:	f7fb ff41 	bl	800054a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d0:	d008      	beq.n	80046e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80046da:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80046de:	4827      	ldr	r0, [pc, #156]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80046e0:	f7fb ff33 	bl	800054a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e03d      	b.n	800476e <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	08009780 	.word	0x08009780

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e092      	b.n	80048dc <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02c      	beq.n	8004818 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a48      	ldr	r2, [pc, #288]	; (80048e4 <HAL_UART_Init+0x140>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_UART_Init+0x42>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a46      	ldr	r2, [pc, #280]	; (80048e8 <HAL_UART_Init+0x144>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_UART_Init+0x42>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a45      	ldr	r2, [pc, #276]	; (80048ec <HAL_UART_Init+0x148>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_UART_Init+0x42>
 80047dc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80047e0:	4843      	ldr	r0, [pc, #268]	; (80048f0 <HAL_UART_Init+0x14c>)
 80047e2:	f7fb feb2 	bl	800054a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d028      	beq.n	8004840 <HAL_UART_Init+0x9c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d023      	beq.n	8004840 <HAL_UART_Init+0x9c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004800:	d01e      	beq.n	8004840 <HAL_UART_Init+0x9c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480a:	d019      	beq.n	8004840 <HAL_UART_Init+0x9c>
 800480c:	f240 116d 	movw	r1, #365	; 0x16d
 8004810:	4837      	ldr	r0, [pc, #220]	; (80048f0 <HAL_UART_Init+0x14c>)
 8004812:	f7fb fe9a 	bl	800054a <assert_failed>
 8004816:	e013      	b.n	8004840 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a31      	ldr	r2, [pc, #196]	; (80048e4 <HAL_UART_Init+0x140>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_UART_Init+0x9c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <HAL_UART_Init+0x144>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_UART_Init+0x9c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <HAL_UART_Init+0x148>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_UART_Init+0x9c>
 8004836:	f240 1171 	movw	r1, #369	; 0x171
 800483a:	482d      	ldr	r0, [pc, #180]	; (80048f0 <HAL_UART_Init+0x14c>)
 800483c:	f7fb fe85 	bl	800054a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_UART_Init+0xb8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004850:	d004      	beq.n	800485c <HAL_UART_Init+0xb8>
 8004852:	f240 1173 	movw	r1, #371	; 0x173
 8004856:	4826      	ldr	r0, [pc, #152]	; (80048f0 <HAL_UART_Init+0x14c>)
 8004858:	f7fb fe77 	bl	800054a <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fb ff01 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2224      	movs	r2, #36	; 0x24
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f830 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40004400 	.word	0x40004400
 80048ec:	40004800 	.word	0x40004800
 80048f0:	080097bc 	.word	0x080097bc

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a5f      	ldr	r2, [pc, #380]	; (8004a80 <UART_SetConfig+0x18c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d904      	bls.n	8004910 <UART_SetConfig+0x1c>
 8004906:	f640 6153 	movw	r1, #3667	; 0xe53
 800490a:	485e      	ldr	r0, [pc, #376]	; (8004a84 <UART_SetConfig+0x190>)
 800490c:	f7fb fe1d 	bl	800054a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <UART_SetConfig+0x38>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004920:	d004      	beq.n	800492c <UART_SetConfig+0x38>
 8004922:	f640 6154 	movw	r1, #3668	; 0xe54
 8004926:	4857      	ldr	r0, [pc, #348]	; (8004a84 <UART_SetConfig+0x190>)
 8004928:	f7fb fe0f 	bl	800054a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <UART_SetConfig+0x5e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493c:	d009      	beq.n	8004952 <UART_SetConfig+0x5e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004946:	d004      	beq.n	8004952 <UART_SetConfig+0x5e>
 8004948:	f640 6155 	movw	r1, #3669	; 0xe55
 800494c:	484d      	ldr	r0, [pc, #308]	; (8004a84 <UART_SetConfig+0x190>)
 800494e:	f7fb fdfc 	bl	800054a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <UART_SetConfig+0x74>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <UART_SetConfig+0x7e>
 8004968:	f640 6156 	movw	r1, #3670	; 0xe56
 800496c:	4845      	ldr	r0, [pc, #276]	; (8004a84 <UART_SetConfig+0x190>)
 800496e:	f7fb fdec 	bl	800054a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049a4:	f023 030c 	bic.w	r3, r3, #12
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2e      	ldr	r2, [pc, #184]	; (8004a88 <UART_SetConfig+0x194>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d103      	bne.n	80049da <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049d2:	f7fe fe01 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	e002      	b.n	80049e0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fe fde9 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 80049de:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009a      	lsls	r2, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <UART_SetConfig+0x198>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	0119      	lsls	r1, r3, #4
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009a      	lsls	r2, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a16:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <UART_SetConfig+0x198>)
 8004a18:	fba3 0302 	umull	r0, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2064      	movs	r0, #100	; 0x64
 8004a20:	fb00 f303 	mul.w	r3, r0, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <UART_SetConfig+0x198>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a36:	4419      	add	r1, r3
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009a      	lsls	r2, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <UART_SetConfig+0x198>)
 8004a50:	fba3 0302 	umull	r0, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2064      	movs	r0, #100	; 0x64
 8004a58:	fb00 f303 	mul.w	r3, r0, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <UART_SetConfig+0x198>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	440a      	add	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	0044aa20 	.word	0x0044aa20
 8004a84:	080097bc 	.word	0x080097bc
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 0014 	add.w	r0, r7, #20
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	b004      	add	sp, #16
 8004aae:	4770      	bx	lr

08004ab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ac0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ac4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ae8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b28:	b084      	sub	sp, #16
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	f107 0014 	add.w	r0, r7, #20
 8004b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	b004      	add	sp, #16
 8004b66:	4770      	bx	lr

08004b68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b09b      	sub	sp, #108	; 0x6c
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	78db      	ldrb	r3, [r3, #3]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d81f      	bhi.n	8004bda <USB_ActivateEndpoint+0x72>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <USB_ActivateEndpoint+0x38>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004be3 	.word	0x08004be3
 8004bac:	08004bbf 	.word	0x08004bbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bb0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bbc:	e012      	b.n	8004be4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bca:	e00b      	b.n	8004be4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bd8:	e004      	b.n	8004be4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004be0:	e000      	b.n	8004be4 <USB_ActivateEndpoint+0x7c>
      break;
 8004be2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	7b1b      	ldrb	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 8149 	bne.w	8004ee8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8084 	beq.w	8004d68 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	011a      	lsls	r2, r3, #4
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	88db      	ldrh	r3, [r3, #6]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	81fb      	strh	r3, [r7, #14]
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <USB_ActivateEndpoint+0x17c>
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	81bb      	strh	r3, [r7, #12]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	89bb      	ldrh	r3, [r7, #12]
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d020      	beq.n	8004d2e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	813b      	strh	r3, [r7, #8]
 8004d04:	893b      	ldrh	r3, [r7, #8]
 8004d06:	f083 0320 	eor.w	r3, r3, #32
 8004d0a:	813b      	strh	r3, [r7, #8]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]
 8004d2c:	e27f      	b.n	800522e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	897b      	ldrh	r3, [r7, #10]
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]
 8004d66:	e262      	b.n	800522e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	4413      	add	r3, r2
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	011a      	lsls	r2, r3, #4
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	88db      	ldrh	r3, [r3, #6]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	4413      	add	r3, r2
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	011a      	lsls	r2, r3, #4
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d112      	bne.n	8004dee <USB_ActivateEndpoint+0x286>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e02f      	b.n	8004e4e <USB_ActivateEndpoint+0x2e6>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b3e      	cmp	r3, #62	; 0x3e
 8004df4:	d813      	bhi.n	8004e1e <USB_ActivateEndpoint+0x2b6>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <USB_ActivateEndpoint+0x2a8>
 8004e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e017      	b.n	8004e4e <USB_ActivateEndpoint+0x2e6>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <USB_ActivateEndpoint+0x2d0>
 8004e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e34:	3b01      	subs	r3, #1
 8004e36:	663b      	str	r3, [r7, #96]	; 0x60
 8004e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	83fb      	strh	r3, [r7, #30]
 8004e5c:	8bfb      	ldrh	r3, [r7, #30]
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <USB_ActivateEndpoint+0x336>
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	83bb      	strh	r3, [r7, #28]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	8bbb      	ldrh	r3, [r7, #28]
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb4:	837b      	strh	r3, [r7, #26]
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ebc:	837b      	strh	r3, [r7, #26]
 8004ebe:	8b7b      	ldrh	r3, [r7, #26]
 8004ec0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ec4:	837b      	strh	r3, [r7, #26]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	8b7b      	ldrh	r3, [r7, #26]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e1a2      	b.n	800522e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f34:	4413      	add	r3, r2
 8004f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	011a      	lsls	r2, r3, #4
 8004f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f46:	657b      	str	r3, [r7, #84]	; 0x54
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	891b      	ldrh	r3, [r3, #8]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f68:	4413      	add	r3, r2
 8004f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	895b      	ldrh	r3, [r3, #10]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 8091 	bne.w	80050b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01b      	beq.n	8004fe6 <USB_ActivateEndpoint+0x47e>
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	441a      	add	r2, r3
 8004fd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ff4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01b      	beq.n	8005036 <USB_ActivateEndpoint+0x4ce>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005014:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005032:	b29b      	uxth	r3, r3
 8005034:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800504e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005050:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005054:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005056:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800505c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	867b      	strh	r3, [r7, #50]	; 0x32
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]
 80050b6:	e0ba      	b.n	800522e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01d      	beq.n	8005110 <USB_ActivateEndpoint+0x5a8>
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	b29b      	uxth	r3, r3
 800510e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005120:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01d      	beq.n	8005168 <USB_ActivateEndpoint+0x600>
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	78db      	ldrb	r3, [r3, #3]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d024      	beq.n	80051ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800518a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800518e:	f083 0320 	eor.w	r3, r3, #32
 8005192:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]
 80051b8:	e01d      	b.n	80051f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800522e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005232:	4618      	mov	r0, r3
 8005234:	376c      	adds	r7, #108	; 0x6c
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800523c:	b480      	push	{r7}
 800523e:	b08d      	sub	sp, #52	; 0x34
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	7b1b      	ldrb	r3, [r3, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 808e 	bne.w	800536c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d044      	beq.n	80052e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	81bb      	strh	r3, [r7, #12]
 8005266:	89bb      	ldrh	r3, [r7, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <USB_DeactivateEndpoint+0x6c>
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	817b      	strh	r3, [r7, #10]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	441a      	add	r2, r3
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	813b      	strh	r3, [r7, #8]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
 80052e0:	e192      	b.n	8005608 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	827b      	strh	r3, [r7, #18]
 80052f0:	8a7b      	ldrh	r3, [r7, #18]
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01b      	beq.n	8005332 <USB_DeactivateEndpoint+0xf6>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	823b      	strh	r3, [r7, #16]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	8a3b      	ldrh	r3, [r7, #16]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	81fb      	strh	r3, [r7, #14]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	89fb      	ldrh	r3, [r7, #14]
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
 800536a:	e14d      	b.n	8005608 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 80a5 	bne.w	80054c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	843b      	strh	r3, [r7, #32]
 8005384:	8c3b      	ldrh	r3, [r7, #32]
 8005386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01b      	beq.n	80053c6 <USB_DeactivateEndpoint+0x18a>
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	83fb      	strh	r3, [r7, #30]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	8bfb      	ldrh	r3, [r7, #30]
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	83bb      	strh	r3, [r7, #28]
 80053d4:	8bbb      	ldrh	r3, [r7, #28]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01b      	beq.n	8005416 <USB_DeactivateEndpoint+0x1da>
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	837b      	strh	r3, [r7, #26]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	8b7b      	ldrh	r3, [r7, #26]
 8005402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005412:	b29b      	uxth	r3, r3
 8005414:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	833b      	strh	r3, [r7, #24]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	8b3b      	ldrh	r3, [r7, #24]
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	82fb      	strh	r3, [r7, #22]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	8afb      	ldrh	r3, [r7, #22]
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549c:	82bb      	strh	r3, [r7, #20]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	8abb      	ldrh	r3, [r7, #20]
 80054aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8013      	strh	r3, [r2, #0]
 80054be:	e0a3      	b.n	8005608 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <USB_DeactivateEndpoint+0x2d4>
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800551e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <USB_DeactivateEndpoint+0x324>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005604:	b29b      	uxth	r3, r3
 8005606:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3734      	adds	r7, #52	; 0x34
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b0cc      	sub	sp, #304	; 0x130
 8005618:	af00      	add	r7, sp, #0
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005622:	6018      	str	r0, [r3, #0]
 8005624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b01      	cmp	r3, #1
 800563c:	f041 817d 	bne.w	800693a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d908      	bls.n	800566e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800566c:	e007      	b.n	800567e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800566e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800567e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	7b1b      	ldrb	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d152      	bne.n	8005734 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	88da      	ldrh	r2, [r3, #6]
 80056a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056b4:	6800      	ldr	r0, [r0, #0]
 80056b6:	f001 ff23 	bl	8007500 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4619      	mov	r1, r3
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056ec:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	440a      	add	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005708:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4413      	add	r3, r2
 8005710:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005722:	b29a      	uxth	r2, r3
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	f001 b8b5 	b.w	800689e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	78db      	ldrb	r3, [r3, #3]
 8005740:	2b02      	cmp	r3, #2
 8005742:	f040 84c6 	bne.w	80060d2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	f240 8443 	bls.w	8005fea <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 823e 	beq.w	8005c82 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800580e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005812:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 809a 	bne.w	8005960 <USB_EPStartXfer+0x34c>
 800582c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005838:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	4619      	mov	r1, r3
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800585e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	440a      	add	r2, r1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	011a      	lsls	r2, r3, #4
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4413      	add	r3, r2
 8005882:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d122      	bne.n	80058de <USB_EPStartXfer+0x2ca>
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e079      	b.n	80059d2 <USB_EPStartXfer+0x3be>
 80058de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e2:	2b3e      	cmp	r3, #62	; 0x3e
 80058e4:	d81b      	bhi.n	800591e <USB_EPStartXfer+0x30a>
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <USB_EPStartXfer+0x2f2>
 80058fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005900:	3301      	adds	r3, #1
 8005902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800590a:	b29b      	uxth	r3, r3
 800590c:	029b      	lsls	r3, r3, #10
 800590e:	b29a      	uxth	r2, r3
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e059      	b.n	80059d2 <USB_EPStartXfer+0x3be>
 800591e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <USB_EPStartXfer+0x32a>
 8005934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005938:	3b01      	subs	r3, #1
 800593a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800593e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005942:	b29b      	uxth	r3, r3
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	b29b      	uxth	r3, r3
 8005948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005950:	b29a      	uxth	r2, r3
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e038      	b.n	80059d2 <USB_EPStartXfer+0x3be>
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d130      	bne.n	80059d2 <USB_EPStartXfer+0x3be>
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	4619      	mov	r1, r3
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800598a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800598e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	440a      	add	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6959      	ldr	r1, [r3, #20]
 80059ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a00:	6800      	ldr	r0, [r0, #0]
 8005a02:	f001 fd7d 	bl	8007500 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a16:	441a      	add	r2, r3
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d90f      	bls.n	8005a60 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	1ad2      	subs	r2, r2, r3
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	621a      	str	r2, [r3, #32]
 8005a5e:	e00e      	b.n	8005a7e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 809a 	bne.w	8005bc4 <USB_EPStartXfer+0x5b0>
 8005a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005a98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005abe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ac2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	440a      	add	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ade:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d122      	bne.n	8005b42 <USB_EPStartXfer+0x52e>
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b20:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e083      	b.n	8005c4a <USB_EPStartXfer+0x636>
 8005b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b46:	2b3e      	cmp	r3, #62	; 0x3e
 8005b48:	d81b      	bhi.n	8005b82 <USB_EPStartXfer+0x56e>
 8005b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <USB_EPStartXfer+0x556>
 8005b60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b64:	3301      	adds	r3, #1
 8005b66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e063      	b.n	8005c4a <USB_EPStartXfer+0x636>
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <USB_EPStartXfer+0x58e>
 8005b98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ba2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e042      	b.n	8005c4a <USB_EPStartXfer+0x636>
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d13a      	bne.n	8005c4a <USB_EPStartXfer+0x636>
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005be0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c06:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	891b      	ldrh	r3, [r3, #8]
 8005c56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6959      	ldr	r1, [r3, #20]
 8005c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c78:	6800      	ldr	r0, [r0, #0]
 8005c7a:	f001 fc41 	bl	8007500 <USB_WritePMA>
 8005c7e:	f000 be0e 	b.w	800689e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d16d      	bne.n	8005d6e <USB_EPStartXfer+0x75a>
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb2:	4413      	add	r3, r2
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	011a      	lsls	r2, r3, #4
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d112      	bne.n	8005cfc <USB_EPStartXfer+0x6e8>
 8005cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e063      	b.n	8005dc4 <USB_EPStartXfer+0x7b0>
 8005cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d00:	2b3e      	cmp	r3, #62	; 0x3e
 8005d02:	d817      	bhi.n	8005d34 <USB_EPStartXfer+0x720>
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <USB_EPStartXfer+0x710>
 8005d1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e047      	b.n	8005dc4 <USB_EPStartXfer+0x7b0>
 8005d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <USB_EPStartXfer+0x740>
 8005d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e02a      	b.n	8005dc4 <USB_EPStartXfer+0x7b0>
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d122      	bne.n	8005dc4 <USB_EPStartXfer+0x7b0>
 8005d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9e:	4413      	add	r3, r2
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	011a      	lsls	r2, r3, #4
 8005db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db2:	4413      	add	r3, r2
 8005db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	891b      	ldrh	r3, [r3, #8]
 8005dd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6959      	ldr	r1, [r3, #20]
 8005de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005df2:	6800      	ldr	r0, [r0, #0]
 8005df4:	f001 fb84 	bl	8007500 <USB_WritePMA>
            ep->xfer_buff += len;
 8005df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	441a      	add	r2, r3
 8005e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a1a      	ldr	r2, [r3, #32]
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90f      	bls.n	8005e52 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	621a      	str	r2, [r3, #32]
 8005e50:	e00e      	b.n	8005e70 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d16d      	bne.n	8005f68 <USB_EPStartXfer+0x954>
 8005e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	4413      	add	r3, r2
 8005eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	011a      	lsls	r2, r3, #4
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d112      	bne.n	8005ef6 <USB_EPStartXfer+0x8e2>
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e05d      	b.n	8005fb2 <USB_EPStartXfer+0x99e>
 8005ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efa:	2b3e      	cmp	r3, #62	; 0x3e
 8005efc:	d817      	bhi.n	8005f2e <USB_EPStartXfer+0x91a>
 8005efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <USB_EPStartXfer+0x90a>
 8005f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e041      	b.n	8005fb2 <USB_EPStartXfer+0x99e>
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <USB_EPStartXfer+0x93a>
 8005f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	029b      	lsls	r3, r3, #10
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	e024      	b.n	8005fb2 <USB_EPStartXfer+0x99e>
 8005f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d11c      	bne.n	8005fb2 <USB_EPStartXfer+0x99e>
 8005f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8c:	4413      	add	r3, r2
 8005f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	011a      	lsls	r2, r3, #4
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	895b      	ldrh	r3, [r3, #10]
 8005fbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6959      	ldr	r1, [r3, #20]
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fd8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005fdc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fe0:	6800      	ldr	r0, [r0, #0]
 8005fe2:	f001 fa8d 	bl	8007500 <USB_WritePMA>
 8005fe6:	f000 bc5a 	b.w	800689e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006076:	4413      	add	r3, r2
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	011a      	lsls	r2, r3, #4
 8006088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608a:	4413      	add	r3, r2
 800608c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006090:	65bb      	str	r3, [r7, #88]	; 0x58
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800609a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800609c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6959      	ldr	r1, [r3, #20]
 80060b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	f001 fa18 	bl	8007500 <USB_WritePMA>
 80060d0:	e3e5      	b.n	800689e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	441a      	add	r2, r3
 8006116:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 81bc 	beq.w	80064ec <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d16d      	bne.n	800626e <USB_EPStartXfer+0xc5a>
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	67bb      	str	r3, [r7, #120]	; 0x78
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b2:	4413      	add	r3, r2
 80061b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	011a      	lsls	r2, r3, #4
 80061c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061cc:	677b      	str	r3, [r7, #116]	; 0x74
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d112      	bne.n	80061fc <USB_EPStartXfer+0xbe8>
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e060      	b.n	80062be <USB_EPStartXfer+0xcaa>
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	2b3e      	cmp	r3, #62	; 0x3e
 8006202:	d817      	bhi.n	8006234 <USB_EPStartXfer+0xc20>
 8006204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USB_EPStartXfer+0xc10>
 800621a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006224:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29a      	uxth	r2, r3
 800622e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e044      	b.n	80062be <USB_EPStartXfer+0xcaa>
 8006234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <USB_EPStartXfer+0xc40>
 800624a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800624e:	3b01      	subs	r3, #1
 8006250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006254:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29b      	uxth	r3, r3
 800625e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006266:	b29a      	uxth	r2, r3
 8006268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e027      	b.n	80062be <USB_EPStartXfer+0xcaa>
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d11f      	bne.n	80062be <USB_EPStartXfer+0xcaa>
 800627e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628c:	b29b      	uxth	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006294:	4413      	add	r3, r2
 8006296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800629a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	011a      	lsls	r2, r3, #4
 80062a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	895b      	ldrh	r3, [r3, #10]
 80062ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f001 f907 	bl	8007500 <USB_WritePMA>
          ep->xfer_buff += len;
 80062f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006302:	441a      	add	r2, r3
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	429a      	cmp	r2, r3
 800632a:	d90f      	bls.n	800634c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	621a      	str	r2, [r3, #32]
 800634a:	e00e      	b.n	800636a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2200      	movs	r2, #0
 8006368:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8295 	beq.w	800689e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d16d      	bne.n	8006460 <USB_EPStartXfer+0xe4c>
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063a4:	4413      	add	r3, r2
 80063a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	011a      	lsls	r2, r3, #4
 80063b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063be:	667b      	str	r3, [r7, #100]	; 0x64
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d112      	bne.n	80063ee <USB_EPStartXfer+0xdda>
 80063c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e063      	b.n	80064b6 <USB_EPStartXfer+0xea2>
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	2b3e      	cmp	r3, #62	; 0x3e
 80063f4:	d817      	bhi.n	8006426 <USB_EPStartXfer+0xe12>
 80063f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USB_EPStartXfer+0xe02>
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006410:	3301      	adds	r3, #1
 8006412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29a      	uxth	r2, r3
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e047      	b.n	80064b6 <USB_EPStartXfer+0xea2>
 8006426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <USB_EPStartXfer+0xe32>
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	3b01      	subs	r3, #1
 8006442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29b      	uxth	r3, r3
 8006450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006458:	b29a      	uxth	r2, r3
 800645a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e02a      	b.n	80064b6 <USB_EPStartXfer+0xea2>
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d122      	bne.n	80064b6 <USB_EPStartXfer+0xea2>
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648a:	b29b      	uxth	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006490:	4413      	add	r3, r2
 8006492:	673b      	str	r3, [r7, #112]	; 0x70
 8006494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	011a      	lsls	r2, r3, #4
 80064a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a4:	4413      	add	r3, r2
 80064a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	891b      	ldrh	r3, [r3, #8]
 80064c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6959      	ldr	r1, [r3, #20]
 80064d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064e4:	6800      	ldr	r0, [r0, #0]
 80064e6:	f001 f80b 	bl	8007500 <USB_WritePMA>
 80064ea:	e1d8      	b.n	800689e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d178      	bne.n	80065ee <USB_EPStartXfer+0xfda>
 80064fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006520:	4413      	add	r3, r2
 8006522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	011a      	lsls	r2, r3, #4
 8006534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006538:	4413      	add	r3, r2
 800653a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800653e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d116      	bne.n	8006578 <USB_EPStartXfer+0xf64>
 800654a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e06b      	b.n	8006650 <USB_EPStartXfer+0x103c>
 8006578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657c:	2b3e      	cmp	r3, #62	; 0x3e
 800657e:	d818      	bhi.n	80065b2 <USB_EPStartXfer+0xf9e>
 8006580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800658a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <USB_EPStartXfer+0xf8c>
 8006596:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800659a:	3301      	adds	r3, #1
 800659c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	029b      	lsls	r3, r3, #10
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e04e      	b.n	8006650 <USB_EPStartXfer+0x103c>
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <USB_EPStartXfer+0xfbe>
 80065c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e030      	b.n	8006650 <USB_EPStartXfer+0x103c>
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d128      	bne.n	8006650 <USB_EPStartXfer+0x103c>
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006622:	4413      	add	r3, r2
 8006624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	011a      	lsls	r2, r3, #4
 8006636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800663a:	4413      	add	r3, r2
 800663c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800664e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	891b      	ldrh	r3, [r3, #8]
 800665c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6959      	ldr	r1, [r3, #20]
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	b29b      	uxth	r3, r3
 8006672:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006676:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800667a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800667e:	6800      	ldr	r0, [r0, #0]
 8006680:	f000 ff3e 	bl	8007500 <USB_WritePMA>
          ep->xfer_buff += len;
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695a      	ldr	r2, [r3, #20]
 8006690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006694:	441a      	add	r2, r3
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90f      	bls.n	80066de <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	621a      	str	r2, [r3, #32]
 80066dc:	e00e      	b.n	80066fc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2200      	movs	r2, #0
 80066fa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80cc 	beq.w	800689e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d178      	bne.n	8006816 <USB_EPStartXfer+0x1202>
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006748:	4413      	add	r3, r2
 800674a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	011a      	lsls	r2, r3, #4
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	4413      	add	r3, r2
 8006762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800676a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d116      	bne.n	80067a0 <USB_EPStartXfer+0x118c>
 8006772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800677e:	b29a      	uxth	r2, r3
 8006780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e064      	b.n	800686a <USB_EPStartXfer+0x1256>
 80067a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a4:	2b3e      	cmp	r3, #62	; 0x3e
 80067a6:	d818      	bhi.n	80067da <USB_EPStartXfer+0x11c6>
 80067a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <USB_EPStartXfer+0x11b4>
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c2:	3301      	adds	r3, #1
 80067c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e047      	b.n	800686a <USB_EPStartXfer+0x1256>
 80067da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <USB_EPStartXfer+0x11e6>
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e029      	b.n	800686a <USB_EPStartXfer+0x1256>
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d121      	bne.n	800686a <USB_EPStartXfer+0x1256>
 8006826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800683c:	4413      	add	r3, r2
 800683e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	011a      	lsls	r2, r3, #4
 8006850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006854:	4413      	add	r3, r2
 8006856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800685a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800685e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800686a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	895b      	ldrh	r3, [r3, #10]
 8006876:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6959      	ldr	r1, [r3, #20]
 8006886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688a:	b29b      	uxth	r3, r3
 800688c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006890:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006894:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	f000 fe31 	bl	8007500 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068c0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068cc:	8013      	strh	r3, [r2, #0]
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80068d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068da:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068de:	8812      	ldrh	r2, [r2, #0]
 80068e0:	f082 0210 	eor.w	r2, r2, #16
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80068ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068f6:	8812      	ldrh	r2, [r2, #0]
 80068f8:	f082 0220 	eor.w	r2, r2, #32
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006932:	b29b      	uxth	r3, r3
 8006934:	8013      	strh	r3, [r2, #0]
 8006936:	f000 bc9f 	b.w	8007278 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	7b1b      	ldrb	r3, [r3, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 80ae 	bne.w	8006aa8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800694c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d917      	bls.n	8006998 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006988:	1ad2      	subs	r2, r2, r3
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	619a      	str	r2, [r3, #24]
 8006996:	e00e      	b.n	80069b6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069da:	4413      	add	r3, r2
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	011a      	lsls	r2, r3, #4
 80069ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d116      	bne.n	8006a32 <USB_EPStartXfer+0x141e>
 8006a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e3e8      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
 8006a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a36:	2b3e      	cmp	r3, #62	; 0x3e
 8006a38:	d818      	bhi.n	8006a6c <USB_EPStartXfer+0x1458>
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <USB_EPStartXfer+0x1446>
 8006a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a54:	3301      	adds	r3, #1
 8006a56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	e3cb      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
 8006a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <USB_EPStartXfer+0x1478>
 8006a82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a86:	3b01      	subs	r3, #1
 8006a88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa4:	801a      	strh	r2, [r3, #0]
 8006aa6:	e3ad      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	78db      	ldrb	r3, [r3, #3]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f040 8200 	bne.w	8006eba <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 8091 	bne.w	8006bee <USB_EPStartXfer+0x15da>
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006af0:	4413      	add	r3, r2
 8006af2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	011a      	lsls	r2, r3, #4
 8006b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b08:	4413      	add	r3, r2
 8006b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d116      	bne.n	8006b50 <USB_EPStartXfer+0x153c>
 8006b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e083      	b.n	8006c58 <USB_EPStartXfer+0x1644>
 8006b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5e:	d820      	bhi.n	8006ba2 <USB_EPStartXfer+0x158e>
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	085b      	lsrs	r3, r3, #1
 8006b6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USB_EPStartXfer+0x157c>
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e05a      	b.n	8006c58 <USB_EPStartXfer+0x1644>
 8006ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0x15be>
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e034      	b.n	8006c58 <USB_EPStartXfer+0x1644>
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d12c      	bne.n	8006c58 <USB_EPStartXfer+0x1644>
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c22:	4413      	add	r3, r2
 8006c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	011a      	lsls	r2, r3, #4
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 8091 	bne.w	8006d9a <USB_EPStartXfer+0x1786>
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	011a      	lsls	r2, r3, #4
 8006cb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d116      	bne.n	8006cfc <USB_EPStartXfer+0x16e8>
 8006cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e07c      	b.n	8006df6 <USB_EPStartXfer+0x17e2>
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b3e      	cmp	r3, #62	; 0x3e
 8006d0a:	d820      	bhi.n	8006d4e <USB_EPStartXfer+0x173a>
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d004      	beq.n	8006d3c <USB_EPStartXfer+0x1728>
 8006d32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d36:	3301      	adds	r3, #1
 8006d38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e053      	b.n	8006df6 <USB_EPStartXfer+0x17e2>
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <USB_EPStartXfer+0x176a>
 8006d74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e02d      	b.n	8006df6 <USB_EPStartXfer+0x17e2>
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d125      	bne.n	8006df6 <USB_EPStartXfer+0x17e2>
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	011a      	lsls	r2, r3, #4
 8006dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006df4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 81fe 	beq.w	8007204 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e28:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <USB_EPStartXfer+0x182c>
 8006e34:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 81db 	bne.w	8007204 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e4e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 81d4 	bne.w	8007204 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	441a      	add	r2, r3
 8006ea0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	8013      	strh	r3, [r2, #0]
 8006eb8:	e1a4      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	78db      	ldrb	r3, [r3, #3]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f040 819a 	bne.w	8007200 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d917      	bls.n	8006f18 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	619a      	str	r2, [r3, #24]
 8006f16:	e00e      	b.n	8006f36 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d178      	bne.n	8007038 <USB_EPStartXfer+0x1a24>
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	011a      	lsls	r2, r3, #4
 8006f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f82:	4413      	add	r3, r2
 8006f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d116      	bne.n	8006fc2 <USB_EPStartXfer+0x19ae>
 8006f94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e06b      	b.n	800709a <USB_EPStartXfer+0x1a86>
 8006fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc8:	d818      	bhi.n	8006ffc <USB_EPStartXfer+0x19e8>
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <USB_EPStartXfer+0x19d6>
 8006fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e04e      	b.n	800709a <USB_EPStartXfer+0x1a86>
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USB_EPStartXfer+0x1a08>
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	3b01      	subs	r3, #1
 8007018:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800701c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007020:	b29b      	uxth	r3, r3
 8007022:	029b      	lsls	r3, r3, #10
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e030      	b.n	800709a <USB_EPStartXfer+0x1a86>
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d128      	bne.n	800709a <USB_EPStartXfer+0x1a86>
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007064:	b29b      	uxth	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	4413      	add	r3, r2
 800706e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	011a      	lsls	r2, r3, #4
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	4413      	add	r3, r2
 8007086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800708a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800708e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d178      	bne.n	80071aa <USB_EPStartXfer+0x1b96>
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070dc:	4413      	add	r3, r2
 80070de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	011a      	lsls	r2, r3, #4
 80070f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f4:	4413      	add	r3, r2
 80070f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d116      	bne.n	8007134 <USB_EPStartXfer+0x1b20>
 8007106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	e067      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007138:	2b3e      	cmp	r3, #62	; 0x3e
 800713a:	d818      	bhi.n	800716e <USB_EPStartXfer+0x1b5a>
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <USB_EPStartXfer+0x1b48>
 8007152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007156:	3301      	adds	r3, #1
 8007158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800715c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e04a      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USB_EPStartXfer+0x1b7a>
 8007184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007188:	3b01      	subs	r3, #1
 800718a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800718e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e02c      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d124      	bne.n	8007204 <USB_EPStartXfer+0x1bf0>
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d0:	4413      	add	r3, r2
 80071d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	011a      	lsls	r2, r3, #4
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	e001      	b.n	8007204 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e03a      	b.n	800727a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800722e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007232:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007236:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800723a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800723e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007242:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007274:	b29b      	uxth	r3, r3
 8007276:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d020      	beq.n	80072d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	81bb      	strh	r3, [r7, #12]
 80072ae:	89bb      	ldrh	r3, [r7, #12]
 80072b0:	f083 0310 	eor.w	r3, r3, #16
 80072b4:	81bb      	strh	r3, [r7, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	89bb      	ldrh	r3, [r7, #12]
 80072c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8013      	strh	r3, [r2, #0]
 80072d6:	e01f      	b.n	8007318 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	81fb      	strh	r3, [r7, #14]
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072f6:	81fb      	strh	r3, [r7, #14]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	89fb      	ldrh	r3, [r7, #14]
 8007304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007314:	b29b      	uxth	r3, r3
 8007316:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	7b1b      	ldrb	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 809d 	bne.w	8007472 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d04c      	beq.n	80073da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	823b      	strh	r3, [r7, #16]
 800734e:	8a3b      	ldrh	r3, [r7, #16]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01b      	beq.n	8007390 <USB_EPClearStall+0x6c>
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	81fb      	strh	r3, [r7, #14]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	89fb      	ldrh	r3, [r7, #14]
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	78db      	ldrb	r3, [r3, #3]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d06c      	beq.n	8007472 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	81bb      	strh	r3, [r7, #12]
 80073b0:	89bb      	ldrh	r3, [r7, #12]
 80073b2:	f083 0320 	eor.w	r3, r3, #32
 80073b6:	81bb      	strh	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	89bb      	ldrh	r3, [r7, #12]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]
 80073d8:	e04b      	b.n	8007472 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	82fb      	strh	r3, [r7, #22]
 80073e8:	8afb      	ldrh	r3, [r7, #22]
 80073ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01b      	beq.n	800742a <USB_EPClearStall+0x106>
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007408:	82bb      	strh	r3, [r7, #20]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	8abb      	ldrh	r3, [r7, #20]
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	827b      	strh	r3, [r7, #18]
 8007442:	8a7b      	ldrh	r3, [r7, #18]
 8007444:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007448:	827b      	strh	r3, [r7, #18]
 800744a:	8a7b      	ldrh	r3, [r7, #18]
 800744c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007450:	827b      	strh	r3, [r7, #18]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	8a7b      	ldrh	r3, [r7, #18]
 800745e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746e:	b29b      	uxth	r3, r3
 8007470:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	460b      	mov	r3, r1
 8007488:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2280      	movs	r2, #128	; 0x80
 8007494:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074da:	b29b      	uxth	r3, r3
 80074dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007500:	b480      	push	{r7}
 8007502:	b08d      	sub	sp, #52	; 0x34
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4611      	mov	r1, r2
 800750c:	461a      	mov	r2, r3
 800750e:	460b      	mov	r3, r1
 8007510:	80fb      	strh	r3, [r7, #6]
 8007512:	4613      	mov	r3, r2
 8007514:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007516:	88bb      	ldrh	r3, [r7, #4]
 8007518:	3301      	adds	r3, #1
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	005a      	lsls	r2, r3, #1
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007538:	e01e      	b.n	8007578 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	3301      	adds	r3, #1
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	b29a      	uxth	r2, r3
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	3302      	adds	r3, #2
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	3302      	adds	r3, #2
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	3301      	adds	r3, #1
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	3b01      	subs	r3, #1
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1dd      	bne.n	800753a <USB_WritePMA+0x3a>
  }
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	3734      	adds	r7, #52	; 0x34
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800758a:	b480      	push	{r7}
 800758c:	b08b      	sub	sp, #44	; 0x2c
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	4611      	mov	r1, r2
 8007596:	461a      	mov	r2, r3
 8007598:	460b      	mov	r3, r1
 800759a:	80fb      	strh	r3, [r7, #6]
 800759c:	4613      	mov	r3, r2
 800759e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075a0:	88bb      	ldrh	r3, [r7, #4]
 80075a2:	085b      	lsrs	r3, r3, #1
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	005a      	lsls	r2, r3, #1
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075bc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
 80075c2:	e01b      	b.n	80075fc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	3302      	adds	r3, #2
 80075d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	3301      	adds	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	3301      	adds	r3, #1
 80075ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	3302      	adds	r3, #2
 80075f4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	3b01      	subs	r3, #1
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e0      	bne.n	80075c4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007602:	88bb      	ldrh	r3, [r7, #4]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	701a      	strb	r2, [r3, #0]
  }
}
 800761e:	bf00      	nop
 8007620:	372c      	adds	r7, #44	; 0x2c
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7c1b      	ldrb	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007644:	2202      	movs	r2, #2
 8007646:	2181      	movs	r1, #129	; 0x81
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fe30 	bl	80092ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007658:	2202      	movs	r2, #2
 800765a:	2101      	movs	r1, #1
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fe26 	bl	80092ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800766a:	e012      	b.n	8007692 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	2202      	movs	r2, #2
 8007670:	2181      	movs	r1, #129	; 0x81
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fe1b 	bl	80092ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	2202      	movs	r2, #2
 8007682:	2101      	movs	r1, #1
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 fe12 	bl	80092ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007692:	2308      	movs	r3, #8
 8007694:	2203      	movs	r2, #3
 8007696:	2182      	movs	r1, #130	; 0x82
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fe08 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076a8:	f001 ff28 	bl	80094fc <USBD_static_malloc>
 80076ac:	4602      	mov	r2, r0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076be:	2301      	movs	r3, #1
 80076c0:	73fb      	strb	r3, [r7, #15]
 80076c2:	e026      	b.n	8007712 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c1b      	ldrb	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fec8 	bl	8009490 <USBD_LL_PrepareReceive>
 8007700:	e007      	b.n	8007712 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	2101      	movs	r1, #1
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 febf 	bl	8009490 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800772c:	2181      	movs	r1, #129	; 0x81
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fde3 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800773a:	2101      	movs	r1, #1
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fddc 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800774a:	2182      	movs	r1, #130	; 0x82
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fdd4 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00e      	beq.n	8007780 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fece 	bl	8009514 <USBD_static_free>
    pdev->pClassData = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d039      	beq.n	8007828 <USBD_CDC_Setup+0x9e>
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d17f      	bne.n	80078b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	88db      	ldrh	r3, [r3, #6]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d029      	beq.n	8007814 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da11      	bge.n	80077ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	88d2      	ldrh	r2, [r2, #6]
 80077dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077de:	6939      	ldr	r1, [r7, #16]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f9d9 	bl	8008b9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80077ec:	e06b      	b.n	80078c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785a      	ldrb	r2, [r3, #1]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007804:	6939      	ldr	r1, [r7, #16]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	88db      	ldrh	r3, [r3, #6]
 800780a:	461a      	mov	r2, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 f9f4 	bl	8008bfa <USBD_CtlPrepareRx>
      break;
 8007812:	e058      	b.n	80078c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	7850      	ldrb	r0, [r2, #1]
 8007820:	2200      	movs	r2, #0
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	4798      	blx	r3
      break;
 8007826:	e04e      	b.n	80078c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b0b      	cmp	r3, #11
 800782e:	d02e      	beq.n	800788e <USBD_CDC_Setup+0x104>
 8007830:	2b0b      	cmp	r3, #11
 8007832:	dc38      	bgt.n	80078a6 <USBD_CDC_Setup+0x11c>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <USBD_CDC_Setup+0xb4>
 8007838:	2b0a      	cmp	r3, #10
 800783a:	d014      	beq.n	8007866 <USBD_CDC_Setup+0xdc>
 800783c:	e033      	b.n	80078a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007844:	2b03      	cmp	r3, #3
 8007846:	d107      	bne.n	8007858 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007848:	f107 030c 	add.w	r3, r7, #12
 800784c:	2202      	movs	r2, #2
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f9a4 	bl	8008b9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007856:	e02e      	b.n	80078b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f935 	bl	8008aca <USBD_CtlError>
            ret = USBD_FAIL;
 8007860:	2302      	movs	r3, #2
 8007862:	75fb      	strb	r3, [r7, #23]
          break;
 8007864:	e027      	b.n	80078b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	2b03      	cmp	r3, #3
 800786e:	d107      	bne.n	8007880 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007870:	f107 030f 	add.w	r3, r7, #15
 8007874:	2201      	movs	r2, #1
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f990 	bl	8008b9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800787e:	e01a      	b.n	80078b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f921 	bl	8008aca <USBD_CtlError>
            ret = USBD_FAIL;
 8007888:	2302      	movs	r3, #2
 800788a:	75fb      	strb	r3, [r7, #23]
          break;
 800788c:	e013      	b.n	80078b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007894:	2b03      	cmp	r3, #3
 8007896:	d00d      	beq.n	80078b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f915 	bl	8008aca <USBD_CtlError>
            ret = USBD_FAIL;
 80078a0:	2302      	movs	r3, #2
 80078a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078a4:	e006      	b.n	80078b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f90e 	bl	8008aca <USBD_CtlError>
          ret = USBD_FAIL;
 80078ae:	2302      	movs	r3, #2
 80078b0:	75fb      	strb	r3, [r7, #23]
          break;
 80078b2:	e000      	b.n	80078b6 <USBD_CDC_Setup+0x12c>
          break;
 80078b4:	bf00      	nop
      }
      break;
 80078b6:	e006      	b.n	80078c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 f905 	bl	8008aca <USBD_CtlError>
      ret = USBD_FAIL;
 80078c0:	2302      	movs	r3, #2
 80078c2:	75fb      	strb	r3, [r7, #23]
      break;
 80078c4:	bf00      	nop
  }

  return ret;
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d03a      	beq.n	800796c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	331c      	adds	r3, #28
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d029      	beq.n	8007960 <USBD_CDC_DataIn+0x90>
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	331c      	adds	r3, #28
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	78f9      	ldrb	r1, [r7, #3]
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	460b      	mov	r3, r1
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4403      	add	r3, r0
 800792c:	3338      	adds	r3, #56	; 0x38
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	fbb2 f1f3 	udiv	r1, r2, r3
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d110      	bne.n	8007960 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	331c      	adds	r3, #28
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007952:	78f9      	ldrb	r1, [r7, #3]
 8007954:	2300      	movs	r3, #0
 8007956:	2200      	movs	r2, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fd76 	bl	800944a <USBD_LL_Transmit>
 800795e:	e003      	b.n	8007968 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800796c:	2302      	movs	r3, #2
  }
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fda1 	bl	80094d6 <USBD_LL_GetRxDataSize>
 8007994:	4602      	mov	r2, r0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079ba:	4611      	mov	r1, r2
 80079bc:	4798      	blx	r3

    return USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e000      	b.n	80079c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d015      	beq.n	8007a12 <USBD_CDC_EP0_RxReady+0x46>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079ec:	2bff      	cmp	r3, #255	; 0xff
 80079ee:	d010      	beq.n	8007a12 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	22ff      	movs	r2, #255	; 0xff
 8007a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2243      	movs	r2, #67	; 0x43
 8007a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000098 	.word	0x20000098

08007a3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2243      	movs	r2, #67	; 0x43
 8007a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a4a:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000054 	.word	0x20000054

08007a5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2243      	movs	r2, #67	; 0x43
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	200000dc 	.word	0x200000dc

08007a7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	220a      	movs	r2, #10
 8007a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a8a:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000010 	.word	0x20000010

08007a9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr

08007b20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d017      	beq.n	8007b6a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7c1b      	ldrb	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fc9e 	bl	8009490 <USBD_LL_PrepareReceive>
 8007b54:	e007      	b.n	8007b66 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b5c:	2340      	movs	r3, #64	; 0x40
 8007b5e:	2101      	movs	r1, #1
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fc95 	bl	8009490 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e000      	b.n	8007b6c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e01a      	b.n	8007bc2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	79fa      	ldrb	r2, [r7, #7]
 8007bb8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 fb02 	bl	80091c4 <USBD_LL_Init>

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b085      	sub	sp, #20
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d006      	beq.n	8007bec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	e001      	b.n	8007bf0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007bec:	2302      	movs	r3, #2
 8007bee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fb37 	bl	8009278 <USBD_LL_Start>

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c34:	2302      	movs	r3, #2
 8007c36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00c      	beq.n	8007c5c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fed7 	bl	8008a52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d016      	beq.n	8007cf6 <USBD_LL_SetupStage+0x6a>
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d81c      	bhi.n	8007d06 <USBD_LL_SetupStage+0x7a>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <USBD_LL_SetupStage+0x4a>
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d008      	beq.n	8007ce6 <USBD_LL_SetupStage+0x5a>
 8007cd4:	e017      	b.n	8007d06 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f9ca 	bl	8008078 <USBD_StdDevReq>
      break;
 8007ce4:	e01a      	b.n	8007d1c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa2c 	bl	800814c <USBD_StdItfReq>
      break;
 8007cf4:	e012      	b.n	8007d1c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa6c 	bl	80081dc <USBD_StdEPReq>
      break;
 8007d04:	e00a      	b.n	8007d1c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fb0f 	bl	8009338 <USBD_LL_StallEP>
      break;
 8007d1a:	bf00      	nop
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d14b      	bne.n	8007dd2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d134      	bne.n	8007db6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d919      	bls.n	8007d8c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	1ad2      	subs	r2, r2, r3
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d203      	bcs.n	8007d7a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	e002      	b.n	8007d80 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 ff56 	bl	8008c36 <USBD_CtlContinueRx>
 8007d8a:	e038      	b.n	8007dfe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d105      	bne.n	8007dae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 ff53 	bl	8008c5a <USBD_CtlSendStatus>
 8007db4:	e023      	b.n	8007dfe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	d11e      	bne.n	8007dfe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fab4 	bl	8009338 <USBD_LL_StallEP>
 8007dd0:	e015      	b.n	8007dfe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d108      	bne.n	8007dfa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	7afa      	ldrb	r2, [r7, #11]
 8007df2:	4611      	mov	r1, r2
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	4798      	blx	r3
 8007df8:	e001      	b.n	8007dfe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e000      	b.n	8007e00 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	460b      	mov	r3, r1
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d17f      	bne.n	8007f1c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d15c      	bne.n	8007ee6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d915      	bls.n	8007e64 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fec0 	bl	8008bd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e56:	2300      	movs	r3, #0
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f001 fb17 	bl	8009490 <USBD_LL_PrepareReceive>
 8007e62:	e04e      	b.n	8007f02 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	6912      	ldr	r2, [r2, #16]
 8007e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e70:	fb01 f202 	mul.w	r2, r1, r2
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d11c      	bne.n	8007eb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d316      	bcc.n	8007eb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d20f      	bcs.n	8007eb4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fe9c 	bl	8008bd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2100      	movs	r1, #0
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f001 faef 	bl	8009490 <USBD_LL_PrepareReceive>
 8007eb2:	e026      	b.n	8007f02 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d105      	bne.n	8007ed6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 fa2d 	bl	8009338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fece 	bl	8008c80 <USBD_CtlReceiveStatus>
 8007ee4:	e00d      	b.n	8007f02 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d004      	beq.n	8007efa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d103      	bne.n	8007f02 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fa1b 	bl	8009338 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d11d      	bne.n	8007f48 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fe81 	bl	8007c14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f1a:	e015      	b.n	8007f48 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00d      	beq.n	8007f44 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d108      	bne.n	8007f44 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	7afa      	ldrb	r2, [r7, #11]
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	4798      	blx	r3
 8007f42:	e001      	b.n	8007f48 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f44:	2302      	movs	r3, #2
 8007f46:	e000      	b.n	8007f4a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f9a4 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2240      	movs	r2, #64	; 0x40
 8007f72:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f76:	2340      	movs	r3, #64	; 0x40
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2180      	movs	r1, #128	; 0x80
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f996 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6852      	ldr	r2, [r2, #4]
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
  }

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2204      	movs	r2, #4
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	2b04      	cmp	r3, #4
 800802a:	d105      	bne.n	8008038 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	2b03      	cmp	r3, #3
 8008054:	d10b      	bne.n	800806e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d005      	beq.n	800809e <USBD_StdDevReq+0x26>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d84f      	bhi.n	8008136 <USBD_StdDevReq+0xbe>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <USBD_StdDevReq+0x36>
 800809a:	2b20      	cmp	r3, #32
 800809c:	d14b      	bne.n	8008136 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      break;
 80080ac:	e048      	b.n	8008140 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b09      	cmp	r3, #9
 80080b4:	d839      	bhi.n	800812a <USBD_StdDevReq+0xb2>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <USBD_StdDevReq+0x44>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	0800810d 	.word	0x0800810d
 80080c0:	08008121 	.word	0x08008121
 80080c4:	0800812b 	.word	0x0800812b
 80080c8:	08008117 	.word	0x08008117
 80080cc:	0800812b 	.word	0x0800812b
 80080d0:	080080ef 	.word	0x080080ef
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	0800812b 	.word	0x0800812b
 80080dc:	08008103 	.word	0x08008103
 80080e0:	080080f9 	.word	0x080080f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9dc 	bl	80084a4 <USBD_GetDescriptor>
          break;
 80080ec:	e022      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb3f 	bl	8008774 <USBD_SetAddress>
          break;
 80080f6:	e01d      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fb7e 	bl	80087fc <USBD_SetConfig>
          break;
 8008100:	e018      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc07 	bl	8008918 <USBD_GetConfig>
          break;
 800810a:	e013      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fc37 	bl	8008982 <USBD_GetStatus>
          break;
 8008114:	e00e      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fc65 	bl	80089e8 <USBD_SetFeature>
          break;
 800811e:	e009      	b.n	8008134 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc74 	bl	8008a10 <USBD_ClrFeature>
          break;
 8008128:	e004      	b.n	8008134 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fccc 	bl	8008aca <USBD_CtlError>
          break;
 8008132:	bf00      	nop
      }
      break;
 8008134:	e004      	b.n	8008140 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fcc6 	bl	8008aca <USBD_CtlError>
      break;
 800813e:	bf00      	nop
  }

  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop

0800814c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d005      	beq.n	8008172 <USBD_StdItfReq+0x26>
 8008166:	2b40      	cmp	r3, #64	; 0x40
 8008168:	d82e      	bhi.n	80081c8 <USBD_StdItfReq+0x7c>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USBD_StdItfReq+0x26>
 800816e:	2b20      	cmp	r3, #32
 8008170:	d12a      	bne.n	80081c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008178:	3b01      	subs	r3, #1
 800817a:	2b02      	cmp	r3, #2
 800817c:	d81d      	bhi.n	80081ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	889b      	ldrh	r3, [r3, #4]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d813      	bhi.n	80081b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d110      	bne.n	80081c4 <USBD_StdItfReq+0x78>
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fd56 	bl	8008c5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ae:	e009      	b.n	80081c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc89 	bl	8008aca <USBD_CtlError>
          break;
 80081b8:	e004      	b.n	80081c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fc84 	bl	8008aca <USBD_CtlError>
          break;
 80081c2:	e000      	b.n	80081c6 <USBD_StdItfReq+0x7a>
          break;
 80081c4:	bf00      	nop
      }
      break;
 80081c6:	e004      	b.n	80081d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc7d 	bl	8008aca <USBD_CtlError>
      break;
 80081d0:	bf00      	nop
  }

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d007      	beq.n	800820c <USBD_StdEPReq+0x30>
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	f200 8146 	bhi.w	800848e <USBD_StdEPReq+0x2b2>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <USBD_StdEPReq+0x40>
 8008206:	2b20      	cmp	r3, #32
 8008208:	f040 8141 	bne.w	800848e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
      break;
 800821a:	e13d      	b.n	8008498 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008224:	2b20      	cmp	r3, #32
 8008226:	d10a      	bne.n	800823e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]

        return ret;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	e12d      	b.n	800849a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b03      	cmp	r3, #3
 8008244:	d007      	beq.n	8008256 <USBD_StdEPReq+0x7a>
 8008246:	2b03      	cmp	r3, #3
 8008248:	f300 811b 	bgt.w	8008482 <USBD_StdEPReq+0x2a6>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d072      	beq.n	8008336 <USBD_StdEPReq+0x15a>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d03a      	beq.n	80082ca <USBD_StdEPReq+0xee>
 8008254:	e115      	b.n	8008482 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825c:	2b02      	cmp	r3, #2
 800825e:	d002      	beq.n	8008266 <USBD_StdEPReq+0x8a>
 8008260:	2b03      	cmp	r3, #3
 8008262:	d015      	beq.n	8008290 <USBD_StdEPReq+0xb4>
 8008264:	e02b      	b.n	80082be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00c      	beq.n	8008286 <USBD_StdEPReq+0xaa>
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d009      	beq.n	8008286 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f85e 	bl	8009338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 f85a 	bl	8009338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008284:	e020      	b.n	80082c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc1e 	bl	8008aca <USBD_CtlError>
              break;
 800828e:	e01b      	b.n	80082c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10e      	bne.n	80082b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <USBD_StdEPReq+0xda>
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b80      	cmp	r3, #128	; 0x80
 80082a2:	d008      	beq.n	80082b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	88db      	ldrh	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f841 	bl	8009338 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fccf 	bl	8008c5a <USBD_CtlSendStatus>

              break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc02 	bl	8008aca <USBD_CtlError>
              break;
 80082c6:	bf00      	nop
          }
          break;
 80082c8:	e0e0      	b.n	800848c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d002      	beq.n	80082da <USBD_StdEPReq+0xfe>
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d015      	beq.n	8008304 <USBD_StdEPReq+0x128>
 80082d8:	e026      	b.n	8008328 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00c      	beq.n	80082fa <USBD_StdEPReq+0x11e>
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b80      	cmp	r3, #128	; 0x80
 80082e4:	d009      	beq.n	80082fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 f824 	bl	8009338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082f0:	2180      	movs	r1, #128	; 0x80
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f820 	bl	8009338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f8:	e01c      	b.n	8008334 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fbe4 	bl	8008aca <USBD_CtlError>
              break;
 8008302:	e017      	b.n	8008334 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d112      	bne.n	8008332 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f82b 	bl	8009376 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc9a 	bl	8008c5a <USBD_CtlSendStatus>
              }
              break;
 8008326:	e004      	b.n	8008332 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fbcd 	bl	8008aca <USBD_CtlError>
              break;
 8008330:	e000      	b.n	8008334 <USBD_StdEPReq+0x158>
              break;
 8008332:	bf00      	nop
          }
          break;
 8008334:	e0aa      	b.n	800848c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833c:	2b02      	cmp	r3, #2
 800833e:	d002      	beq.n	8008346 <USBD_StdEPReq+0x16a>
 8008340:	2b03      	cmp	r3, #3
 8008342:	d032      	beq.n	80083aa <USBD_StdEPReq+0x1ce>
 8008344:	e097      	b.n	8008476 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <USBD_StdEPReq+0x180>
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b80      	cmp	r3, #128	; 0x80
 8008350:	d004      	beq.n	800835c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fbb8 	bl	8008aca <USBD_CtlError>
                break;
 800835a:	e091      	b.n	8008480 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	da0b      	bge.n	800837c <USBD_StdEPReq+0x1a0>
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	3310      	adds	r3, #16
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4413      	add	r3, r2
 8008378:	3304      	adds	r3, #4
 800837a:	e00b      	b.n	8008394 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2202      	movs	r2, #2
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fbfb 	bl	8008b9e <USBD_CtlSendData>
              break;
 80083a8:	e06a      	b.n	8008480 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da11      	bge.n	80083d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	3318      	adds	r3, #24
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d117      	bne.n	80083fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fb7b 	bl	8008aca <USBD_CtlError>
                  break;
 80083d4:	e054      	b.n	8008480 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb68 	bl	8008aca <USBD_CtlError>
                  break;
 80083fa:	e041      	b.n	8008480 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da0b      	bge.n	800841c <USBD_StdEPReq+0x240>
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	3310      	adds	r3, #16
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	3304      	adds	r3, #4
 800841a:	e00b      	b.n	8008434 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <USBD_StdEPReq+0x266>
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d103      	bne.n	800844a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	e00e      	b.n	8008468 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 ffb0 	bl	80093b4 <USBD_LL_IsStallEP>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2201      	movs	r2, #1
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	e002      	b.n	8008468 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2202      	movs	r2, #2
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb95 	bl	8008b9e <USBD_CtlSendData>
              break;
 8008474:	e004      	b.n	8008480 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb26 	bl	8008aca <USBD_CtlError>
              break;
 800847e:	bf00      	nop
          }
          break;
 8008480:	e004      	b.n	800848c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fb20 	bl	8008aca <USBD_CtlError>
          break;
 800848a:	bf00      	nop
      }
      break;
 800848c:	e004      	b.n	8008498 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb1a 	bl	8008aca <USBD_CtlError>
      break;
 8008496:	bf00      	nop
  }

  return ret;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	885b      	ldrh	r3, [r3, #2]
 80084be:	0a1b      	lsrs	r3, r3, #8
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b06      	cmp	r3, #6
 80084c6:	f200 8128 	bhi.w	800871a <USBD_GetDescriptor+0x276>
 80084ca:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <USBD_GetDescriptor+0x2c>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	08008505 	.word	0x08008505
 80084d8:	08008545 	.word	0x08008545
 80084dc:	0800871b 	.word	0x0800871b
 80084e0:	0800871b 	.word	0x0800871b
 80084e4:	080086bb 	.word	0x080086bb
 80084e8:	080086e7 	.word	0x080086e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	7c12      	ldrb	r2, [r2, #16]
 80084f8:	f107 0108 	add.w	r1, r7, #8
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	60f8      	str	r0, [r7, #12]
      break;
 8008502:	e112      	b.n	800872a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7c1b      	ldrb	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10d      	bne.n	8008528 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	f107 0208 	add.w	r2, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	2202      	movs	r2, #2
 8008524:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008526:	e100      	b.n	800872a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	f107 0208 	add.w	r2, r7, #8
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
 8008538:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	2202      	movs	r2, #2
 8008540:	701a      	strb	r2, [r3, #0]
      break;
 8008542:	e0f2      	b.n	800872a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	885b      	ldrh	r3, [r3, #2]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b05      	cmp	r3, #5
 800854c:	f200 80ac 	bhi.w	80086a8 <USBD_GetDescriptor+0x204>
 8008550:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <USBD_GetDescriptor+0xb4>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008571 	.word	0x08008571
 800855c:	080085a5 	.word	0x080085a5
 8008560:	080085d9 	.word	0x080085d9
 8008564:	0800860d 	.word	0x0800860d
 8008568:	08008641 	.word	0x08008641
 800856c:	08008675 	.word	0x08008675
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008592:	e091      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa97 	bl	8008aca <USBD_CtlError>
            err++;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3301      	adds	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]
          break;
 80085a2:	e089      	b.n	80086b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 0108 	add.w	r1, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c6:	e077      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa7d 	bl	8008aca <USBD_CtlError>
            err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
          break;
 80085d6:	e06f      	b.n	80086b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e05d      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa63 	bl	8008aca <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e055      	b.n	80086b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e043      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa49 	bl	8008aca <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e03b      	b.n	80086b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e029      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa2f 	bl	8008aca <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e021      	b.n	80086b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e00f      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa15 	bl	8008aca <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e007      	b.n	80086b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa0d 	bl	8008aca <USBD_CtlError>
          err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086b6:	e038      	b.n	800872a <USBD_GetDescriptor+0x286>
 80086b8:	e037      	b.n	800872a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7c1b      	ldrb	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	f107 0208 	add.w	r2, r7, #8
 80086ce:	4610      	mov	r0, r2
 80086d0:	4798      	blx	r3
 80086d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d4:	e029      	b.n	800872a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9f6 	bl	8008aca <USBD_CtlError>
        err++;
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	3301      	adds	r3, #1
 80086e2:	72fb      	strb	r3, [r7, #11]
      break;
 80086e4:	e021      	b.n	800872a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7c1b      	ldrb	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f107 0208 	add.w	r2, r7, #8
 80086fa:	4610      	mov	r0, r2
 80086fc:	4798      	blx	r3
 80086fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	2207      	movs	r2, #7
 8008706:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008708:	e00f      	b.n	800872a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f9dc 	bl	8008aca <USBD_CtlError>
        err++;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	3301      	adds	r3, #1
 8008716:	72fb      	strb	r3, [r7, #11]
      break;
 8008718:	e007      	b.n	800872a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9d4 	bl	8008aca <USBD_CtlError>
      err++;
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	3301      	adds	r3, #1
 8008726:	72fb      	strb	r3, [r7, #11]
      break;
 8008728:	bf00      	nop
  }

  if (err != 0U)
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11c      	bne.n	800876a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008730:	893b      	ldrh	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d011      	beq.n	800875a <USBD_GetDescriptor+0x2b6>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00d      	beq.n	800875a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	88da      	ldrh	r2, [r3, #6]
 8008742:	893b      	ldrh	r3, [r7, #8]
 8008744:	4293      	cmp	r3, r2
 8008746:	bf28      	it	cs
 8008748:	4613      	movcs	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800874e:	893b      	ldrh	r3, [r7, #8]
 8008750:	461a      	mov	r2, r3
 8008752:	68f9      	ldr	r1, [r7, #12]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa22 	bl	8008b9e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	88db      	ldrh	r3, [r3, #6]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa79 	bl	8008c5a <USBD_CtlSendStatus>
 8008768:	e000      	b.n	800876c <USBD_GetDescriptor+0x2c8>
    return;
 800876a:	bf00      	nop
    }
  }
}
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop

08008774 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	889b      	ldrh	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d130      	bne.n	80087e8 <USBD_SetAddress+0x74>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88db      	ldrh	r3, [r3, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d12c      	bne.n	80087e8 <USBD_SetAddress+0x74>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	2b7f      	cmp	r3, #127	; 0x7f
 8008794:	d828      	bhi.n	80087e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d104      	bne.n	80087b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f98b 	bl	8008aca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b4:	e01d      	b.n	80087f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7bfa      	ldrb	r2, [r7, #15]
 80087ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fe22 	bl	800940c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa46 	bl	8008c5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087dc:	e009      	b.n	80087f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	e004      	b.n	80087f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f96d 	bl	8008aca <USBD_CtlError>
  }
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	4b41      	ldr	r3, [pc, #260]	; (8008914 <USBD_SetConfig+0x118>)
 800880e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008810:	4b40      	ldr	r3, [pc, #256]	; (8008914 <USBD_SetConfig+0x118>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d904      	bls.n	8008822 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f955 	bl	8008aca <USBD_CtlError>
 8008820:	e075      	b.n	800890e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	2b02      	cmp	r3, #2
 800882a:	d002      	beq.n	8008832 <USBD_SetConfig+0x36>
 800882c:	2b03      	cmp	r3, #3
 800882e:	d023      	beq.n	8008878 <USBD_SetConfig+0x7c>
 8008830:	e062      	b.n	80088f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008832:	4b38      	ldr	r3, [pc, #224]	; (8008914 <USBD_SetConfig+0x118>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01a      	beq.n	8008870 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800883a:	4b36      	ldr	r3, [pc, #216]	; (8008914 <USBD_SetConfig+0x118>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2203      	movs	r2, #3
 8008848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800884c:	4b31      	ldr	r3, [pc, #196]	; (8008914 <USBD_SetConfig+0x118>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff f9e8 	bl	8007c28 <USBD_SetClassConfig>
 8008858:	4603      	mov	r3, r0
 800885a:	2b02      	cmp	r3, #2
 800885c:	d104      	bne.n	8008868 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f932 	bl	8008aca <USBD_CtlError>
            return;
 8008866:	e052      	b.n	800890e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9f6 	bl	8008c5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800886e:	e04e      	b.n	800890e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9f2 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 8008876:	e04a      	b.n	800890e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008878:	4b26      	ldr	r3, [pc, #152]	; (8008914 <USBD_SetConfig+0x118>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d112      	bne.n	80088a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008888:	4b22      	ldr	r3, [pc, #136]	; (8008914 <USBD_SetConfig+0x118>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008892:	4b20      	ldr	r3, [pc, #128]	; (8008914 <USBD_SetConfig+0x118>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff f9e4 	bl	8007c66 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9db 	bl	8008c5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088a4:	e033      	b.n	800890e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088a6:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <USBD_SetConfig+0x118>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d01d      	beq.n	80088f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff f9d2 	bl	8007c66 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088c2:	4b14      	ldr	r3, [pc, #80]	; (8008914 <USBD_SetConfig+0x118>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <USBD_SetConfig+0x118>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f9a8 	bl	8007c28 <USBD_SetClassConfig>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d104      	bne.n	80088e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f8f2 	bl	8008aca <USBD_CtlError>
            return;
 80088e6:	e012      	b.n	800890e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9b6 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 80088ee:	e00e      	b.n	800890e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f9b2 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 80088f6:	e00a      	b.n	800890e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f8e5 	bl	8008aca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <USBD_SetConfig+0x118>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff f9ad 	bl	8007c66 <USBD_ClrClassConfig>
        break;
 800890c:	bf00      	nop
    }
  }
}
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	2000022c 	.word	0x2000022c

08008918 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	88db      	ldrh	r3, [r3, #6]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d004      	beq.n	8008934 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8cc 	bl	8008aca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008932:	e022      	b.n	800897a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893a:	2b02      	cmp	r3, #2
 800893c:	dc02      	bgt.n	8008944 <USBD_GetConfig+0x2c>
 800893e:	2b00      	cmp	r3, #0
 8008940:	dc03      	bgt.n	800894a <USBD_GetConfig+0x32>
 8008942:	e015      	b.n	8008970 <USBD_GetConfig+0x58>
 8008944:	2b03      	cmp	r3, #3
 8008946:	d00b      	beq.n	8008960 <USBD_GetConfig+0x48>
 8008948:	e012      	b.n	8008970 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3308      	adds	r3, #8
 8008954:	2201      	movs	r2, #1
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f920 	bl	8008b9e <USBD_CtlSendData>
        break;
 800895e:	e00c      	b.n	800897a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	2201      	movs	r2, #1
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f918 	bl	8008b9e <USBD_CtlSendData>
        break;
 800896e:	e004      	b.n	800897a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8a9 	bl	8008aca <USBD_CtlError>
        break;
 8008978:	bf00      	nop
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008992:	3b01      	subs	r3, #1
 8008994:	2b02      	cmp	r3, #2
 8008996:	d81e      	bhi.n	80089d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	88db      	ldrh	r3, [r3, #6]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d004      	beq.n	80089aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f891 	bl	8008aca <USBD_CtlError>
        break;
 80089a8:	e01a      	b.n	80089e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f043 0202 	orr.w	r2, r3, #2
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	330c      	adds	r3, #12
 80089ca:	2202      	movs	r2, #2
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f8e5 	bl	8008b9e <USBD_CtlSendData>
      break;
 80089d4:	e004      	b.n	80089e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f876 	bl	8008aca <USBD_CtlError>
      break;
 80089de:	bf00      	nop
  }
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d106      	bne.n	8008a08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f929 	bl	8008c5a <USBD_CtlSendStatus>
  }
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a20:	3b01      	subs	r3, #1
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d80b      	bhi.n	8008a3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d10c      	bne.n	8008a48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f90f 	bl	8008c5a <USBD_CtlSendStatus>
      }
      break;
 8008a3c:	e004      	b.n	8008a48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f842 	bl	8008aca <USBD_CtlError>
      break;
 8008a46:	e000      	b.n	8008a4a <USBD_ClrFeature+0x3a>
      break;
 8008a48:	bf00      	nop
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	785a      	ldrb	r2, [r3, #1]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	3303      	adds	r3, #3
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4413      	add	r3, r2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	3305      	adds	r3, #5
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	3306      	adds	r3, #6
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	80da      	strh	r2, [r3, #6]

}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr

08008aca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ad4:	2180      	movs	r1, #128	; 0x80
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fc2e 	bl	8009338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008adc:	2100      	movs	r1, #0
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fc2a 	bl	8009338 <USBD_LL_StallEP>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d032      	beq.n	8008b68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f834 	bl	8008b70 <USBD_GetLen>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	75fa      	strb	r2, [r7, #23]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	7812      	ldrb	r2, [r2, #0]
 8008b26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	75fa      	strb	r2, [r7, #23]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4413      	add	r3, r2
 8008b34:	2203      	movs	r2, #3
 8008b36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b38:	e012      	b.n	8008b60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	60fa      	str	r2, [r7, #12]
 8008b40:	7dfa      	ldrb	r2, [r7, #23]
 8008b42:	1c51      	adds	r1, r2, #1
 8008b44:	75f9      	strb	r1, [r7, #23]
 8008b46:	4611      	mov	r1, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	75fa      	strb	r2, [r7, #23]
 8008b56:	461a      	mov	r2, r3
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e8      	bne.n	8008b3a <USBD_GetString+0x4e>
    }
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008b7c:	e005      	b.n	8008b8a <USBD_GetLen+0x1a>
  {
    len++;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	3301      	adds	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3301      	adds	r3, #1
 8008b88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f5      	bne.n	8008b7e <USBD_GetLen+0xe>
  }

  return len;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr

08008b9e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bb4:	88fa      	ldrh	r2, [r7, #6]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bba:	88fa      	ldrh	r2, [r7, #6]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fc3f 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	4613      	mov	r3, r2
 8008be2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	2100      	movs	r1, #0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fc2d 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	4613      	mov	r3, r2
 8008c06:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c10:	88fa      	ldrh	r2, [r7, #6]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fc32 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fc20 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fbea 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fbfa 	bl	8009490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4912      	ldr	r1, [pc, #72]	; (8008cf8 <MX_USB_DEVICE_Init+0x50>)
 8008cb0:	4812      	ldr	r0, [pc, #72]	; (8008cfc <MX_USB_DEVICE_Init+0x54>)
 8008cb2:	f7fe ff5f 	bl	8007b74 <USBD_Init>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cbc:	f7f7 fc40 	bl	8000540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cc0:	490f      	ldr	r1, [pc, #60]	; (8008d00 <MX_USB_DEVICE_Init+0x58>)
 8008cc2:	480e      	ldr	r0, [pc, #56]	; (8008cfc <MX_USB_DEVICE_Init+0x54>)
 8008cc4:	f7fe ff81 	bl	8007bca <USBD_RegisterClass>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cce:	f7f7 fc37 	bl	8000540 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cd2:	490c      	ldr	r1, [pc, #48]	; (8008d04 <MX_USB_DEVICE_Init+0x5c>)
 8008cd4:	4809      	ldr	r0, [pc, #36]	; (8008cfc <MX_USB_DEVICE_Init+0x54>)
 8008cd6:	f7fe fee1 	bl	8007a9c <USBD_CDC_RegisterInterface>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ce0:	f7f7 fc2e 	bl	8000540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <MX_USB_DEVICE_Init+0x54>)
 8008ce6:	f7fe ff89 	bl	8007bfc <USBD_Start>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cf0:	f7f7 fc26 	bl	8000540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000130 	.word	0x20000130
 8008cfc:	20000230 	.word	0x20000230
 8008d00:	2000001c 	.word	0x2000001c
 8008d04:	20000120 	.word	0x20000120

08008d08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4905      	ldr	r1, [pc, #20]	; (8008d24 <CDC_Init_FS+0x1c>)
 8008d10:	4805      	ldr	r0, [pc, #20]	; (8008d28 <CDC_Init_FS+0x20>)
 8008d12:	f7fe fed9 	bl	8007ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d16:	4905      	ldr	r1, [pc, #20]	; (8008d2c <CDC_Init_FS+0x24>)
 8008d18:	4803      	ldr	r0, [pc, #12]	; (8008d28 <CDC_Init_FS+0x20>)
 8008d1a:	f7fe feee 	bl	8007afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	200008f4 	.word	0x200008f4
 8008d28:	20000230 	.word	0x20000230
 8008d2c:	200004f4 	.word	0x200004f4

08008d30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
	...

08008d40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b23      	cmp	r3, #35	; 0x23
 8008d54:	d84a      	bhi.n	8008dec <CDC_Control_FS+0xac>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <CDC_Control_FS+0x1c>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008ded 	.word	0x08008ded
 8008d60:	08008ded 	.word	0x08008ded
 8008d64:	08008ded 	.word	0x08008ded
 8008d68:	08008ded 	.word	0x08008ded
 8008d6c:	08008ded 	.word	0x08008ded
 8008d70:	08008ded 	.word	0x08008ded
 8008d74:	08008ded 	.word	0x08008ded
 8008d78:	08008ded 	.word	0x08008ded
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008ded 	.word	0x08008ded
 8008d84:	08008ded 	.word	0x08008ded
 8008d88:	08008ded 	.word	0x08008ded
 8008d8c:	08008ded 	.word	0x08008ded
 8008d90:	08008ded 	.word	0x08008ded
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008ded 	.word	0x08008ded
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008ded 	.word	0x08008ded
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008ded 	.word	0x08008ded
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008ded 	.word	0x08008ded
 8008dbc:	08008ded 	.word	0x08008ded
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008ded 	.word	0x08008ded
 8008dd0:	08008ded 	.word	0x08008ded
 8008dd4:	08008ded 	.word	0x08008ded
 8008dd8:	08008ded 	.word	0x08008ded
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008ded 	.word	0x08008ded
 8008de4:	08008ded 	.word	0x08008ded
 8008de8:	08008ded 	.word	0x08008ded
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dec:	bf00      	nop
  }

  return (USBD_OK);
 8008dee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop

08008dfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4805      	ldr	r0, [pc, #20]	; (8008e20 <CDC_Receive_FS+0x24>)
 8008e0a:	f7fe fe76 	bl	8007afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e0e:	4804      	ldr	r0, [pc, #16]	; (8008e20 <CDC_Receive_FS+0x24>)
 8008e10:	f7fe fe86 	bl	8007b20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20000230 	.word	0x20000230

08008e24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2212      	movs	r2, #18
 8008e34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e36:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	2000014c 	.word	0x2000014c

08008e48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2204      	movs	r2, #4
 8008e58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bc80      	pop	{r7}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000160 	.word	0x20000160

08008e6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	6039      	str	r1, [r7, #0]
 8008e76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4907      	ldr	r1, [pc, #28]	; (8008ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e82:	4808      	ldr	r0, [pc, #32]	; (8008ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e84:	f7ff fe32 	bl	8008aec <USBD_GetString>
 8008e88:	e004      	b.n	8008e94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4904      	ldr	r1, [pc, #16]	; (8008ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e8e:	4805      	ldr	r0, [pc, #20]	; (8008ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e90:	f7ff fe2c 	bl	8008aec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000cf4 	.word	0x20000cf4
 8008ea4:	080097f8 	.word	0x080097f8

08008ea8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	4904      	ldr	r1, [pc, #16]	; (8008ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008eb8:	4804      	ldr	r0, [pc, #16]	; (8008ecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eba:	f7ff fe17 	bl	8008aec <USBD_GetString>
  return USBD_StrDesc;
 8008ebe:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000cf4 	.word	0x20000cf4
 8008ecc:	08009810 	.word	0x08009810

08008ed0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	221a      	movs	r2, #26
 8008ee0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ee2:	f000 f843 	bl	8008f6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ee6:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000164 	.word	0x20000164

08008ef4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4907      	ldr	r1, [pc, #28]	; (8008f28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f0a:	4808      	ldr	r0, [pc, #32]	; (8008f2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f0c:	f7ff fdee 	bl	8008aec <USBD_GetString>
 8008f10:	e004      	b.n	8008f1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4904      	ldr	r1, [pc, #16]	; (8008f28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f16:	4805      	ldr	r0, [pc, #20]	; (8008f2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f18:	f7ff fde8 	bl	8008aec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f1c:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000cf4 	.word	0x20000cf4
 8008f2c:	08009824 	.word	0x08009824

08008f30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4907      	ldr	r1, [pc, #28]	; (8008f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f46:	4808      	ldr	r0, [pc, #32]	; (8008f68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f48:	f7ff fdd0 	bl	8008aec <USBD_GetString>
 8008f4c:	e004      	b.n	8008f58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4904      	ldr	r1, [pc, #16]	; (8008f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f52:	4805      	ldr	r0, [pc, #20]	; (8008f68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f54:	f7ff fdca 	bl	8008aec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000cf4 	.word	0x20000cf4
 8008f68:	08009830 	.word	0x08009830

08008f6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f72:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <Get_SerialNum+0x44>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f78:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <Get_SerialNum+0x48>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <Get_SerialNum+0x4c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f92:	2208      	movs	r2, #8
 8008f94:	4909      	ldr	r1, [pc, #36]	; (8008fbc <Get_SerialNum+0x50>)
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f814 	bl	8008fc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	4908      	ldr	r1, [pc, #32]	; (8008fc0 <Get_SerialNum+0x54>)
 8008fa0:	68b8      	ldr	r0, [r7, #8]
 8008fa2:	f000 f80f 	bl	8008fc4 <IntToUnicode>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	1ffff7e8 	.word	0x1ffff7e8
 8008fb4:	1ffff7ec 	.word	0x1ffff7ec
 8008fb8:	1ffff7f0 	.word	0x1ffff7f0
 8008fbc:	20000166 	.word	0x20000166
 8008fc0:	20000176 	.word	0x20000176

08008fc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]
 8008fda:	e027      	b.n	800902c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	0f1b      	lsrs	r3, r3, #28
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d80b      	bhi.n	8008ffc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	0f1b      	lsrs	r3, r3, #28
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	440b      	add	r3, r1
 8008ff4:	3230      	adds	r2, #48	; 0x30
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	e00a      	b.n	8009012 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0f1b      	lsrs	r3, r3, #28
 8009000:	b2da      	uxtb	r2, r3
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4619      	mov	r1, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	440b      	add	r3, r1
 800900c:	3237      	adds	r2, #55	; 0x37
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	3301      	adds	r3, #1
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4413      	add	r3, r2
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	3301      	adds	r3, #1
 800902a:	75fb      	strb	r3, [r7, #23]
 800902c:	7dfa      	ldrb	r2, [r7, #23]
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	429a      	cmp	r2, r3
 8009032:	d3d3      	bcc.n	8008fdc <IntToUnicode+0x18>
  }
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	371c      	adds	r7, #28
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a0d      	ldr	r2, [pc, #52]	; (8009084 <HAL_PCD_MspInit+0x44>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d113      	bne.n	800907a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009052:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <HAL_PCD_MspInit+0x48>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <HAL_PCD_MspInit+0x48>)
 8009058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800905c:	61d3      	str	r3, [r2, #28]
 800905e:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <HAL_PCD_MspInit+0x48>)
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	2014      	movs	r0, #20
 8009070:	f7f7 fd12 	bl	8000a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009074:	2014      	movs	r0, #20
 8009076:	f7f7 fd3b 	bl	8000af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40005c00 	.word	0x40005c00
 8009088:	40021000 	.word	0x40021000

0800908c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe fdf2 	bl	8007c8c <USBD_LL_SetupStage>
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	6879      	ldr	r1, [r7, #4]
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	440b      	add	r3, r1
 80090d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	4619      	mov	r1, r3
 80090da:	f7fe fe24 	bl	8007d26 <USBD_LL_DataOutStage>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	440b      	add	r3, r1
 8009106:	333c      	adds	r3, #60	; 0x3c
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	4619      	mov	r1, r3
 800910e:	f7fe fe7b 	bl	8007e08 <USBD_LL_DataInStage>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe ff8b 	bl	8008044 <USBD_LL_SOF>
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800913e:	2301      	movs	r3, #1
 8009140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d001      	beq.n	800914e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800914a:	f7f7 f9f9 	bl	8000540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009154:	7bfa      	ldrb	r2, [r7, #15]
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe ff3b 	bl	8007fd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fef4 	bl	8007f52 <USBD_LL_Reset>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe ff35 	bl	8007ff2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d005      	beq.n	800919c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <HAL_PCD_SuspendCallback+0x30>)
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	4a03      	ldr	r2, [pc, #12]	; (80091a4 <HAL_PCD_SuspendCallback+0x30>)
 8009196:	f043 0306 	orr.w	r3, r3, #6
 800919a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	e000ed00 	.word	0xe000ed00

080091a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe ff2f 	bl	800801a <USBD_LL_Resume>
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091cc:	4a28      	ldr	r2, [pc, #160]	; (8009270 <USBD_LL_Init+0xac>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a26      	ldr	r2, [pc, #152]	; (8009270 <USBD_LL_Init+0xac>)
 80091d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091dc:	4b24      	ldr	r3, [pc, #144]	; (8009270 <USBD_LL_Init+0xac>)
 80091de:	4a25      	ldr	r2, [pc, #148]	; (8009274 <USBD_LL_Init+0xb0>)
 80091e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091e2:	4b23      	ldr	r3, [pc, #140]	; (8009270 <USBD_LL_Init+0xac>)
 80091e4:	2208      	movs	r2, #8
 80091e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091e8:	4b21      	ldr	r3, [pc, #132]	; (8009270 <USBD_LL_Init+0xac>)
 80091ea:	2202      	movs	r2, #2
 80091ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091ee:	4b20      	ldr	r3, [pc, #128]	; (8009270 <USBD_LL_Init+0xac>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091f4:	4b1e      	ldr	r3, [pc, #120]	; (8009270 <USBD_LL_Init+0xac>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091fa:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <USBD_LL_Init+0xac>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009200:	481b      	ldr	r0, [pc, #108]	; (8009270 <USBD_LL_Init+0xac>)
 8009202:	f7f7 ff9f 	bl	8001144 <HAL_PCD_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800920c:	f7f7 f998 	bl	8000540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009216:	2318      	movs	r3, #24
 8009218:	2200      	movs	r2, #0
 800921a:	2100      	movs	r1, #0
 800921c:	f7f9 fc20 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009226:	2358      	movs	r3, #88	; 0x58
 8009228:	2200      	movs	r2, #0
 800922a:	2180      	movs	r1, #128	; 0x80
 800922c:	f7f9 fc18 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009236:	23c0      	movs	r3, #192	; 0xc0
 8009238:	2200      	movs	r2, #0
 800923a:	2181      	movs	r1, #129	; 0x81
 800923c:	f7f9 fc10 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009246:	f44f 7388 	mov.w	r3, #272	; 0x110
 800924a:	2200      	movs	r2, #0
 800924c:	2101      	movs	r1, #1
 800924e:	f7f9 fc07 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800925c:	2200      	movs	r2, #0
 800925e:	2182      	movs	r1, #130	; 0x82
 8009260:	f7f9 fbfe 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20000ef4 	.word	0x20000ef4
 8009274:	40005c00 	.word	0x40005c00

08009278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800928e:	4618      	mov	r0, r3
 8009290:	f7f8 f870 	bl	8001374 <HAL_PCD_Start>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f94e 	bl	800953c <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	461a      	mov	r2, r3
 80092bc:	4603      	mov	r3, r0
 80092be:	70fb      	strb	r3, [r7, #3]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70bb      	strb	r3, [r7, #2]
 80092c4:	4613      	mov	r3, r2
 80092c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d6:	78bb      	ldrb	r3, [r7, #2]
 80092d8:	883a      	ldrh	r2, [r7, #0]
 80092da:	78f9      	ldrb	r1, [r7, #3]
 80092dc:	f7f8 f9e8 	bl	80016b0 <HAL_PCD_EP_Open>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f928 	bl	800953c <USBD_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7f8 fa2f 	bl	800177c <HAL_PCD_EP_Close>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f909 	bl	800953c <USBD_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7f8 faef 	bl	800193a <HAL_PCD_EP_SetStall>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f8ea 	bl	800953c <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f7f8 fb30 	bl	80019fa <HAL_PCD_EP_ClrStall>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 f8cb 	bl	800953c <USBD_Get_USB_Status>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0c      	bge.n	80093ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	440b      	add	r3, r1
 80093e4:	3302      	adds	r3, #2
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	e00b      	b.n	8009402 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093f0:	68f9      	ldr	r1, [r7, #12]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	440b      	add	r3, r1
 80093fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009400:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7f8 f91b 	bl	8001666 <HAL_PCD_SetAddress>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f880 	bl	800953c <USBD_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009440:	7bbb      	ldrb	r3, [r7, #14]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	461a      	mov	r2, r3
 8009456:	460b      	mov	r3, r1
 8009458:	72fb      	strb	r3, [r7, #11]
 800945a:	4613      	mov	r3, r2
 800945c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800946c:	893b      	ldrh	r3, [r7, #8]
 800946e:	7af9      	ldrb	r1, [r7, #11]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	f7f8 fa1f 	bl	80018b4 <HAL_PCD_EP_Transmit>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f85d 	bl	800953c <USBD_Get_USB_Status>
 8009482:	4603      	mov	r3, r0
 8009484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009486:	7dbb      	ldrb	r3, [r7, #22]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	72fb      	strb	r3, [r7, #11]
 80094a0:	4613      	mov	r3, r2
 80094a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094b2:	893b      	ldrh	r3, [r7, #8]
 80094b4:	7af9      	ldrb	r1, [r7, #11]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	f7f8 f9a8 	bl	800180c <HAL_PCD_EP_Receive>
 80094bc:	4603      	mov	r3, r0
 80094be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f83a 	bl	800953c <USBD_Get_USB_Status>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f8 f9ca 	bl	8001886 <HAL_PCD_EP_GetRxCount>
 80094f2:	4603      	mov	r3, r0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009504:	4b02      	ldr	r3, [pc, #8]	; (8009510 <USBD_static_malloc+0x14>)
}
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr
 8009510:	200011e0 	.word	0x200011e0

08009514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]

}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	bc80      	pop	{r7}
 8009524:	4770      	bx	lr

08009526 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d817      	bhi.n	8009580 <USBD_Get_USB_Status+0x44>
 8009550:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <USBD_Get_USB_Status+0x1c>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	08009569 	.word	0x08009569
 800955c:	0800956f 	.word	0x0800956f
 8009560:	08009575 	.word	0x08009575
 8009564:	0800957b 	.word	0x0800957b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	e00b      	b.n	8009586 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800956e:	2302      	movs	r3, #2
 8009570:	73fb      	strb	r3, [r7, #15]
    break;
 8009572:	e008      	b.n	8009586 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009574:	2301      	movs	r3, #1
 8009576:	73fb      	strb	r3, [r7, #15]
    break;
 8009578:	e005      	b.n	8009586 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800957a:	2302      	movs	r3, #2
 800957c:	73fb      	strb	r3, [r7, #15]
    break;
 800957e:	e002      	b.n	8009586 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009580:	2302      	movs	r3, #2
 8009582:	73fb      	strb	r3, [r7, #15]
    break;
 8009584:	bf00      	nop
  }
  return usb_status;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	2600      	movs	r6, #0
 8009598:	4d0c      	ldr	r5, [pc, #48]	; (80095cc <__libc_init_array+0x38>)
 800959a:	4c0d      	ldr	r4, [pc, #52]	; (80095d0 <__libc_init_array+0x3c>)
 800959c:	1b64      	subs	r4, r4, r5
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	42a6      	cmp	r6, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	f000 f822 	bl	80095ec <_init>
 80095a8:	2600      	movs	r6, #0
 80095aa:	4d0a      	ldr	r5, [pc, #40]	; (80095d4 <__libc_init_array+0x40>)
 80095ac:	4c0a      	ldr	r4, [pc, #40]	; (80095d8 <__libc_init_array+0x44>)
 80095ae:	1b64      	subs	r4, r4, r5
 80095b0:	10a4      	asrs	r4, r4, #2
 80095b2:	42a6      	cmp	r6, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095bc:	4798      	blx	r3
 80095be:	3601      	adds	r6, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c6:	4798      	blx	r3
 80095c8:	3601      	adds	r6, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	08009858 	.word	0x08009858
 80095d0:	08009858 	.word	0x08009858
 80095d4:	08009858 	.word	0x08009858
 80095d8:	0800985c 	.word	0x0800985c

080095dc <memset>:
 80095dc:	4603      	mov	r3, r0
 80095de:	4402      	add	r2, r0
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d100      	bne.n	80095e6 <memset+0xa>
 80095e4:	4770      	bx	lr
 80095e6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ea:	e7f9      	b.n	80095e0 <memset+0x4>

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
