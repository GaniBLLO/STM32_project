
CMSIS_C8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000544  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000650  08000650  00010658  2**0
                  CONTENTS
  4 .ARM          00000000  08000650  08000650  00010658  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000658  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000658  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ae0  00000000  00000000  00010681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000553  00000000  00000000  00011161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  000116b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  000117c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001020f  00000000  00000000  00011880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018e5  00000000  00000000  00021a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054270  00000000  00000000  00023374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000775e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000258  00000000  00000000  00077634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000638 	.word	0x08000638

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000638 	.word	0x08000638

0800014c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <GPIO_Init>:
#define RST_ON	GPIOA->BSRR |= GPIO_BSRR_BR10;
#define RST_OFF	GPIOA->BSRR |= GPIO_BSRR_BS10;

D_ARR	D	=	D_DEFAULT;

void GPIO_Init(){
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
	//RCC
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800015c:	4b7c      	ldr	r3, [pc, #496]	; (8000350 <GPIO_Init+0x1f8>)
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	4a7b      	ldr	r2, [pc, #492]	; (8000350 <GPIO_Init+0x1f8>)
 8000162:	f043 0304 	orr.w	r3, r3, #4
 8000166:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000168:	4b79      	ldr	r3, [pc, #484]	; (8000350 <GPIO_Init+0x1f8>)
 800016a:	699b      	ldr	r3, [r3, #24]
 800016c:	4a78      	ldr	r2, [pc, #480]	; (8000350 <GPIO_Init+0x1f8>)
 800016e:	f043 0308 	orr.w	r3, r3, #8
 8000172:	6193      	str	r3, [r2, #24]
	 * D4	->	PA4
	 * D5	->	PA5
	 * D6	->	PA6
	 * D7	->	PA7	*/
	//D0
	GPIOB->CRL |= GPIO_CRL_MODE0;
 8000174:	4b77      	ldr	r3, [pc, #476]	; (8000354 <GPIO_Init+0x1fc>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a76      	ldr	r2, [pc, #472]	; (8000354 <GPIO_Init+0x1fc>)
 800017a:	f043 0303 	orr.w	r3, r3, #3
 800017e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF0;
 8000180:	4b74      	ldr	r3, [pc, #464]	; (8000354 <GPIO_Init+0x1fc>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a73      	ldr	r2, [pc, #460]	; (8000354 <GPIO_Init+0x1fc>)
 8000186:	f023 030c 	bic.w	r3, r3, #12
 800018a:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR |= GPIO_BSRR_BR0;
 800018c:	4b71      	ldr	r3, [pc, #452]	; (8000354 <GPIO_Init+0x1fc>)
 800018e:	691b      	ldr	r3, [r3, #16]
 8000190:	4a70      	ldr	r2, [pc, #448]	; (8000354 <GPIO_Init+0x1fc>)
 8000192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000196:	6113      	str	r3, [r2, #16]
	//D1
	GPIOB->CRL |= GPIO_CRL_MODE1;
 8000198:	4b6e      	ldr	r3, [pc, #440]	; (8000354 <GPIO_Init+0x1fc>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a6d      	ldr	r2, [pc, #436]	; (8000354 <GPIO_Init+0x1fc>)
 800019e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF1;
 80001a4:	4b6b      	ldr	r3, [pc, #428]	; (8000354 <GPIO_Init+0x1fc>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a6a      	ldr	r2, [pc, #424]	; (8000354 <GPIO_Init+0x1fc>)
 80001aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001ae:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR |= GPIO_BSRR_BR1;
 80001b0:	4b68      	ldr	r3, [pc, #416]	; (8000354 <GPIO_Init+0x1fc>)
 80001b2:	691b      	ldr	r3, [r3, #16]
 80001b4:	4a67      	ldr	r2, [pc, #412]	; (8000354 <GPIO_Init+0x1fc>)
 80001b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ba:	6113      	str	r3, [r2, #16]
	//D2
	GPIOA->CRL |= GPIO_CRL_MODE2;
 80001bc:	4b66      	ldr	r3, [pc, #408]	; (8000358 <GPIO_Init+0x200>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a65      	ldr	r2, [pc, #404]	; (8000358 <GPIO_Init+0x200>)
 80001c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF2;
 80001c8:	4b63      	ldr	r3, [pc, #396]	; (8000358 <GPIO_Init+0x200>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a62      	ldr	r2, [pc, #392]	; (8000358 <GPIO_Init+0x200>)
 80001ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR2;
 80001d4:	4b60      	ldr	r3, [pc, #384]	; (8000358 <GPIO_Init+0x200>)
 80001d6:	691b      	ldr	r3, [r3, #16]
 80001d8:	4a5f      	ldr	r2, [pc, #380]	; (8000358 <GPIO_Init+0x200>)
 80001da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001de:	6113      	str	r3, [r2, #16]
	//D3
	GPIOA->CRL |= GPIO_CRL_MODE3;
 80001e0:	4b5d      	ldr	r3, [pc, #372]	; (8000358 <GPIO_Init+0x200>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a5c      	ldr	r2, [pc, #368]	; (8000358 <GPIO_Init+0x200>)
 80001e6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3;
 80001ec:	4b5a      	ldr	r3, [pc, #360]	; (8000358 <GPIO_Init+0x200>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a59      	ldr	r2, [pc, #356]	; (8000358 <GPIO_Init+0x200>)
 80001f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR3;
 80001f8:	4b57      	ldr	r3, [pc, #348]	; (8000358 <GPIO_Init+0x200>)
 80001fa:	691b      	ldr	r3, [r3, #16]
 80001fc:	4a56      	ldr	r2, [pc, #344]	; (8000358 <GPIO_Init+0x200>)
 80001fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000202:	6113      	str	r3, [r2, #16]
	//D4
	GPIOA->CRL |= GPIO_CRL_MODE4;
 8000204:	4b54      	ldr	r3, [pc, #336]	; (8000358 <GPIO_Init+0x200>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a53      	ldr	r2, [pc, #332]	; (8000358 <GPIO_Init+0x200>)
 800020a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF4;
 8000210:	4b51      	ldr	r3, [pc, #324]	; (8000358 <GPIO_Init+0x200>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a50      	ldr	r2, [pc, #320]	; (8000358 <GPIO_Init+0x200>)
 8000216:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR4;
 800021c:	4b4e      	ldr	r3, [pc, #312]	; (8000358 <GPIO_Init+0x200>)
 800021e:	691b      	ldr	r3, [r3, #16]
 8000220:	4a4d      	ldr	r2, [pc, #308]	; (8000358 <GPIO_Init+0x200>)
 8000222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000226:	6113      	str	r3, [r2, #16]
	//D5
	GPIOA->CRL |= GPIO_CRL_MODE5;
 8000228:	4b4b      	ldr	r3, [pc, #300]	; (8000358 <GPIO_Init+0x200>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a4a      	ldr	r2, [pc, #296]	; (8000358 <GPIO_Init+0x200>)
 800022e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF5;
 8000234:	4b48      	ldr	r3, [pc, #288]	; (8000358 <GPIO_Init+0x200>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a47      	ldr	r2, [pc, #284]	; (8000358 <GPIO_Init+0x200>)
 800023a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR5;
 8000240:	4b45      	ldr	r3, [pc, #276]	; (8000358 <GPIO_Init+0x200>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	4a44      	ldr	r2, [pc, #272]	; (8000358 <GPIO_Init+0x200>)
 8000246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800024a:	6113      	str	r3, [r2, #16]
	//D6
	GPIOA->CRL |= GPIO_CRL_MODE6;
 800024c:	4b42      	ldr	r3, [pc, #264]	; (8000358 <GPIO_Init+0x200>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a41      	ldr	r2, [pc, #260]	; (8000358 <GPIO_Init+0x200>)
 8000252:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF6;
 8000258:	4b3f      	ldr	r3, [pc, #252]	; (8000358 <GPIO_Init+0x200>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a3e      	ldr	r2, [pc, #248]	; (8000358 <GPIO_Init+0x200>)
 800025e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR6;
 8000264:	4b3c      	ldr	r3, [pc, #240]	; (8000358 <GPIO_Init+0x200>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	4a3b      	ldr	r2, [pc, #236]	; (8000358 <GPIO_Init+0x200>)
 800026a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800026e:	6113      	str	r3, [r2, #16]
	//D7
	GPIOA->CRL |= GPIO_CRL_MODE7;
 8000270:	4b39      	ldr	r3, [pc, #228]	; (8000358 <GPIO_Init+0x200>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a38      	ldr	r2, [pc, #224]	; (8000358 <GPIO_Init+0x200>)
 8000276:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800027a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF7;
 800027c:	4b36      	ldr	r3, [pc, #216]	; (8000358 <GPIO_Init+0x200>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a35      	ldr	r2, [pc, #212]	; (8000358 <GPIO_Init+0x200>)
 8000282:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOA->BSRR |= GPIO_BSRR_BR7;
 8000288:	4b33      	ldr	r3, [pc, #204]	; (8000358 <GPIO_Init+0x200>)
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	4a32      	ldr	r2, [pc, #200]	; (8000358 <GPIO_Init+0x200>)
 800028e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000292:	6113      	str	r3, [r2, #16]

	/* WR/RD => 1
	 * WRx	->	PB10
	 * RDx	->	PB11 */
	//WRx
	GPIOB->CRH |= GPIO_CRH_MODE10;
 8000294:	4b2f      	ldr	r3, [pc, #188]	; (8000354 <GPIO_Init+0x1fc>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a2e      	ldr	r2, [pc, #184]	; (8000354 <GPIO_Init+0x1fc>)
 800029a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800029e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_CNF10;
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <GPIO_Init+0x1fc>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a2b      	ldr	r2, [pc, #172]	; (8000354 <GPIO_Init+0x1fc>)
 80002a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002aa:	6053      	str	r3, [r2, #4]
	GPIOB->BSRR |= GPIO_BSRR_BS10;
 80002ac:	4b29      	ldr	r3, [pc, #164]	; (8000354 <GPIO_Init+0x1fc>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	4a28      	ldr	r2, [pc, #160]	; (8000354 <GPIO_Init+0x1fc>)
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	6113      	str	r3, [r2, #16]
	//RDx
	GPIOB->CRH |= GPIO_CRH_MODE11;
 80002b8:	4b26      	ldr	r3, [pc, #152]	; (8000354 <GPIO_Init+0x1fc>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a25      	ldr	r2, [pc, #148]	; (8000354 <GPIO_Init+0x1fc>)
 80002be:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002c2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH &= ~GPIO_CRH_CNF11;
 80002c4:	4b23      	ldr	r3, [pc, #140]	; (8000354 <GPIO_Init+0x1fc>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a22      	ldr	r2, [pc, #136]	; (8000354 <GPIO_Init+0x1fc>)
 80002ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002ce:	6053      	str	r3, [r2, #4]
	GPIOB->BSRR |= GPIO_BSRR_BS11;
 80002d0:	4b20      	ldr	r3, [pc, #128]	; (8000354 <GPIO_Init+0x1fc>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <GPIO_Init+0x1fc>)
 80002d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002da:	6113      	str	r3, [r2, #16]
	/* RSx/CS =>
	 * RSx	->	PA8
	 * CS	->	PA9
	 * RST	->	PA10*/
	//RSx
	GPIOA->CRH |= GPIO_CRH_MODE8;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <GPIO_Init+0x200>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <GPIO_Init+0x200>)
 80002e2:	f043 0303 	orr.w	r3, r3, #3
 80002e6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF8;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <GPIO_Init+0x200>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <GPIO_Init+0x200>)
 80002ee:	f023 030c 	bic.w	r3, r3, #12
 80002f2:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS8;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <GPIO_Init+0x200>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <GPIO_Init+0x200>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fe:	6113      	str	r3, [r2, #16]
	//CS
	GPIOA->CRH |= GPIO_CRH_MODE9;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <GPIO_Init+0x200>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <GPIO_Init+0x200>)
 8000306:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800030a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF9;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <GPIO_Init+0x200>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <GPIO_Init+0x200>)
 8000312:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000316:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS9;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <GPIO_Init+0x200>)
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <GPIO_Init+0x200>)
 800031e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000322:	6113      	str	r3, [r2, #16]
	//RST
	GPIOA->CRH |= GPIO_CRH_MODE10;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <GPIO_Init+0x200>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <GPIO_Init+0x200>)
 800032a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800032e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF10;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <GPIO_Init+0x200>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <GPIO_Init+0x200>)
 8000336:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800033a:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR |= GPIO_BSRR_BS10;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <GPIO_Init+0x200>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <GPIO_Init+0x200>)
 8000342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000346:	6113      	str	r3, [r2, #16]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010800 	.word	0x40010800

0800035c <ILI_Reset>:
	}
	else
		GPIOB->BSRR |= GPIO_BSRR_BR0;

}
void ILI_Reset(uint32_t cmd){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	CS_ON;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <ILI_Reset+0x6c>)
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <ILI_Reset+0x6c>)
 800036a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036e:	6113      	str	r3, [r2, #16]
	RSx_ON;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <ILI_Reset+0x6c>)
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <ILI_Reset+0x6c>)
 8000376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800037a:	6113      	str	r3, [r2, #16]
	WR_ON;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <ILI_Reset+0x70>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <ILI_Reset+0x70>)
 8000382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000386:	6113      	str	r3, [r2, #16]
	RST_ON;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <ILI_Reset+0x6c>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <ILI_Reset+0x6c>)
 800038e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000392:	6113      	str	r3, [r2, #16]
	delay_time(125);
 8000394:	207d      	movs	r0, #125	; 0x7d
 8000396:	f000 f824 	bl	80003e2 <delay_time>
	//Send_Command(cmd);
	WR_OFF;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <ILI_Reset+0x70>)
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <ILI_Reset+0x70>)
 80003a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003a4:	6113      	str	r3, [r2, #16]
	RSx_OFF;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <ILI_Reset+0x6c>)
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <ILI_Reset+0x6c>)
 80003ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b0:	6113      	str	r3, [r2, #16]
	CS_OFF;
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <ILI_Reset+0x6c>)
 80003b4:	691b      	ldr	r3, [r3, #16]
 80003b6:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <ILI_Reset+0x6c>)
 80003b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003bc:	6113      	str	r3, [r2, #16]
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <ILI_9341_init>:

void ILI_9341_init(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	GPIO_Init();
 80003d4:	f7ff fec0 	bl	8000158 <GPIO_Init>

	ILI_Reset(0x10);
 80003d8:	2010      	movs	r0, #16
 80003da:	f7ff ffbf 	bl	800035c <ILI_Reset>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <delay_time>:
 *      Author: Sokolov EvgenII
 */
#include <IRQ.h>
GLOBAL_TIME	TIME = GLOBAL_TIME_DEFAULT;

void delay_time(uint32_t time){
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]

    for (uint32_t i = 0; i < time; i++);
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	e002      	b.n	80003f6 <delay_time+0x14>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3f8      	bcc.n	80003f0 <delay_time+0xe>
    	//__NOP;
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <SysTick_Handler>:

uint32_t GetTime(uint32_t timer){
	return timer;
}

void SysTick_Handler(){
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

	TIME.ms++;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <SysTick_Handler+0x60>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <SysTick_Handler+0x60>)
 8000418:	6013      	str	r3, [r2, #0]
	if(TIME.ms == 1000){
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <SysTick_Handler+0x60>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000422:	d107      	bne.n	8000434 <SysTick_Handler+0x28>
		TIME.ms = 0;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <SysTick_Handler+0x60>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
		TIME.sec++;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <SysTick_Handler+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	3301      	adds	r3, #1
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <SysTick_Handler+0x60>)
 8000432:	6053      	str	r3, [r2, #4]
	}
	else if(TIME.ms > 1001){
		//todo ERR!
	}
	if(TIME.sec == 60){
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <SysTick_Handler+0x60>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	2b3c      	cmp	r3, #60	; 0x3c
 800043a:	d107      	bne.n	800044c <SysTick_Handler+0x40>
		TIME.sec = 0;
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <SysTick_Handler+0x60>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
		TIME.min++;
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <SysTick_Handler+0x60>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	3301      	adds	r3, #1
 8000448:	4a08      	ldr	r2, [pc, #32]	; (800046c <SysTick_Handler+0x60>)
 800044a:	6093      	str	r3, [r2, #8]
	}
	if(TIME.min == 60){
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <SysTick_Handler+0x60>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	2b3c      	cmp	r3, #60	; 0x3c
 8000452:	d107      	bne.n	8000464 <SysTick_Handler+0x58>
		TIME.min = 0;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SysTick_Handler+0x60>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
		TIME.hr++;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <SysTick_Handler+0x60>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	3301      	adds	r3, #1
 8000460:	4a02      	ldr	r2, [pc, #8]	; (800046c <SysTick_Handler+0x60>)
 8000462:	60d3      	str	r3, [r2, #12]
	}
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	2000001c 	.word	0x2000001c

08000470 <RCC_init>:
 *  Created on: Jun 19, 2023
 *      Author: Sokolov EvgenII
 */
#include "stm32f103xb.h"

void RCC_init(){
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

	/*Задаётся тактирование HCLK = 36MHz*/
    RCC->CR |= ((uint32_t) RCC_CR_HSEON);	//Включение кварца
 8000474:	4b31      	ldr	r3, [pc, #196]	; (800053c <RCC_init+0xcc>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a30      	ldr	r2, [pc, #192]	; (800053c <RCC_init+0xcc>)
 800047a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));		//Жду включение кварца.тактирования
 8000480:	bf00      	nop
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <RCC_init+0xcc>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f9      	beq.n	8000482 <RCC_init+0x12>

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;		//Задаю тактирование общей шины AHB 48 - 72MHz...
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <RCC_init+0xcc>)
 8000490:	4a2a      	ldr	r2, [pc, #168]	; (800053c <RCC_init+0xcc>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;		//Тактирование шины APB1..
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <RCC_init+0xcc>)
 8000498:	4a28      	ldr	r2, [pc, #160]	; (800053c <RCC_init+0xcc>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;		//Тактирование шины APB2.
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <RCC_init+0xcc>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	4a26      	ldr	r2, [pc, #152]	; (800053c <RCC_init+0xcc>)
 80004a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a8:	6053      	str	r3, [r2, #4]

    RCC->CFGR &= ~RCC_CFGR_PLLMULL;			//Множители и делители приравниваю к 0
 80004aa:	4b24      	ldr	r3, [pc, #144]	; (800053c <RCC_init+0xcc>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a23      	ldr	r2, [pc, #140]	; (800053c <RCC_init+0xcc>)
 80004b0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80004b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLSRC;			//Делитель для тактирования (после PLL Source mux)
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <RCC_init+0xcc>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	4a20      	ldr	r2, [pc, #128]	; (800053c <RCC_init+0xcc>)
 80004bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c0:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;		//Делитель для тактирования HSE (После "HSE") => 1
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <RCC_init+0xcc>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a1d      	ldr	r2, [pc, #116]	; (800053c <RCC_init+0xcc>)
 80004c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80004cc:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_PLLSRC;			//PLL Source MUX
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <RCC_init+0xcc>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4a1a      	ldr	r2, [pc, #104]	; (800053c <RCC_init+0xcc>)
 80004d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLXTPRE;			//Делитель для тактирования HSE/2
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <RCC_init+0xcc>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a17      	ldr	r2, [pc, #92]	; (800053c <RCC_init+0xcc>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;			//Множитель PLL = 9
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <RCC_init+0xcc>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	4a14      	ldr	r2, [pc, #80]	; (800053c <RCC_init+0xcc>)
 80004ec:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80004f0:	6053      	str	r3, [r2, #4]

    RCC->CR |= RCC_CR_PLLON;				//Включение Множителя PLL
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <RCC_init+0xcc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a11      	ldr	r2, [pc, #68]	; (800053c <RCC_init+0xcc>)
 80004f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fc:	6013      	str	r3, [r2, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004fe:	bf00      	nop
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <RCC_init+0xcc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <RCC_init+0x90>

    RCC->CFGR &= ~RCC_CFGR_SW;				//System clock mux
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <RCC_init+0xcc>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <RCC_init+0xcc>)
 8000512:	f023 0303 	bic.w	r3, r3, #3
 8000516:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_1;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <RCC_init+0xcc>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <RCC_init+0xcc>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	6053      	str	r3, [r2, #4]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);	//Жду пока включится
 8000524:	bf00      	nop
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <RCC_init+0xcc>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 030c 	and.w	r3, r3, #12
 800052e:	2b08      	cmp	r3, #8
 8000530:	d1f9      	bne.n	8000526 <RCC_init+0xb6>
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <Sys_clock>:
    GPIOA->CRH &= ~GPIO_CRH_CNF8_0;

    RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;
}

void Sys_clock(){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

    SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;		//Выкл. выключенного счётчика
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <Sys_clock+0x4c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <Sys_clock+0x4c>)
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		//Вкл. отсчёта до нуля
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <Sys_clock+0x4c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <Sys_clock+0x4c>)
 8000556:	f043 0302 	orr.w	r3, r3, #2
 800055a:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	//Источник синхронизации без делителя 24MHz
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <Sys_clock+0x4c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <Sys_clock+0x4c>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6013      	str	r3, [r2, #0]

    SysTick->LOAD = 35999;							//Задаю значение с которого будет отсчёт счётчика
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <Sys_clock+0x4c>)
 800056a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800056e:	605a      	str	r2, [r3, #4]

    SysTick->VAL = 35999;							//Задаю текущее значение счётчика
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <Sys_clock+0x4c>)
 8000572:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000576:	609a      	str	r2, [r3, #8]

    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		//Вкл. счётчик
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <Sys_clock+0x4c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <Sys_clock+0x4c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	e000e010 	.word	0xe000e010

08000590 <main>:
//void MCO(void);
//void SPI_init(void);

/*********************MAIN**********************/

int main(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	Sys_clock();
 8000594:	f7ff ffd4 	bl	8000540 <Sys_clock>
    RCC_init();
 8000598:	f7ff ff6a 	bl	8000470 <RCC_init>
    ILI_9341_init();
 800059c:	f7ff ff18 	bl	80003d0 <ILI_9341_init>
//    init_dma();
//    GPIO_init();
//    SPI_init();
//    uint8_t	vector[2] = {0xFF, 0xC3};

    while(1){
 80005a0:	e7fe      	b.n	80005a0 <main+0x10>
	...

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ca:	f7ff fdbf 	bl	800014c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f000 f80f 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff ffdd 	bl	8000590 <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005e0:	08000658 	.word	0x08000658
  ldr r2, =_sbss
 80005e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005e8:	2000002c 	.word	0x2000002c

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2600      	movs	r6, #0
 80005f4:	4d0c      	ldr	r5, [pc, #48]	; (8000628 <__libc_init_array+0x38>)
 80005f6:	4c0d      	ldr	r4, [pc, #52]	; (800062c <__libc_init_array+0x3c>)
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	f000 f81a 	bl	8000638 <_init>
 8000604:	2600      	movs	r6, #0
 8000606:	4d0a      	ldr	r5, [pc, #40]	; (8000630 <__libc_init_array+0x40>)
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <__libc_init_array+0x44>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
